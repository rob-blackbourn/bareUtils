{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome \u00b6 This project contains utilities for the bareASGI projects and the bareClient project. This module depends on bareTypes which has no dependencies.","title":"Welcome"},{"location":"#welcome","text":"This project contains utilities for the bareASGI projects and the bareClient project. This module depends on bareTypes which has no dependencies.","title":"Welcome"},{"location":"api/bareutils.compression.middleware/","text":"module bareutils.compression.middleware \u00b6 Summary \u00b6 Middleware for compression function bareutils.compression . make_default_compression_middleware \u00b6 Summary \u00b6 Makes the compression middleware with the default compressors: gzip, and Description \u00b6 deflate. The following adds the middleware, setting the minimum size to 1024 compression_middleware = make_default_compression_middleware ( minimum_size = 1024 ) app = Application ( middlewares = [ compression_middleware ]) bareutils.compression . make_default_compression_middleware ( * , minimum_size : int ) -> CompressionMiddleware Parameters \u00b6 minimum_size : int (optional) An optional size below which no compression is performed. Defaults to 512. Returns \u00b6 CompressionMiddleware : The compression middleware. class CompressionMiddleware \u00b6 Summary \u00b6 Constructs the compression middleware. Description \u00b6 Note how the compression functions are passed rather than the compressors, as a fresh compressor is required for each message. compressors = { b 'gzip' : make_gzip_compressobj , b 'deflate' : make_deflate_compressobj } return CompressionMiddleware ( compressors , minimum_size ) bareutils.compression . CompressionMiddleware ( compressors : Mapping[bytes, Callable[[], Compressor]] , minimum_size : int ) -> None Parameters \u00b6 compressors : Mapping[bytes, Callable[[], Compressor]] A dictionary of encoding to compressor factories. minimum_size : int (optional) The size below which no compression will be attempted. Defaults to 512. method CompressionMiddleware . is_acceptable \u00b6 Summary \u00b6 Returns True if the requested encoding is acceptable. Description \u00b6 If the quality value of 'identity' is specified as 0 we must support one of the other encodings. We must check the current encoding as it is possible that the this is already sufficient. CompressionMiddleware . is_acceptable ( accept_encoding : Mapping[bytes, float] , content_encoding : List[bytes] ) -> bool Parameters \u00b6 accept_encoding : Mapping[bytes, float] The acceptable encodings. content_encoding : List[bytes] The current content encoding. Returns \u00b6 bool : True if acceptable, otherwise False. method CompressionMiddleware . is_desirable \u00b6 Summary \u00b6 Returns True if the compression is desirable. Description \u00b6 While compression might be possible it may not be desirable. For example the content may already be compressed (e.g. for an image), or the content length may be too small to be worth the effort. CompressionMiddleware . is_desirable ( accept_encoding : Mapping[bytes, float] , content_encoding : List[bytes] , content_length : Optional[int] ) -> bool Parameters \u00b6 accept_encoding : Mapping[bytes, float] The requested encodings. content_encoding : List[bytes] The current encoding. content_length : Optional[int] The content length if available. Returns \u00b6 bool : True if compression is desirable, otherwise False. method CompressionMiddleware . select_encoding \u00b6 Summary \u00b6 Select the encoding based on the accepted encodings CompressionMiddleware . select_encoding ( accept_encoding : Mapping[bytes, float] ) -> bytes Parameters \u00b6 accept_encoding : Mapping[bytes, float] The accepted encodings. Returns \u00b6 bytes : The selected encoding.","title":"bareutils.compression.middleware"},{"location":"api/bareutils.compression.middleware/#module-bareutilscompressionmiddleware","text":"","title":"module bareutils.compression.middleware"},{"location":"api/bareutils.compression.middleware/#summary","text":"Middleware for compression","title":"Summary"},{"location":"api/bareutils.compression.middleware/#function-bareutilscompressionmake_default_compression_middleware","text":"","title":"function bareutils.compression.make_default_compression_middleware"},{"location":"api/bareutils.compression.middleware/#summary_1","text":"Makes the compression middleware with the default compressors: gzip, and","title":"Summary"},{"location":"api/bareutils.compression.middleware/#description","text":"deflate. The following adds the middleware, setting the minimum size to 1024 compression_middleware = make_default_compression_middleware ( minimum_size = 1024 ) app = Application ( middlewares = [ compression_middleware ]) bareutils.compression . make_default_compression_middleware ( * , minimum_size : int ) -> CompressionMiddleware","title":"Description"},{"location":"api/bareutils.compression.middleware/#parameters","text":"minimum_size : int (optional) An optional size below which no compression is performed. Defaults to 512.","title":"Parameters"},{"location":"api/bareutils.compression.middleware/#returns","text":"CompressionMiddleware : The compression middleware.","title":"Returns"},{"location":"api/bareutils.compression.middleware/#class-compressionmiddleware","text":"","title":"class CompressionMiddleware"},{"location":"api/bareutils.compression.middleware/#summary_2","text":"Constructs the compression middleware.","title":"Summary"},{"location":"api/bareutils.compression.middleware/#description_1","text":"Note how the compression functions are passed rather than the compressors, as a fresh compressor is required for each message. compressors = { b 'gzip' : make_gzip_compressobj , b 'deflate' : make_deflate_compressobj } return CompressionMiddleware ( compressors , minimum_size ) bareutils.compression . CompressionMiddleware ( compressors : Mapping[bytes, Callable[[], Compressor]] , minimum_size : int ) -> None","title":"Description"},{"location":"api/bareutils.compression.middleware/#parameters_1","text":"compressors : Mapping[bytes, Callable[[], Compressor]] A dictionary of encoding to compressor factories. minimum_size : int (optional) The size below which no compression will be attempted. Defaults to 512.","title":"Parameters"},{"location":"api/bareutils.compression.middleware/#method-compressionmiddlewareis_acceptable","text":"","title":"method CompressionMiddleware.is_acceptable"},{"location":"api/bareutils.compression.middleware/#summary_3","text":"Returns True if the requested encoding is acceptable.","title":"Summary"},{"location":"api/bareutils.compression.middleware/#description_2","text":"If the quality value of 'identity' is specified as 0 we must support one of the other encodings. We must check the current encoding as it is possible that the this is already sufficient. CompressionMiddleware . is_acceptable ( accept_encoding : Mapping[bytes, float] , content_encoding : List[bytes] ) -> bool","title":"Description"},{"location":"api/bareutils.compression.middleware/#parameters_2","text":"accept_encoding : Mapping[bytes, float] The acceptable encodings. content_encoding : List[bytes] The current content encoding.","title":"Parameters"},{"location":"api/bareutils.compression.middleware/#returns_1","text":"bool : True if acceptable, otherwise False.","title":"Returns"},{"location":"api/bareutils.compression.middleware/#method-compressionmiddlewareis_desirable","text":"","title":"method CompressionMiddleware.is_desirable"},{"location":"api/bareutils.compression.middleware/#summary_4","text":"Returns True if the compression is desirable.","title":"Summary"},{"location":"api/bareutils.compression.middleware/#description_3","text":"While compression might be possible it may not be desirable. For example the content may already be compressed (e.g. for an image), or the content length may be too small to be worth the effort. CompressionMiddleware . is_desirable ( accept_encoding : Mapping[bytes, float] , content_encoding : List[bytes] , content_length : Optional[int] ) -> bool","title":"Description"},{"location":"api/bareutils.compression.middleware/#parameters_3","text":"accept_encoding : Mapping[bytes, float] The requested encodings. content_encoding : List[bytes] The current encoding. content_length : Optional[int] The content length if available.","title":"Parameters"},{"location":"api/bareutils.compression.middleware/#returns_2","text":"bool : True if compression is desirable, otherwise False.","title":"Returns"},{"location":"api/bareutils.compression.middleware/#method-compressionmiddlewareselect_encoding","text":"","title":"method CompressionMiddleware.select_encoding"},{"location":"api/bareutils.compression.middleware/#summary_5","text":"Select the encoding based on the accepted encodings CompressionMiddleware . select_encoding ( accept_encoding : Mapping[bytes, float] ) -> bytes","title":"Summary"},{"location":"api/bareutils.compression.middleware/#parameters_4","text":"accept_encoding : Mapping[bytes, float] The accepted encodings.","title":"Parameters"},{"location":"api/bareutils.compression.middleware/#returns_3","text":"bytes : The selected encoding.","title":"Returns"},{"location":"api/bareutils.compression.streaming/","text":"module bareutils.compression.streaming \u00b6 Summary \u00b6 Compression streaming. async function bareutils.compression . compression_reader \u00b6 async bareutils.compression . compression_reader ( source : Content , decompressobj : Decompressor ) -> bytes Parameters \u00b6 source : Content decompressobj : Decompressor Returns \u00b6 bytes : async generator function bareutils.compression . compression_reader_adapter \u00b6 async bareutils.compression . compression_reader_adapter ( reader : Content , decompressobj : Decompressor ) -> Content Parameters \u00b6 reader : Content decompressobj : Decompressor Yields \u00b6 Content : function bareutils.compression . compression_writer \u00b6 Summary \u00b6 Create an async iterator for compressed content. bareutils.compression . compression_writer ( buf : bytes , compressobj : Compressor , chunk_size : int ) -> Content Parameters \u00b6 buf : bytes The bytes to compress. compressobj : Compressor The compressor. chunk_size : int (optional) An optional chunk size where -1 indicates no chunking. Defaults to -1. Returns \u00b6 Content : An async iterator of compressed bytes. async generator function bareutils.compression . compression_writer_adapter \u00b6 Summary \u00b6 Adapts a bytes generator to generated compressed output. async bareutils.compression . compression_writer_adapter ( writer : Content , compressobj : Compressor ) -> Content Parameters \u00b6 writer : Content The writer to be adapted. compressobj : Compressor A compressor Yields \u00b6 Content : The compressed content as bytes function bareutils.compression . make_compress_compressobj \u00b6 Summary \u00b6 Make a compressor for 'compress' Description \u00b6 Note: This is not used by browsers anymore and should be avoided. bareutils.compression . make_compress_compressobj ( ) -> Compressor Returns \u00b6 Compressor : A compress compressor. function bareutils.compression . make_compress_decompressobj \u00b6 Summary \u00b6 Make a compressor for 'compress' Description \u00b6 Note: This is not used by browsers anymore and should be avoided. bareutils.compression . make_compress_decompressobj ( ) -> Decompressor Returns \u00b6 Decompressor : A compress compressor. function bareutils.compression . make_deflate_compressobj \u00b6 Summary \u00b6 Make a compressor for 'deflate' bareutils.compression . make_deflate_compressobj ( ) -> Compressor Returns \u00b6 Compressor : A deflate compressor. function bareutils.compression . make_deflate_decompressobj \u00b6 Summary \u00b6 Make a compressor for 'deflate' bareutils.compression . make_deflate_decompressobj ( ) -> Decompressor Returns \u00b6 Decompressor : A deflate compressor. function bareutils.compression . make_gzip_compressobj \u00b6 Summary \u00b6 Make a compressor for 'gzip' bareutils.compression . make_gzip_compressobj ( ) -> Compressor Returns \u00b6 Compressor : A gzip compressor. function bareutils.compression . make_gzip_decompressobj \u00b6 Summary \u00b6 Make a compressor for 'gzip' bareutils.compression . make_gzip_decompressobj ( ) -> Decompressor Returns \u00b6 Decompressor : A gzip compressor. class Compressor \u00b6 Summary \u00b6 A class to represent the methods available on a compressor bareutils.compression . Compressor ( ) -> None method Compressor . compress \u00b6 Summary \u00b6 Compress a buffer Compressor . compress ( buf : bytes ) -> bytes Parameters \u00b6 buf : bytes The buffer to compress. Returns \u00b6 bytes : The compressed buffer. method Compressor . flush \u00b6 Summary \u00b6 Flush the compressor Compressor . flush ( ) -> bytes Returns \u00b6 bytes : The remaining bytes. class Decompressor \u00b6 Summary \u00b6 A class to represent the methods available on a compressor bareutils.compression . Decompressor ( ) -> None property Decompressor . eof \u00b6 eof -> bool property Decompressor . unconsumed_tail \u00b6 unconsumed_tail -> bytes property Decompressor . unused_data \u00b6 unused_data -> bytes method Decompressor . copy \u00b6 Decompressor . copy ( ) -> Decompressor Returns \u00b6 Decompressor : method Decompressor . decompress \u00b6 Decompressor . decompress ( buf : bytes , max_length : int ) -> bytes Parameters \u00b6 buf : bytes max_length : int (optional) Returns \u00b6 bytes : method Decompressor . flush \u00b6 Decompressor . flush ( length : Optional[int] ) -> bytes Parameters \u00b6 length : Optional[int] (optional) Returns \u00b6 bytes :","title":"bareutils.compression.streaming"},{"location":"api/bareutils.compression.streaming/#module-bareutilscompressionstreaming","text":"","title":"module bareutils.compression.streaming"},{"location":"api/bareutils.compression.streaming/#summary","text":"Compression streaming.","title":"Summary"},{"location":"api/bareutils.compression.streaming/#async-function-bareutilscompressioncompression_reader","text":"async bareutils.compression . compression_reader ( source : Content , decompressobj : Decompressor ) -> bytes","title":"async function bareutils.compression.compression_reader"},{"location":"api/bareutils.compression.streaming/#parameters","text":"source : Content decompressobj : Decompressor","title":"Parameters"},{"location":"api/bareutils.compression.streaming/#returns","text":"bytes :","title":"Returns"},{"location":"api/bareutils.compression.streaming/#async-generator-function-bareutilscompressioncompression_reader_adapter","text":"async bareutils.compression . compression_reader_adapter ( reader : Content , decompressobj : Decompressor ) -> Content","title":"async generator function bareutils.compression.compression_reader_adapter"},{"location":"api/bareutils.compression.streaming/#parameters_1","text":"reader : Content decompressobj : Decompressor","title":"Parameters"},{"location":"api/bareutils.compression.streaming/#yields","text":"Content :","title":"Yields"},{"location":"api/bareutils.compression.streaming/#function-bareutilscompressioncompression_writer","text":"","title":"function bareutils.compression.compression_writer"},{"location":"api/bareutils.compression.streaming/#summary_1","text":"Create an async iterator for compressed content. bareutils.compression . compression_writer ( buf : bytes , compressobj : Compressor , chunk_size : int ) -> Content","title":"Summary"},{"location":"api/bareutils.compression.streaming/#parameters_2","text":"buf : bytes The bytes to compress. compressobj : Compressor The compressor. chunk_size : int (optional) An optional chunk size where -1 indicates no chunking. Defaults to -1.","title":"Parameters"},{"location":"api/bareutils.compression.streaming/#returns_1","text":"Content : An async iterator of compressed bytes.","title":"Returns"},{"location":"api/bareutils.compression.streaming/#async-generator-function-bareutilscompressioncompression_writer_adapter","text":"","title":"async generator function bareutils.compression.compression_writer_adapter"},{"location":"api/bareutils.compression.streaming/#summary_2","text":"Adapts a bytes generator to generated compressed output. async bareutils.compression . compression_writer_adapter ( writer : Content , compressobj : Compressor ) -> Content","title":"Summary"},{"location":"api/bareutils.compression.streaming/#parameters_3","text":"writer : Content The writer to be adapted. compressobj : Compressor A compressor","title":"Parameters"},{"location":"api/bareutils.compression.streaming/#yields_1","text":"Content : The compressed content as bytes","title":"Yields"},{"location":"api/bareutils.compression.streaming/#function-bareutilscompressionmake_compress_compressobj","text":"","title":"function bareutils.compression.make_compress_compressobj"},{"location":"api/bareutils.compression.streaming/#summary_3","text":"Make a compressor for 'compress'","title":"Summary"},{"location":"api/bareutils.compression.streaming/#description","text":"Note: This is not used by browsers anymore and should be avoided. bareutils.compression . make_compress_compressobj ( ) -> Compressor","title":"Description"},{"location":"api/bareutils.compression.streaming/#returns_2","text":"Compressor : A compress compressor.","title":"Returns"},{"location":"api/bareutils.compression.streaming/#function-bareutilscompressionmake_compress_decompressobj","text":"","title":"function bareutils.compression.make_compress_decompressobj"},{"location":"api/bareutils.compression.streaming/#summary_4","text":"Make a compressor for 'compress'","title":"Summary"},{"location":"api/bareutils.compression.streaming/#description_1","text":"Note: This is not used by browsers anymore and should be avoided. bareutils.compression . make_compress_decompressobj ( ) -> Decompressor","title":"Description"},{"location":"api/bareutils.compression.streaming/#returns_3","text":"Decompressor : A compress compressor.","title":"Returns"},{"location":"api/bareutils.compression.streaming/#function-bareutilscompressionmake_deflate_compressobj","text":"","title":"function bareutils.compression.make_deflate_compressobj"},{"location":"api/bareutils.compression.streaming/#summary_5","text":"Make a compressor for 'deflate' bareutils.compression . make_deflate_compressobj ( ) -> Compressor","title":"Summary"},{"location":"api/bareutils.compression.streaming/#returns_4","text":"Compressor : A deflate compressor.","title":"Returns"},{"location":"api/bareutils.compression.streaming/#function-bareutilscompressionmake_deflate_decompressobj","text":"","title":"function bareutils.compression.make_deflate_decompressobj"},{"location":"api/bareutils.compression.streaming/#summary_6","text":"Make a compressor for 'deflate' bareutils.compression . make_deflate_decompressobj ( ) -> Decompressor","title":"Summary"},{"location":"api/bareutils.compression.streaming/#returns_5","text":"Decompressor : A deflate compressor.","title":"Returns"},{"location":"api/bareutils.compression.streaming/#function-bareutilscompressionmake_gzip_compressobj","text":"","title":"function bareutils.compression.make_gzip_compressobj"},{"location":"api/bareutils.compression.streaming/#summary_7","text":"Make a compressor for 'gzip' bareutils.compression . make_gzip_compressobj ( ) -> Compressor","title":"Summary"},{"location":"api/bareutils.compression.streaming/#returns_6","text":"Compressor : A gzip compressor.","title":"Returns"},{"location":"api/bareutils.compression.streaming/#function-bareutilscompressionmake_gzip_decompressobj","text":"","title":"function bareutils.compression.make_gzip_decompressobj"},{"location":"api/bareutils.compression.streaming/#summary_8","text":"Make a compressor for 'gzip' bareutils.compression . make_gzip_decompressobj ( ) -> Decompressor","title":"Summary"},{"location":"api/bareutils.compression.streaming/#returns_7","text":"Decompressor : A gzip compressor.","title":"Returns"},{"location":"api/bareutils.compression.streaming/#class-compressor","text":"","title":"class Compressor"},{"location":"api/bareutils.compression.streaming/#summary_9","text":"A class to represent the methods available on a compressor bareutils.compression . Compressor ( ) -> None","title":"Summary"},{"location":"api/bareutils.compression.streaming/#method-compressorcompress","text":"","title":"method Compressor.compress"},{"location":"api/bareutils.compression.streaming/#summary_10","text":"Compress a buffer Compressor . compress ( buf : bytes ) -> bytes","title":"Summary"},{"location":"api/bareutils.compression.streaming/#parameters_4","text":"buf : bytes The buffer to compress.","title":"Parameters"},{"location":"api/bareutils.compression.streaming/#returns_8","text":"bytes : The compressed buffer.","title":"Returns"},{"location":"api/bareutils.compression.streaming/#method-compressorflush","text":"","title":"method Compressor.flush"},{"location":"api/bareutils.compression.streaming/#summary_11","text":"Flush the compressor Compressor . flush ( ) -> bytes","title":"Summary"},{"location":"api/bareutils.compression.streaming/#returns_9","text":"bytes : The remaining bytes.","title":"Returns"},{"location":"api/bareutils.compression.streaming/#class-decompressor","text":"","title":"class Decompressor"},{"location":"api/bareutils.compression.streaming/#summary_12","text":"A class to represent the methods available on a compressor bareutils.compression . Decompressor ( ) -> None","title":"Summary"},{"location":"api/bareutils.compression.streaming/#property-decompressoreof","text":"eof -> bool","title":"property Decompressor.eof"},{"location":"api/bareutils.compression.streaming/#property-decompressorunconsumed_tail","text":"unconsumed_tail -> bytes","title":"property Decompressor.unconsumed_tail"},{"location":"api/bareutils.compression.streaming/#property-decompressorunused_data","text":"unused_data -> bytes","title":"property Decompressor.unused_data"},{"location":"api/bareutils.compression.streaming/#method-decompressorcopy","text":"Decompressor . copy ( ) -> Decompressor","title":"method Decompressor.copy"},{"location":"api/bareutils.compression.streaming/#returns_10","text":"Decompressor :","title":"Returns"},{"location":"api/bareutils.compression.streaming/#method-decompressordecompress","text":"Decompressor . decompress ( buf : bytes , max_length : int ) -> bytes","title":"method Decompressor.decompress"},{"location":"api/bareutils.compression.streaming/#parameters_5","text":"buf : bytes max_length : int (optional)","title":"Parameters"},{"location":"api/bareutils.compression.streaming/#returns_11","text":"bytes :","title":"Returns"},{"location":"api/bareutils.compression.streaming/#method-decompressorflush","text":"Decompressor . flush ( length : Optional[int] ) -> bytes","title":"method Decompressor.flush"},{"location":"api/bareutils.compression.streaming/#parameters_6","text":"length : Optional[int] (optional)","title":"Parameters"},{"location":"api/bareutils.compression.streaming/#returns_12","text":"bytes :","title":"Returns"},{"location":"api/bareutils.cookies/","text":"module bareutils.cookies \u00b6 Summary \u00b6 Cookies function bareutils . decode_cookies \u00b6 Summary \u00b6 Decode a cookie header bareutils . decode_cookies ( cookies : bytes ) -> Mapping[bytes, List[bytes]] Parameters \u00b6 cookies : bytes The header Returns \u00b6 Mapping[bytes, List[bytes]] : The cookies function bareutils . decode_set_cookie \u00b6 Summary \u00b6 Decode a set-cookie header into a dictionary. Description \u00b6 The max-age value is represented as a datatime.timedelta . The expires value is represented as a datetine.datetime . The secure value is represented as a bool . bareutils . decode_set_cookie ( set_cookie : bytes ) -> Mapping[str, Any] Parameters \u00b6 set_cookie : bytes The set-cookie header Returns \u00b6 Mapping[str, Any] : A dictionary of the values function bareutils . encode_cookies \u00b6 Summary \u00b6 Encode the cookie header bareutils . encode_cookies ( cookies : Mapping[bytes, List[bytes]] ) -> bytes Parameters \u00b6 cookies : Mapping[bytes, List[bytes]] The cookies Returns \u00b6 bytes : The cookie header function bareutils . encode_set_cookie \u00b6 Summary \u00b6 Encode set-cookie bareutils . encode_set_cookie ( name : bytes , value : bytes , * , expires : Optional[datetime] , max_age : Optional[Union[int, timedelta]] , path : Optional[bytes] , domain : Optional[bytes] , secure : bool , http_only : bool , same_site : Optional[bytes] ) -> bytes Parameters \u00b6 name : bytes The cookie name value : bytes The cookie value expires : Optional[datetime] (optional) The time the cookie expires. Defaults to None. max_age : Optional[Union[int, timedelta]] (optional) The maximum age of the cookie in seconds. Defaults to None. path : Optional[bytes] (optional) The cookie path. Defaults to None. domain : Optional[bytes] (optional) The cookie domain. Defaults to None. secure : bool (optional) Indicates if the cookie is restricted to https. Defaults to False. http_only : bool (optional) Indicates if the cookie is available to the API. Defaults to False. same_site : Optional[bytes] (optional) CORS directive. Defaults to None. Returns \u00b6 bytes : The set-cookie header function bareutils . make_cookie \u00b6 Summary \u00b6 Make a set-cookie header bareutils . make_cookie ( key : bytes , value : bytes , * , expires : Optional[Union[datetime, timedelta]] , path : Optional[bytes] , domain : Optional[bytes] , secure : bool , http_only : bool , same_site : Optional[bytes] ) -> bytes Parameters \u00b6 key : bytes The cookie name value : bytes The cookie value expires : Optional[Union[datetime, timedelta]] (optional) The expiry time of the cookie. Defaults to None. path : Optional[bytes] (optional) The cookie path. Defaults to None. domain : Optional[bytes] (optional) The cookie domain. Defaults to None. secure : bool (optional) Indicates if the cookie is restricted to https. Defaults to False. http_only : bool (optional) Indicates if the cookie is available to the API. Defaults to False. same_site : Optional[bytes] (optional) CORS directive. Defaults to None. Returns \u00b6 bytes : The set-cookie header function bareutils . make_expired_cookie \u00b6 Summary \u00b6 Make an expired cookie bareutils . make_expired_cookie ( key : bytes , path : bytes ) -> bytes Parameters \u00b6 key : bytes The cookie name path : bytes (optional) The cookie path. Defaults to b'/'. Returns \u00b6 bytes : [description]","title":"bareutils.cookies"},{"location":"api/bareutils.cookies/#module-bareutilscookies","text":"","title":"module bareutils.cookies"},{"location":"api/bareutils.cookies/#summary","text":"Cookies","title":"Summary"},{"location":"api/bareutils.cookies/#function-bareutilsdecode_cookies","text":"","title":"function bareutils.decode_cookies"},{"location":"api/bareutils.cookies/#summary_1","text":"Decode a cookie header bareutils . decode_cookies ( cookies : bytes ) -> Mapping[bytes, List[bytes]]","title":"Summary"},{"location":"api/bareutils.cookies/#parameters","text":"cookies : bytes The header","title":"Parameters"},{"location":"api/bareutils.cookies/#returns","text":"Mapping[bytes, List[bytes]] : The cookies","title":"Returns"},{"location":"api/bareutils.cookies/#function-bareutilsdecode_set_cookie","text":"","title":"function bareutils.decode_set_cookie"},{"location":"api/bareutils.cookies/#summary_2","text":"Decode a set-cookie header into a dictionary.","title":"Summary"},{"location":"api/bareutils.cookies/#description","text":"The max-age value is represented as a datatime.timedelta . The expires value is represented as a datetine.datetime . The secure value is represented as a bool . bareutils . decode_set_cookie ( set_cookie : bytes ) -> Mapping[str, Any]","title":"Description"},{"location":"api/bareutils.cookies/#parameters_1","text":"set_cookie : bytes The set-cookie header","title":"Parameters"},{"location":"api/bareutils.cookies/#returns_1","text":"Mapping[str, Any] : A dictionary of the values","title":"Returns"},{"location":"api/bareutils.cookies/#function-bareutilsencode_cookies","text":"","title":"function bareutils.encode_cookies"},{"location":"api/bareutils.cookies/#summary_3","text":"Encode the cookie header bareutils . encode_cookies ( cookies : Mapping[bytes, List[bytes]] ) -> bytes","title":"Summary"},{"location":"api/bareutils.cookies/#parameters_2","text":"cookies : Mapping[bytes, List[bytes]] The cookies","title":"Parameters"},{"location":"api/bareutils.cookies/#returns_2","text":"bytes : The cookie header","title":"Returns"},{"location":"api/bareutils.cookies/#function-bareutilsencode_set_cookie","text":"","title":"function bareutils.encode_set_cookie"},{"location":"api/bareutils.cookies/#summary_4","text":"Encode set-cookie bareutils . encode_set_cookie ( name : bytes , value : bytes , * , expires : Optional[datetime] , max_age : Optional[Union[int, timedelta]] , path : Optional[bytes] , domain : Optional[bytes] , secure : bool , http_only : bool , same_site : Optional[bytes] ) -> bytes","title":"Summary"},{"location":"api/bareutils.cookies/#parameters_3","text":"name : bytes The cookie name value : bytes The cookie value expires : Optional[datetime] (optional) The time the cookie expires. Defaults to None. max_age : Optional[Union[int, timedelta]] (optional) The maximum age of the cookie in seconds. Defaults to None. path : Optional[bytes] (optional) The cookie path. Defaults to None. domain : Optional[bytes] (optional) The cookie domain. Defaults to None. secure : bool (optional) Indicates if the cookie is restricted to https. Defaults to False. http_only : bool (optional) Indicates if the cookie is available to the API. Defaults to False. same_site : Optional[bytes] (optional) CORS directive. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.cookies/#returns_3","text":"bytes : The set-cookie header","title":"Returns"},{"location":"api/bareutils.cookies/#function-bareutilsmake_cookie","text":"","title":"function bareutils.make_cookie"},{"location":"api/bareutils.cookies/#summary_5","text":"Make a set-cookie header bareutils . make_cookie ( key : bytes , value : bytes , * , expires : Optional[Union[datetime, timedelta]] , path : Optional[bytes] , domain : Optional[bytes] , secure : bool , http_only : bool , same_site : Optional[bytes] ) -> bytes","title":"Summary"},{"location":"api/bareutils.cookies/#parameters_4","text":"key : bytes The cookie name value : bytes The cookie value expires : Optional[Union[datetime, timedelta]] (optional) The expiry time of the cookie. Defaults to None. path : Optional[bytes] (optional) The cookie path. Defaults to None. domain : Optional[bytes] (optional) The cookie domain. Defaults to None. secure : bool (optional) Indicates if the cookie is restricted to https. Defaults to False. http_only : bool (optional) Indicates if the cookie is available to the API. Defaults to False. same_site : Optional[bytes] (optional) CORS directive. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.cookies/#returns_4","text":"bytes : The set-cookie header","title":"Returns"},{"location":"api/bareutils.cookies/#function-bareutilsmake_expired_cookie","text":"","title":"function bareutils.make_expired_cookie"},{"location":"api/bareutils.cookies/#summary_6","text":"Make an expired cookie bareutils . make_expired_cookie ( key : bytes , path : bytes ) -> bytes","title":"Summary"},{"location":"api/bareutils.cookies/#parameters_5","text":"key : bytes The cookie name path : bytes (optional) The cookie path. Defaults to b'/'.","title":"Parameters"},{"location":"api/bareutils.cookies/#returns_5","text":"bytes : [description]","title":"Returns"},{"location":"api/bareutils.header/","text":"module bareutils.header \u00b6 Summary \u00b6 Header utilities Description \u00b6 A collection of functions to extract headers from the ASGI scope. function bareutils . accept \u00b6 Summary \u00b6 Returns the accept header if it exists. Description \u00b6 Where quality is not given it defaults to 1.0. >>> accept ([( b 'accept' , b 'text/html, application/xhtml+xml, application/xml;q=0.9, / ;q=0.8' )]) { b 'text/html' : 1.0 , b 'application/xhtml+xml' : 1.0 , b 'application/xml' : 0.9 , b ' / ' : 0.8 } bareutils . accept ( headers : Headers , * , add_wildcard : bool , default : Optional[Mapping[bytes, float]] ) -> Optional[Mapping[bytes, Tuple[bytes, Any]]] Parameters \u00b6 headers : Headers The headers add_wildcard : bool (optional) If true add the implicit wildcard '*'. Defaults to False. default : Optional[Mapping[bytes, float]] (optional) An optional default. Defaults to None. Returns \u00b6 Optional[Mapping[bytes, Tuple[bytes, Any]]] : A dictionary where the key is media type and the value is quality. function bareutils . accept_ch \u00b6 Summary \u00b6 The Accept-CH header is set by the server to specify which Client Hints Description \u00b6 headers client should include in subsequent requests. bareutils . accept_ch ( headers : Headers , * , default : Optional[Mapping[bytes, float]] ) -> Optional[List[bytes]] Parameters \u00b6 headers : Headers The headers default : Optional[Mapping[bytes, float]] (optional) An optional default. Defaults to None. Returns \u00b6 Optional[List[bytes]] : The client hints function bareutils . accept_ch_lifetime \u00b6 Summary \u00b6 The Accept-CH-Lifetime header is set by the server to specify the Description \u00b6 persistence of Accept-CH header value that specifies for which Client Hints headers client should include in subsequent requests. bareutils . accept_ch_lifetime ( headers : Headers , * , default : Optional[Mapping[bytes, float]] ) -> Optional[int] Parameters \u00b6 headers : Headers The headers default : Optional[Mapping[bytes, float]] (optional) An optional default. Defaults to None. Returns \u00b6 Optional[int] : The lifetime in seconds function bareutils . accept_charset \u00b6 Summary \u00b6 Extracts the accept encoding header if it exists into a mapping of the Description \u00b6 encoding and the quality value which defaults to 1.0 if missing. bareutils . accept_charset ( headers : Headers , * , add_wildcard : bool , default : Optional[Mapping[bytes, float]] ) -> Optional[Mapping[bytes, float]] Parameters \u00b6 headers : Headers The headers add_wildcard : bool (optional) If True ensures the '*' charset is included. Defaults to False. default : Optional[Mapping[bytes, float]] (optional) An optional default. Defaults to None. Returns \u00b6 Optional[Mapping[bytes, float]] : A mapping of the encodings and qualities. function bareutils . accept_encoding \u00b6 Summary \u00b6 Extracts the accept encoding header if it exists into a mapping of the encoding Description \u00b6 and the quality value which defaults to 1.0 if missing. bareutils . accept_encoding ( headers : Headers , * , add_identity : bool , default : Optional[Mapping[bytes, float]] ) -> Optional[Mapping[bytes, float]] Parameters \u00b6 headers : Headers The headers to search. add_identity : bool (optional) If True ensures the 'identity' encoding is included.. Defaults to False. default : Optional[Mapping[bytes, float]] (optional) An optional default. Defaults to None. Returns \u00b6 Optional[Mapping[bytes, float]] : A mapping of the encodings and qualities. function bareutils . accept_language \u00b6 Summary \u00b6 Extracts the accept language header if it exists into a mapping of the Description \u00b6 encoding and the quality value which defaults to 1.0 if missing. bareutils . accept_language ( headers : Headers , * , add_wildcard : bool , default : Optional[Mapping[bytes, float]] ) -> Optional[Mapping[bytes, float]] Parameters \u00b6 headers : Headers The headers to search. add_wildcard : bool (optional) If True ensures the '*' charset is included. Defaults to False. default : Optional[Mapping[bytes, float]] (optional) [description]. Defaults to None. Returns \u00b6 Optional[Mapping[bytes, float]] : A mapping of the encodings and qualities. function bareutils . accept_patch \u00b6 Summary \u00b6 The Accept-Patch response HTTP header advertises which media-type the Description \u00b6 server is able to understand. bareutils . accept_patch ( headers : Headers , * , default : Optional[List[Tuple[bytes, Optional[bytes]]]] ) -> Optional[List[Tuple[bytes, Optional[bytes]]]] Parameters \u00b6 headers : Headers The headers to search. default : Optional[List[Tuple[bytes, Optional[bytes]]]] (optional) An optional default value. Defaults to None. Returns \u00b6 Optional[List[Tuple[bytes, Optional[bytes]]]] : A list of tuples of media type and optional charset. function bareutils . accept_ranges \u00b6 Summary \u00b6 Returns the value of the accept ranges header of None if missing bareutils . accept_ranges ( headers : Headers , * , default : Optional[bytes] ) -> Optional[bytes] Parameters \u00b6 headers : Headers The headers default : Optional[bytes] (optional) An optional default value. Defaults to None. Returns \u00b6 Optional[bytes] : The header value (bytes or none) function bareutils . access_control_allow_credentials \u00b6 Summary \u00b6 Extracts the access control allow credentials header as a bool or None if Description \u00b6 missing. bareutils . access_control_allow_credentials ( headers : Headers , * , default : Optional[bool] ) -> Optional[bool] Parameters \u00b6 headers : Headers The headers. default : Optional[bool] (optional) An optional default value. Defaults to None. Returns \u00b6 Optional[bool] : A bool or None function bareutils . access_control_allow_headers \u00b6 Summary \u00b6 The Access-Control-Allow-Headers response header is used in response to Description \u00b6 a preflight request which includes the Access-Control-Request-Headers to indicate which HTTP headers can be used during the actual request. bareutils . access_control_allow_headers ( headers : Headers , * , default : Optional[List[bytes]] ) -> Optional[List[bytes]] Parameters \u00b6 headers : Headers The headers. default : Optional[List[bytes]] (optional) An optional default value. Defaults to None. Returns \u00b6 Optional[List[bytes]] : A list of the allowed headers or '*' for all headers. function bareutils . access_control_allow_methods \u00b6 Summary \u00b6 The Access-Control-Allow-Methods response header specifies the method or Description \u00b6 methods allowed when accessing the resource in response to a preflight request. bareutils . access_control_allow_methods ( headers : Headers , * , default : Optional[List[bytes]] ) -> Optional[List[bytes]] Parameters \u00b6 headers : Headers The headers. default : Optional[List[bytes]] (optional) An optional default value. Defaults to None. Returns \u00b6 Optional[List[bytes]] : A list of the allowed methods, or '*' for all methods. function bareutils . access_control_allow_origin \u00b6 Summary \u00b6 The Access-Control-Allow-Origin response header indicates whether the Description \u00b6 response can be shared with requesting code from the given origin. bareutils . access_control_allow_origin ( headers : Headers , * , default : Optional[List[bytes]] ) -> Optional[bytes] Parameters \u00b6 headers : Headers The headers. default : Optional[List[bytes]] (optional) An optional default value. Defaults to None. Returns \u00b6 Optional[bytes] : The origin or '*' for all origins, or 'null' function bareutils . access_control_expose_headers \u00b6 Summary \u00b6 [summary] bareutils . access_control_expose_headers ( headers : Headers , * , add_simple_response_headers : bool , default : Optional[List[bytes]] ) -> Optional[List[bytes]] Parameters \u00b6 headers : Headers The headers. add_simple_response_headers : bool (optional) If true add the safelisted headers. Defaults to False. default : Optional[List[bytes]] (optional) An optional default value. Defaults to None. Returns \u00b6 Optional[List[bytes]] : The headers to expose. function bareutils . access_control_max_age \u00b6 Summary \u00b6 The Access-Control-Max-Age response header indicates how long the results Description \u00b6 of a preflight request (that is the information contained in the Access-Control-Allow-Methods and Access-Control-Allow-Headers headers) can be cached. bareutils . access_control_max_age ( headers : Headers , * , default : Optional[int] ) -> Optional[int] Parameters \u00b6 headers : Headers The headers default : Optional[int] (optional) An optional default value. Defaults to None. Returns \u00b6 Optional[int] : The number of seconds function bareutils . access_control_request_headers \u00b6 Summary \u00b6 The Access-Control-Request-Headers request header is used by browsers Description \u00b6 when issuing a preflight request, to let the server know which HTTP headers the client might send when the actual request is made. bareutils . access_control_request_headers ( headers : Headers , * , default : Optional[List[bytes]] ) -> Optional[List[bytes]] Parameters \u00b6 headers : Headers The headers default : Optional[List[bytes]] (optional) An optional default value. Defaults to None. Returns \u00b6 Optional[List[bytes]] : The request headers function bareutils . access_control_request_method \u00b6 Summary \u00b6 The Access-Control-Request-Method request header is used by browsers when Description \u00b6 issuing a preflight request, to let the server know which HTTP method will be used when the actual request is made. This header is necessary as the preflight request is always an OPTIONS and doesn't use the same method as the actual request. bareutils . access_control_request_method ( headers : Headers , * , default : Optional[bytes] ) -> Optional[bytes] Parameters \u00b6 headers : Headers The headers. default : Optional[bytes] (optional) An optional default value. Defaults to None. Returns \u00b6 Optional[bytes] : The method function bareutils . age \u00b6 Summary \u00b6 The Age header contains the time in seconds the object has been in a Description \u00b6 proxy cache. bareutils . age ( headers : Headers , * , default : Optional[int] ) -> Optional[int] Parameters \u00b6 headers : Headers The headers. default : Optional[int] (optional) An optional default value. Defaults to None. Returns \u00b6 Optional[int] : The time in seconds. function bareutils . allow \u00b6 Summary \u00b6 The Allow header lists the set of methods supported by a resource. bareutils . allow ( headers : Headers , * , default : Optional[List[bytes]] ) -> Optional[List[bytes]] Parameters \u00b6 headers : Headers The headers. default : Optional[List[bytes]] (optional) An optional default value. Defaults to None. Returns \u00b6 Optional[List[bytes]] : A list of methods function bareutils . authorization \u00b6 Summary \u00b6 The HTTP Authorization request header contains the credentials to Description \u00b6 authenticate a user agent with a server, usually after the server has responded with a 401 Unauthorized status and the WWW-Authenticate header. bareutils . authorization ( headers : Headers , * , default : Optional[Tuple[bytes, bytes]] ) -> Optional[Tuple[bytes, bytes]] Parameters \u00b6 headers : Headers The headers. default : Optional[Tuple[bytes, bytes]] (optional) An optional default value. Defaults to None. Returns \u00b6 Optional[Tuple[bytes, bytes]] : The type and credentials. function bareutils . cache_control \u00b6 Summary \u00b6 The Cache-Control general-header field is used to specify directives for Description \u00b6 caching mechanisms in both requests andresponses. Caching directives are unidirectional, meaning that a given directive in a request is not implying that the same directive is to be given in the response. bareutils . cache_control ( headers : Headers , * , default : Optional[Mapping[bytes, Optional[int]]] ) -> Optional[Mapping[bytes, Optional[int]]] Parameters \u00b6 headers : Headers The headers. default : Optional[Mapping[bytes, Optional[int]]] (optional) An optional default value. Defaults to None. Returns \u00b6 Optional[Mapping[bytes, Optional[int]]] : A dictionary of the directives and values. function bareutils . clear_site_data \u00b6 Summary \u00b6 The Clear-Site-Data header clears browsing data (cookies, storage, cache) Description \u00b6 associated with the requesting website. It allows web developers to have more control over the data stored locally by a browser for their origins. bareutils . clear_site_data ( headers : Headers , * , default : Optional[List[bytes]] ) -> Optional[List[bytes]] Parameters \u00b6 headers : Headers The headers. default : Optional[List[bytes]] (optional) An optional default value. Defaults to None. Returns \u00b6 Optional[List[bytes]] : A list of the directives. function bareutils . collect \u00b6 Summary \u00b6 Collect all headers into a mapping bareutils . collect ( headers : Headers ) -> Mapping[bytes, Any] Parameters \u00b6 headers : Headers The headers Returns \u00b6 Mapping[bytes, Any] : A mapping of the parsed headers function bareutils . connection \u00b6 Summary \u00b6 The Connection general header controls whether or not the network Description \u00b6 connection stays open after the current transaction finishes. If the value sent is keep-alive, the connection is persistent and not closed, allowing for subsequent requests to the same server to be done. bareutils . connection ( headers : Headers , * , default : Optional[bytes] ) -> Optional[bytes] Parameters \u00b6 headers : Headers The headers. default : Optional[bytes] (optional) An optional default value. Defaults to None. Returns \u00b6 Optional[bytes] : The value function bareutils . content_disposition \u00b6 Summary \u00b6 Returns the content type if any otherwise None bareutils . content_disposition ( headers : Headers , * , default : Optional[Tuple[bytes, Optional[Mapping[bytes, bytes]]]] ) -> Optional[Tuple[bytes, Optional[Mapping[bytes, bytes]]]] Parameters \u00b6 headers : Headers The headers. default : Optional[Tuple[bytes, Optional[Mapping[bytes, bytes]]]] (optional) An optional default. Defaults to None. Returns \u00b6 Optional[Tuple[bytes, Optional[Mapping[bytes, bytes]]]] : A tuple of the media type and a mapping of the parameters. function bareutils . content_encoding \u00b6 Summary \u00b6 Returns the content encodings in a list or None if they were not Description \u00b6 specified. bareutils . content_encoding ( headers : Headers , * , add_identity : bool , default : Optional[List[bytes]] ) -> Optional[List[bytes]] Parameters \u00b6 headers : Headers The headers. add_identity : bool (optional) If True ensures the 'identity' encoding is included. Defaults to False. default : Optional[List[bytes]] (optional) An optional default value. Defaults to None. Returns \u00b6 Optional[List[bytes]] : The list of content encodings. function bareutils . content_language \u00b6 Summary \u00b6 The Content-Language entity header is used to describe the language(s) Description \u00b6 intended for the audience, so that it allows a user to differentiate according to the users' own preferred language. bareutils . content_language ( headers : Headers , * , default : Optional[List[bytes]] ) -> Optional[List[bytes]] Parameters \u00b6 headers : Headers The headers. default : Optional[List[bytes]] (optional) An optional default value. Defaults to None. Returns \u00b6 Optional[List[bytes]] : The language. function bareutils . content_length \u00b6 Summary \u00b6 [summary] bareutils . content_length ( headers : Headers , * , default : Optional[int] ) -> Optional[int] Parameters \u00b6 headers : Headers The headers. default : Optional[int] (optional) An optional default value. Defaults to None. Returns \u00b6 Optional[int] : The length as an integer, or the default. function bareutils . content_location \u00b6 Summary \u00b6 The Content-Location header indicates an alternate location for the Description \u00b6 returned data. The principal use is to indicate the URL of a resource transmitted as the result of content negotiation. bareutils . content_location ( headers : Headers , * , default : Optional[bytes] ) -> Optional[bytes] Parameters \u00b6 headers : Headers The headers. default : Optional[bytes] (optional) An optional default value. Defaults to None. Returns \u00b6 Optional[bytes] : The location, or the default. function bareutils . content_range \u00b6 Summary \u00b6 The Content-Range response HTTP header indicates where in a full body Description \u00b6 message a partial message belongs. bareutils . content_range ( headers : Headers , * , default : Optional[Tuple[bytes, Optional[Tuple[int, int]], Optional[int]]] ) -> Optional[Tuple[bytes, Optional[Tuple[int, int]], Optional[int]]] Parameters \u00b6 headers : Headers The headers. default : Optional[Tuple[bytes, Optional[Tuple[int, int]], Optional[int]]] (optional) An optional default value. Defaults to None. Returns \u00b6 Optional[Tuple[bytes, Optional[Tuple[int, int]], Optional[int]]] : The content-range header if found, or the default. function bareutils . content_security_policy \u00b6 Summary \u00b6 The HTTP Content-Security-Policy response header allows web site Description \u00b6 administrators to control resources the user agent is allowed to load for a given page. With a few exceptions, policies mostly involve specifying server origins and script endpoints. This helps guard against cross-site scripting attacks (XSS). bareutils . content_security_policy ( headers : Headers , * , default : Optional[List[Tuple[bytes, List[bytes]]]] ) -> Optional[List[Tuple[bytes, List[bytes]]]] Parameters \u00b6 headers : Headers The headers default : Optional[List[Tuple[bytes, List[bytes]]]] (optional) An optional default. Defaults to None. Returns \u00b6 Optional[List[Tuple[bytes, List[bytes]]]] : The policy or the default. function bareutils . content_security_policy_report_only \u00b6 Summary \u00b6 The HTTP Content-Security-Policy-Report-Only response header allows web Description \u00b6 developers to experiment with policies by monitoring (but not enforcing) their effects. These violation reports consist of JSON documents sent via an HTTP POST request to the specified URI. bareutils . content_security_policy_report_only ( headers : Headers , * , default : Optional[List[Tuple[bytes, List[bytes]]]] ) -> Optional[List[Tuple[bytes, List[bytes]]]] Parameters \u00b6 headers : Headers The headers. default : Optional[List[Tuple[bytes, List[bytes]]]] (optional) An optional default value. Defaults to None. Returns \u00b6 Optional[List[Tuple[bytes, List[bytes]]]] : The policy, or the default. function bareutils . content_type \u00b6 Summary \u00b6 Returns the content type if any otherwise None bareutils . content_type ( headers : Headers , * , default : Optional[Tuple[bytes, Optional[Mapping[bytes, bytes]]]] ) -> Optional[Tuple[bytes, Optional[Mapping[bytes, bytes]]]] Parameters \u00b6 headers : Headers The headers default : Optional[Tuple[bytes, Optional[Mapping[bytes, bytes]]]] (optional) An optional default value. Defaults to None. Returns \u00b6 Optional[Tuple[bytes, Optional[Mapping[bytes, bytes]]]] : A tuple of the media type and a mapping of the parameters or the default if absent. function bareutils . cookie \u00b6 Summary \u00b6 Returns the cookies as a name-value mapping. bareutils . cookie ( headers : Headers ) -> Mapping[bytes, List[bytes]] Parameters \u00b6 headers : Headers The headers. Returns \u00b6 Mapping[bytes, List[bytes]] : The cookies as a name-value mapping. function bareutils . cross_origin_resource_policy \u00b6 Summary \u00b6 The HTTP Cross-Origin-Resource-Policy response header conveys a desire Description \u00b6 that the browser blocks no-cors cross-origin/cross-site requests to the given resource. bareutils . cross_origin_resource_policy ( headers : Headers , * , default : Optional[bytes] ) -> Optional[bytes] Parameters \u00b6 headers : Headers The headers. default : Optional[bytes] (optional) An optional default value. Defaults to None. Returns \u00b6 Optional[bytes] : The policy if present or the default. function bareutils . date \u00b6 Summary \u00b6 The Date general HTTP header contains the date and time at which the Description \u00b6 message was originated. bareutils . date ( headers : Headers , * , default : Optional[datetime] ) -> Optional[datetime] Parameters \u00b6 headers : Headers The headers. default : Optional[datetime] (optional) An optional default value. Defaults to None. Returns \u00b6 Optional[datetime] : The date and time at which the message was originated function bareutils . device_memory \u00b6 Summary \u00b6 The Device-Memory header is a Device Memory API header that works like Description \u00b6 Client Hints header which represents the approximate amount of RAM client device has. bareutils . device_memory ( headers : Headers , * , default : Optional[float] ) -> Optional[float] Parameters \u00b6 headers : Headers The headers default : Optional[float] (optional) An optional default value. Defaults to None. Returns \u00b6 Optional[float] : The device memory function bareutils . dnt \u00b6 Summary \u00b6 The DNT (Do Not Track) request header indicates the user's tracking Description \u00b6 preference. It lets users indicate whether they would prefer privacy rather than personalized content. bareutils . dnt ( headers : Headers , * , default : Optional[int] ) -> Optional[int] Parameters \u00b6 headers : Headers The headers. default : Optional[int] (optional) An optional default value. Defaults to None. Returns \u00b6 Optional[int] : 0 for allow tracking, 1 for deny tracking or the default. function bareutils . dpr \u00b6 Summary \u00b6 The DPR header is a Client Hints headers which represents the client Description \u00b6 device pixel ratio (DPR), which is the the number of physical device pixels corresponding to every CSS pixel. bareutils . dpr ( headers : Headers , * , default : Optional[float] ) -> Optional[float] Parameters \u00b6 headers : Headers The headers. default : Optional[float] (optional) An optional default value. Defaults to None. Returns \u00b6 Optional[float] : The device pixel ratio if present, or the default value. function bareutils . expect \u00b6 Summary \u00b6 Returns the expect header bareutils . expect ( headers : Headers , * , default : Optional[bytes] ) -> Optional[bytes] Parameters \u00b6 headers : Headers The headers. default : Optional[bytes] (optional) An optional default value. Defaults to None. Returns \u00b6 Optional[bytes] : The expect directive if present, or the default value. function bareutils . expires \u00b6 Summary \u00b6 The Expires header contains the date/time after which the response is Description \u00b6 considered stale. bareutils . expires ( headers : Headers , * , default : Optional[datetime] ) -> Optional[datetime] Parameters \u00b6 headers : Headers The headers. default : Optional[datetime] (optional) An optional default value. Defaults to None. Returns \u00b6 Optional[datetime] : The date/time after which the response is considered stale, or the default value. function bareutils . find \u00b6 Summary \u00b6 Find the value of a header, or return a default value. bareutils . find ( name : bytes , headers : Headers , default : Optional[bytes] ) -> Optional[bytes] Parameters \u00b6 name : bytes The header name. headers : Headers The headers to search. default : Optional[bytes] (optional) An optional default value. Defaults to None. Returns \u00b6 Optional[bytes] : The value of the header if found, otherwise the default value. function bareutils . find_all \u00b6 Summary \u00b6 Find all the values for a given header. bareutils . find_all ( name : bytes , headers : Headers ) -> List[bytes] Parameters \u00b6 name : bytes The header name. headers : Headers The headers to search. Returns \u00b6 List[bytes] : A list of the header values which may be empty if there were none found. function bareutils . find_date \u00b6 Summary \u00b6 Find a header containing a date. bareutils . find_date ( name : bytes , headers : Headers , * , default : Optional[datetime] ) -> Optional[datetime] Parameters \u00b6 name : bytes The name of the header. headers : Headers The headers. default : Optional[datetime] (optional) The headers, Defaults to None. Returns \u00b6 Optional[datetime] : The date if found, otherwise the default value. function bareutils . host \u00b6 Summary \u00b6 Returns the host header as a name, port tuple bareutils . host ( headers : Headers , * , default : Optional[Tuple[bytes, Optional[int]]] ) -> Optional[Tuple[bytes, Optional[int]]] Parameters \u00b6 headers : Headers The headers. default : Optional[Tuple[bytes, Optional[int]]] (optional) An optional default value. Defaults to None. Returns \u00b6 Optional[Tuple[bytes, Optional[int]]] : The host as a name, port tuple. function bareutils . if_modified_since \u00b6 Summary \u00b6 The If-Modified-Since request HTTP header makes the request conditional: Description \u00b6 the server will send back the requested resource, with a 200 status, only if it has been last modified after the given date. If the request has not been modified since, the response will be a 304 without any body; the Last-Modified response header of a previous request will contain the date of last modification. Unlike If-Unmodified-Since, If-Modified-Since can only be used with a GET or HEAD. bareutils . if_modified_since ( headers : Headers , * , default : Optional[datetime] ) -> Optional[datetime] Parameters \u00b6 headers : Headers The headers default : Optional[datetime] (optional) [description]. Defaults to None. Returns \u00b6 Optional[datetime] : The timestamp if present, otherwise the default value. function bareutils . index \u00b6 Summary \u00b6 Find the index of the header in the list. bareutils . index ( name : bytes , headers : Headers ) -> int Parameters \u00b6 name : bytes The header name. headers : Headers The headers to search. Returns \u00b6 int : The index of the header or -1 if not found. function bareutils . last_modified \u00b6 Summary \u00b6 The Last-Modified response HTTP header contains the date and time at Description \u00b6 which the origin server believes the resource was last modified. It is used as a validator to determine if a resource received or stored is the same. Less accurate than an ETag header, it is a fallback mechanism. Conditional requests containing If-Modified-Since or If-Unmodified-Since headers make use of this field. bareutils . last_modified ( headers : Headers , * , default : Optional[datetime] ) -> Optional[datetime] Parameters \u00b6 headers : Headers The headers. default : Optional[datetime] (optional) An optional default value. Defaults to None. Returns \u00b6 Optional[datetime] : The timestamp if present, otherwise the default value. function bareutils . location \u00b6 Summary \u00b6 The Location response header indicates the URL to redirect a page to. It Description \u00b6 only provides a meaning when served with a 3xx (redirection) or 201 (created) status response. bareutils . location ( headers : Headers , * , default : Optional[bytes] ) -> Optional[bytes] Parameters \u00b6 headers : Headers The headers. default : Optional[bytes] (optional) An optional default value. Defaults to None. Returns \u00b6 Optional[bytes] : The redirect location function bareutils . origin \u00b6 Summary \u00b6 The Origin request header indicates where a fetch originates from. It Description \u00b6 doesn't include any path information, but only the server name. It is sent with CORS requests, as well as with POST requests. It is similar to the Referer header, but, unlike this header, it doesn't disclose the whole path. bareutils . origin ( headers : Headers , * , default : Optional[bytes] ) -> Optional[bytes] Parameters \u00b6 headers : Headers The headers. default : Optional[bytes] (optional) An optional default value. Defaults to None. Returns \u00b6 Optional[bytes] : The origin if present, otherwise the default value. function bareutils . referer \u00b6 Summary \u00b6 The Referer request header contains the address of the previous web page Description \u00b6 from which a link to the currently requested page was followed. The Referer header allows servers to identify where people are visiting them from and may use that data for analytics, logging, or optimized caching, for example. bareutils . referer ( headers : Headers , * , default : Optional[bytes] ) -> Optional[bytes] Parameters \u00b6 headers : Headers The headers. default : Optional[bytes] (optional) An optional default value. Defaults to None. Returns \u00b6 Optional[bytes] : The referer if present; otherwise the default value. function bareutils . server \u00b6 Summary \u00b6 The Server header contains information about the software used by the Description \u00b6 origin server to handle the request. bareutils . server ( headers : Headers , * , default : Optional[bytes] ) -> Optional[bytes] Parameters \u00b6 headers : Headers The headers. default : Optional[bytes] (optional) An optional default value. Defaults to None. Returns \u00b6 Optional[bytes] : The product directive function bareutils . set_cookie \u00b6 Summary \u00b6 Returns the cookies as a name-value mapping. bareutils . set_cookie ( headers : Headers ) -> Mapping[bytes, List[Mapping[str, Any]]] Parameters \u00b6 headers : Headers The headers. Returns \u00b6 Mapping[bytes, List[Mapping[str, Any]]] : The cookies as a name-value mapping. function bareutils . to_dict \u00b6 Summary \u00b6 Convert a list of headers into a dictionary where the key is the header Description \u00b6 name and the value is a list of the values of the headers for that name bareutils . to_dict ( headers : Headers ) -> MutableMapping[bytes, List[bytes]] Parameters \u00b6 headers : Headers A list of headers. Returns \u00b6 MutableMapping[bytes, List[bytes]] : A dictionary where the key is the header name and the value is a list of the values of the headers for that name function bareutils . upsert \u00b6 Summary \u00b6 If the header exists overwrite the value, otherwise append a new value. bareutils . upsert ( name : bytes , value : bytes , headers : Headers ) -> Any Parameters \u00b6 name : bytes The header name. value : bytes The header value. headers : Headers The headers. Returns \u00b6 Any : function bareutils . vary \u00b6 Summary \u00b6 Returns the vary header value as a list of headers. bareutils . vary ( headers : ListTuple[bytes, bytes]] , * , default : Optional[List[bytes]] ) -> Optional[List[bytes]] Parameters \u00b6 headers : ListTuple[bytes, bytes]] default : Optional[List[bytes]] (optional) An optional default value. Defaults to None. Returns \u00b6 Optional[List[bytes]] : A list of the vary headers if present; otherwise the default value.","title":"bareutils.header"},{"location":"api/bareutils.header/#module-bareutilsheader","text":"","title":"module bareutils.header"},{"location":"api/bareutils.header/#summary","text":"Header utilities","title":"Summary"},{"location":"api/bareutils.header/#description","text":"A collection of functions to extract headers from the ASGI scope.","title":"Description"},{"location":"api/bareutils.header/#function-bareutilsaccept","text":"","title":"function bareutils.accept"},{"location":"api/bareutils.header/#summary_1","text":"Returns the accept header if it exists.","title":"Summary"},{"location":"api/bareutils.header/#description_1","text":"Where quality is not given it defaults to 1.0. >>> accept ([( b 'accept' , b 'text/html, application/xhtml+xml, application/xml;q=0.9, / ;q=0.8' )]) { b 'text/html' : 1.0 , b 'application/xhtml+xml' : 1.0 , b 'application/xml' : 0.9 , b ' / ' : 0.8 } bareutils . accept ( headers : Headers , * , add_wildcard : bool , default : Optional[Mapping[bytes, float]] ) -> Optional[Mapping[bytes, Tuple[bytes, Any]]]","title":"Description"},{"location":"api/bareutils.header/#parameters","text":"headers : Headers The headers add_wildcard : bool (optional) If true add the implicit wildcard '*'. Defaults to False. default : Optional[Mapping[bytes, float]] (optional) An optional default. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns","text":"Optional[Mapping[bytes, Tuple[bytes, Any]]] : A dictionary where the key is media type and the value is quality.","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilsaccept_ch","text":"","title":"function bareutils.accept_ch"},{"location":"api/bareutils.header/#summary_2","text":"The Accept-CH header is set by the server to specify which Client Hints","title":"Summary"},{"location":"api/bareutils.header/#description_2","text":"headers client should include in subsequent requests. bareutils . accept_ch ( headers : Headers , * , default : Optional[Mapping[bytes, float]] ) -> Optional[List[bytes]]","title":"Description"},{"location":"api/bareutils.header/#parameters_1","text":"headers : Headers The headers default : Optional[Mapping[bytes, float]] (optional) An optional default. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_1","text":"Optional[List[bytes]] : The client hints","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilsaccept_ch_lifetime","text":"","title":"function bareutils.accept_ch_lifetime"},{"location":"api/bareutils.header/#summary_3","text":"The Accept-CH-Lifetime header is set by the server to specify the","title":"Summary"},{"location":"api/bareutils.header/#description_3","text":"persistence of Accept-CH header value that specifies for which Client Hints headers client should include in subsequent requests. bareutils . accept_ch_lifetime ( headers : Headers , * , default : Optional[Mapping[bytes, float]] ) -> Optional[int]","title":"Description"},{"location":"api/bareutils.header/#parameters_2","text":"headers : Headers The headers default : Optional[Mapping[bytes, float]] (optional) An optional default. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_2","text":"Optional[int] : The lifetime in seconds","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilsaccept_charset","text":"","title":"function bareutils.accept_charset"},{"location":"api/bareutils.header/#summary_4","text":"Extracts the accept encoding header if it exists into a mapping of the","title":"Summary"},{"location":"api/bareutils.header/#description_4","text":"encoding and the quality value which defaults to 1.0 if missing. bareutils . accept_charset ( headers : Headers , * , add_wildcard : bool , default : Optional[Mapping[bytes, float]] ) -> Optional[Mapping[bytes, float]]","title":"Description"},{"location":"api/bareutils.header/#parameters_3","text":"headers : Headers The headers add_wildcard : bool (optional) If True ensures the '*' charset is included. Defaults to False. default : Optional[Mapping[bytes, float]] (optional) An optional default. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_3","text":"Optional[Mapping[bytes, float]] : A mapping of the encodings and qualities.","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilsaccept_encoding","text":"","title":"function bareutils.accept_encoding"},{"location":"api/bareutils.header/#summary_5","text":"Extracts the accept encoding header if it exists into a mapping of the encoding","title":"Summary"},{"location":"api/bareutils.header/#description_5","text":"and the quality value which defaults to 1.0 if missing. bareutils . accept_encoding ( headers : Headers , * , add_identity : bool , default : Optional[Mapping[bytes, float]] ) -> Optional[Mapping[bytes, float]]","title":"Description"},{"location":"api/bareutils.header/#parameters_4","text":"headers : Headers The headers to search. add_identity : bool (optional) If True ensures the 'identity' encoding is included.. Defaults to False. default : Optional[Mapping[bytes, float]] (optional) An optional default. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_4","text":"Optional[Mapping[bytes, float]] : A mapping of the encodings and qualities.","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilsaccept_language","text":"","title":"function bareutils.accept_language"},{"location":"api/bareutils.header/#summary_6","text":"Extracts the accept language header if it exists into a mapping of the","title":"Summary"},{"location":"api/bareutils.header/#description_6","text":"encoding and the quality value which defaults to 1.0 if missing. bareutils . accept_language ( headers : Headers , * , add_wildcard : bool , default : Optional[Mapping[bytes, float]] ) -> Optional[Mapping[bytes, float]]","title":"Description"},{"location":"api/bareutils.header/#parameters_5","text":"headers : Headers The headers to search. add_wildcard : bool (optional) If True ensures the '*' charset is included. Defaults to False. default : Optional[Mapping[bytes, float]] (optional) [description]. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_5","text":"Optional[Mapping[bytes, float]] : A mapping of the encodings and qualities.","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilsaccept_patch","text":"","title":"function bareutils.accept_patch"},{"location":"api/bareutils.header/#summary_7","text":"The Accept-Patch response HTTP header advertises which media-type the","title":"Summary"},{"location":"api/bareutils.header/#description_7","text":"server is able to understand. bareutils . accept_patch ( headers : Headers , * , default : Optional[List[Tuple[bytes, Optional[bytes]]]] ) -> Optional[List[Tuple[bytes, Optional[bytes]]]]","title":"Description"},{"location":"api/bareutils.header/#parameters_6","text":"headers : Headers The headers to search. default : Optional[List[Tuple[bytes, Optional[bytes]]]] (optional) An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_6","text":"Optional[List[Tuple[bytes, Optional[bytes]]]] : A list of tuples of media type and optional charset.","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilsaccept_ranges","text":"","title":"function bareutils.accept_ranges"},{"location":"api/bareutils.header/#summary_8","text":"Returns the value of the accept ranges header of None if missing bareutils . accept_ranges ( headers : Headers , * , default : Optional[bytes] ) -> Optional[bytes]","title":"Summary"},{"location":"api/bareutils.header/#parameters_7","text":"headers : Headers The headers default : Optional[bytes] (optional) An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_7","text":"Optional[bytes] : The header value (bytes or none)","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilsaccess_control_allow_credentials","text":"","title":"function bareutils.access_control_allow_credentials"},{"location":"api/bareutils.header/#summary_9","text":"Extracts the access control allow credentials header as a bool or None if","title":"Summary"},{"location":"api/bareutils.header/#description_8","text":"missing. bareutils . access_control_allow_credentials ( headers : Headers , * , default : Optional[bool] ) -> Optional[bool]","title":"Description"},{"location":"api/bareutils.header/#parameters_8","text":"headers : Headers The headers. default : Optional[bool] (optional) An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_8","text":"Optional[bool] : A bool or None","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilsaccess_control_allow_headers","text":"","title":"function bareutils.access_control_allow_headers"},{"location":"api/bareutils.header/#summary_10","text":"The Access-Control-Allow-Headers response header is used in response to","title":"Summary"},{"location":"api/bareutils.header/#description_9","text":"a preflight request which includes the Access-Control-Request-Headers to indicate which HTTP headers can be used during the actual request. bareutils . access_control_allow_headers ( headers : Headers , * , default : Optional[List[bytes]] ) -> Optional[List[bytes]]","title":"Description"},{"location":"api/bareutils.header/#parameters_9","text":"headers : Headers The headers. default : Optional[List[bytes]] (optional) An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_9","text":"Optional[List[bytes]] : A list of the allowed headers or '*' for all headers.","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilsaccess_control_allow_methods","text":"","title":"function bareutils.access_control_allow_methods"},{"location":"api/bareutils.header/#summary_11","text":"The Access-Control-Allow-Methods response header specifies the method or","title":"Summary"},{"location":"api/bareutils.header/#description_10","text":"methods allowed when accessing the resource in response to a preflight request. bareutils . access_control_allow_methods ( headers : Headers , * , default : Optional[List[bytes]] ) -> Optional[List[bytes]]","title":"Description"},{"location":"api/bareutils.header/#parameters_10","text":"headers : Headers The headers. default : Optional[List[bytes]] (optional) An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_10","text":"Optional[List[bytes]] : A list of the allowed methods, or '*' for all methods.","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilsaccess_control_allow_origin","text":"","title":"function bareutils.access_control_allow_origin"},{"location":"api/bareutils.header/#summary_12","text":"The Access-Control-Allow-Origin response header indicates whether the","title":"Summary"},{"location":"api/bareutils.header/#description_11","text":"response can be shared with requesting code from the given origin. bareutils . access_control_allow_origin ( headers : Headers , * , default : Optional[List[bytes]] ) -> Optional[bytes]","title":"Description"},{"location":"api/bareutils.header/#parameters_11","text":"headers : Headers The headers. default : Optional[List[bytes]] (optional) An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_11","text":"Optional[bytes] : The origin or '*' for all origins, or 'null'","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilsaccess_control_expose_headers","text":"","title":"function bareutils.access_control_expose_headers"},{"location":"api/bareutils.header/#summary_13","text":"[summary] bareutils . access_control_expose_headers ( headers : Headers , * , add_simple_response_headers : bool , default : Optional[List[bytes]] ) -> Optional[List[bytes]]","title":"Summary"},{"location":"api/bareutils.header/#parameters_12","text":"headers : Headers The headers. add_simple_response_headers : bool (optional) If true add the safelisted headers. Defaults to False. default : Optional[List[bytes]] (optional) An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_12","text":"Optional[List[bytes]] : The headers to expose.","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilsaccess_control_max_age","text":"","title":"function bareutils.access_control_max_age"},{"location":"api/bareutils.header/#summary_14","text":"The Access-Control-Max-Age response header indicates how long the results","title":"Summary"},{"location":"api/bareutils.header/#description_12","text":"of a preflight request (that is the information contained in the Access-Control-Allow-Methods and Access-Control-Allow-Headers headers) can be cached. bareutils . access_control_max_age ( headers : Headers , * , default : Optional[int] ) -> Optional[int]","title":"Description"},{"location":"api/bareutils.header/#parameters_13","text":"headers : Headers The headers default : Optional[int] (optional) An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_13","text":"Optional[int] : The number of seconds","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilsaccess_control_request_headers","text":"","title":"function bareutils.access_control_request_headers"},{"location":"api/bareutils.header/#summary_15","text":"The Access-Control-Request-Headers request header is used by browsers","title":"Summary"},{"location":"api/bareutils.header/#description_13","text":"when issuing a preflight request, to let the server know which HTTP headers the client might send when the actual request is made. bareutils . access_control_request_headers ( headers : Headers , * , default : Optional[List[bytes]] ) -> Optional[List[bytes]]","title":"Description"},{"location":"api/bareutils.header/#parameters_14","text":"headers : Headers The headers default : Optional[List[bytes]] (optional) An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_14","text":"Optional[List[bytes]] : The request headers","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilsaccess_control_request_method","text":"","title":"function bareutils.access_control_request_method"},{"location":"api/bareutils.header/#summary_16","text":"The Access-Control-Request-Method request header is used by browsers when","title":"Summary"},{"location":"api/bareutils.header/#description_14","text":"issuing a preflight request, to let the server know which HTTP method will be used when the actual request is made. This header is necessary as the preflight request is always an OPTIONS and doesn't use the same method as the actual request. bareutils . access_control_request_method ( headers : Headers , * , default : Optional[bytes] ) -> Optional[bytes]","title":"Description"},{"location":"api/bareutils.header/#parameters_15","text":"headers : Headers The headers. default : Optional[bytes] (optional) An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_15","text":"Optional[bytes] : The method","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilsage","text":"","title":"function bareutils.age"},{"location":"api/bareutils.header/#summary_17","text":"The Age header contains the time in seconds the object has been in a","title":"Summary"},{"location":"api/bareutils.header/#description_15","text":"proxy cache. bareutils . age ( headers : Headers , * , default : Optional[int] ) -> Optional[int]","title":"Description"},{"location":"api/bareutils.header/#parameters_16","text":"headers : Headers The headers. default : Optional[int] (optional) An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_16","text":"Optional[int] : The time in seconds.","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilsallow","text":"","title":"function bareutils.allow"},{"location":"api/bareutils.header/#summary_18","text":"The Allow header lists the set of methods supported by a resource. bareutils . allow ( headers : Headers , * , default : Optional[List[bytes]] ) -> Optional[List[bytes]]","title":"Summary"},{"location":"api/bareutils.header/#parameters_17","text":"headers : Headers The headers. default : Optional[List[bytes]] (optional) An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_17","text":"Optional[List[bytes]] : A list of methods","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilsauthorization","text":"","title":"function bareutils.authorization"},{"location":"api/bareutils.header/#summary_19","text":"The HTTP Authorization request header contains the credentials to","title":"Summary"},{"location":"api/bareutils.header/#description_16","text":"authenticate a user agent with a server, usually after the server has responded with a 401 Unauthorized status and the WWW-Authenticate header. bareutils . authorization ( headers : Headers , * , default : Optional[Tuple[bytes, bytes]] ) -> Optional[Tuple[bytes, bytes]]","title":"Description"},{"location":"api/bareutils.header/#parameters_18","text":"headers : Headers The headers. default : Optional[Tuple[bytes, bytes]] (optional) An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_18","text":"Optional[Tuple[bytes, bytes]] : The type and credentials.","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilscache_control","text":"","title":"function bareutils.cache_control"},{"location":"api/bareutils.header/#summary_20","text":"The Cache-Control general-header field is used to specify directives for","title":"Summary"},{"location":"api/bareutils.header/#description_17","text":"caching mechanisms in both requests andresponses. Caching directives are unidirectional, meaning that a given directive in a request is not implying that the same directive is to be given in the response. bareutils . cache_control ( headers : Headers , * , default : Optional[Mapping[bytes, Optional[int]]] ) -> Optional[Mapping[bytes, Optional[int]]]","title":"Description"},{"location":"api/bareutils.header/#parameters_19","text":"headers : Headers The headers. default : Optional[Mapping[bytes, Optional[int]]] (optional) An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_19","text":"Optional[Mapping[bytes, Optional[int]]] : A dictionary of the directives and values.","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilsclear_site_data","text":"","title":"function bareutils.clear_site_data"},{"location":"api/bareutils.header/#summary_21","text":"The Clear-Site-Data header clears browsing data (cookies, storage, cache)","title":"Summary"},{"location":"api/bareutils.header/#description_18","text":"associated with the requesting website. It allows web developers to have more control over the data stored locally by a browser for their origins. bareutils . clear_site_data ( headers : Headers , * , default : Optional[List[bytes]] ) -> Optional[List[bytes]]","title":"Description"},{"location":"api/bareutils.header/#parameters_20","text":"headers : Headers The headers. default : Optional[List[bytes]] (optional) An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_20","text":"Optional[List[bytes]] : A list of the directives.","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilscollect","text":"","title":"function bareutils.collect"},{"location":"api/bareutils.header/#summary_22","text":"Collect all headers into a mapping bareutils . collect ( headers : Headers ) -> Mapping[bytes, Any]","title":"Summary"},{"location":"api/bareutils.header/#parameters_21","text":"headers : Headers The headers","title":"Parameters"},{"location":"api/bareutils.header/#returns_21","text":"Mapping[bytes, Any] : A mapping of the parsed headers","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilsconnection","text":"","title":"function bareutils.connection"},{"location":"api/bareutils.header/#summary_23","text":"The Connection general header controls whether or not the network","title":"Summary"},{"location":"api/bareutils.header/#description_19","text":"connection stays open after the current transaction finishes. If the value sent is keep-alive, the connection is persistent and not closed, allowing for subsequent requests to the same server to be done. bareutils . connection ( headers : Headers , * , default : Optional[bytes] ) -> Optional[bytes]","title":"Description"},{"location":"api/bareutils.header/#parameters_22","text":"headers : Headers The headers. default : Optional[bytes] (optional) An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_22","text":"Optional[bytes] : The value","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilscontent_disposition","text":"","title":"function bareutils.content_disposition"},{"location":"api/bareutils.header/#summary_24","text":"Returns the content type if any otherwise None bareutils . content_disposition ( headers : Headers , * , default : Optional[Tuple[bytes, Optional[Mapping[bytes, bytes]]]] ) -> Optional[Tuple[bytes, Optional[Mapping[bytes, bytes]]]]","title":"Summary"},{"location":"api/bareutils.header/#parameters_23","text":"headers : Headers The headers. default : Optional[Tuple[bytes, Optional[Mapping[bytes, bytes]]]] (optional) An optional default. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_23","text":"Optional[Tuple[bytes, Optional[Mapping[bytes, bytes]]]] : A tuple of the media type and a mapping of the parameters.","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilscontent_encoding","text":"","title":"function bareutils.content_encoding"},{"location":"api/bareutils.header/#summary_25","text":"Returns the content encodings in a list or None if they were not","title":"Summary"},{"location":"api/bareutils.header/#description_20","text":"specified. bareutils . content_encoding ( headers : Headers , * , add_identity : bool , default : Optional[List[bytes]] ) -> Optional[List[bytes]]","title":"Description"},{"location":"api/bareutils.header/#parameters_24","text":"headers : Headers The headers. add_identity : bool (optional) If True ensures the 'identity' encoding is included. Defaults to False. default : Optional[List[bytes]] (optional) An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_24","text":"Optional[List[bytes]] : The list of content encodings.","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilscontent_language","text":"","title":"function bareutils.content_language"},{"location":"api/bareutils.header/#summary_26","text":"The Content-Language entity header is used to describe the language(s)","title":"Summary"},{"location":"api/bareutils.header/#description_21","text":"intended for the audience, so that it allows a user to differentiate according to the users' own preferred language. bareutils . content_language ( headers : Headers , * , default : Optional[List[bytes]] ) -> Optional[List[bytes]]","title":"Description"},{"location":"api/bareutils.header/#parameters_25","text":"headers : Headers The headers. default : Optional[List[bytes]] (optional) An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_25","text":"Optional[List[bytes]] : The language.","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilscontent_length","text":"","title":"function bareutils.content_length"},{"location":"api/bareutils.header/#summary_27","text":"[summary] bareutils . content_length ( headers : Headers , * , default : Optional[int] ) -> Optional[int]","title":"Summary"},{"location":"api/bareutils.header/#parameters_26","text":"headers : Headers The headers. default : Optional[int] (optional) An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_26","text":"Optional[int] : The length as an integer, or the default.","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilscontent_location","text":"","title":"function bareutils.content_location"},{"location":"api/bareutils.header/#summary_28","text":"The Content-Location header indicates an alternate location for the","title":"Summary"},{"location":"api/bareutils.header/#description_22","text":"returned data. The principal use is to indicate the URL of a resource transmitted as the result of content negotiation. bareutils . content_location ( headers : Headers , * , default : Optional[bytes] ) -> Optional[bytes]","title":"Description"},{"location":"api/bareutils.header/#parameters_27","text":"headers : Headers The headers. default : Optional[bytes] (optional) An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_27","text":"Optional[bytes] : The location, or the default.","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilscontent_range","text":"","title":"function bareutils.content_range"},{"location":"api/bareutils.header/#summary_29","text":"The Content-Range response HTTP header indicates where in a full body","title":"Summary"},{"location":"api/bareutils.header/#description_23","text":"message a partial message belongs. bareutils . content_range ( headers : Headers , * , default : Optional[Tuple[bytes, Optional[Tuple[int, int]], Optional[int]]] ) -> Optional[Tuple[bytes, Optional[Tuple[int, int]], Optional[int]]]","title":"Description"},{"location":"api/bareutils.header/#parameters_28","text":"headers : Headers The headers. default : Optional[Tuple[bytes, Optional[Tuple[int, int]], Optional[int]]] (optional) An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_28","text":"Optional[Tuple[bytes, Optional[Tuple[int, int]], Optional[int]]] : The content-range header if found, or the default.","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilscontent_security_policy","text":"","title":"function bareutils.content_security_policy"},{"location":"api/bareutils.header/#summary_30","text":"The HTTP Content-Security-Policy response header allows web site","title":"Summary"},{"location":"api/bareutils.header/#description_24","text":"administrators to control resources the user agent is allowed to load for a given page. With a few exceptions, policies mostly involve specifying server origins and script endpoints. This helps guard against cross-site scripting attacks (XSS). bareutils . content_security_policy ( headers : Headers , * , default : Optional[List[Tuple[bytes, List[bytes]]]] ) -> Optional[List[Tuple[bytes, List[bytes]]]]","title":"Description"},{"location":"api/bareutils.header/#parameters_29","text":"headers : Headers The headers default : Optional[List[Tuple[bytes, List[bytes]]]] (optional) An optional default. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_29","text":"Optional[List[Tuple[bytes, List[bytes]]]] : The policy or the default.","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilscontent_security_policy_report_only","text":"","title":"function bareutils.content_security_policy_report_only"},{"location":"api/bareutils.header/#summary_31","text":"The HTTP Content-Security-Policy-Report-Only response header allows web","title":"Summary"},{"location":"api/bareutils.header/#description_25","text":"developers to experiment with policies by monitoring (but not enforcing) their effects. These violation reports consist of JSON documents sent via an HTTP POST request to the specified URI. bareutils . content_security_policy_report_only ( headers : Headers , * , default : Optional[List[Tuple[bytes, List[bytes]]]] ) -> Optional[List[Tuple[bytes, List[bytes]]]]","title":"Description"},{"location":"api/bareutils.header/#parameters_30","text":"headers : Headers The headers. default : Optional[List[Tuple[bytes, List[bytes]]]] (optional) An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_30","text":"Optional[List[Tuple[bytes, List[bytes]]]] : The policy, or the default.","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilscontent_type","text":"","title":"function bareutils.content_type"},{"location":"api/bareutils.header/#summary_32","text":"Returns the content type if any otherwise None bareutils . content_type ( headers : Headers , * , default : Optional[Tuple[bytes, Optional[Mapping[bytes, bytes]]]] ) -> Optional[Tuple[bytes, Optional[Mapping[bytes, bytes]]]]","title":"Summary"},{"location":"api/bareutils.header/#parameters_31","text":"headers : Headers The headers default : Optional[Tuple[bytes, Optional[Mapping[bytes, bytes]]]] (optional) An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_31","text":"Optional[Tuple[bytes, Optional[Mapping[bytes, bytes]]]] : A tuple of the media type and a mapping of the parameters or the default if absent.","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilscookie","text":"","title":"function bareutils.cookie"},{"location":"api/bareutils.header/#summary_33","text":"Returns the cookies as a name-value mapping. bareutils . cookie ( headers : Headers ) -> Mapping[bytes, List[bytes]]","title":"Summary"},{"location":"api/bareutils.header/#parameters_32","text":"headers : Headers The headers.","title":"Parameters"},{"location":"api/bareutils.header/#returns_32","text":"Mapping[bytes, List[bytes]] : The cookies as a name-value mapping.","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilscross_origin_resource_policy","text":"","title":"function bareutils.cross_origin_resource_policy"},{"location":"api/bareutils.header/#summary_34","text":"The HTTP Cross-Origin-Resource-Policy response header conveys a desire","title":"Summary"},{"location":"api/bareutils.header/#description_26","text":"that the browser blocks no-cors cross-origin/cross-site requests to the given resource. bareutils . cross_origin_resource_policy ( headers : Headers , * , default : Optional[bytes] ) -> Optional[bytes]","title":"Description"},{"location":"api/bareutils.header/#parameters_33","text":"headers : Headers The headers. default : Optional[bytes] (optional) An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_33","text":"Optional[bytes] : The policy if present or the default.","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilsdate","text":"","title":"function bareutils.date"},{"location":"api/bareutils.header/#summary_35","text":"The Date general HTTP header contains the date and time at which the","title":"Summary"},{"location":"api/bareutils.header/#description_27","text":"message was originated. bareutils . date ( headers : Headers , * , default : Optional[datetime] ) -> Optional[datetime]","title":"Description"},{"location":"api/bareutils.header/#parameters_34","text":"headers : Headers The headers. default : Optional[datetime] (optional) An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_34","text":"Optional[datetime] : The date and time at which the message was originated","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilsdevice_memory","text":"","title":"function bareutils.device_memory"},{"location":"api/bareutils.header/#summary_36","text":"The Device-Memory header is a Device Memory API header that works like","title":"Summary"},{"location":"api/bareutils.header/#description_28","text":"Client Hints header which represents the approximate amount of RAM client device has. bareutils . device_memory ( headers : Headers , * , default : Optional[float] ) -> Optional[float]","title":"Description"},{"location":"api/bareutils.header/#parameters_35","text":"headers : Headers The headers default : Optional[float] (optional) An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_35","text":"Optional[float] : The device memory","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilsdnt","text":"","title":"function bareutils.dnt"},{"location":"api/bareutils.header/#summary_37","text":"The DNT (Do Not Track) request header indicates the user's tracking","title":"Summary"},{"location":"api/bareutils.header/#description_29","text":"preference. It lets users indicate whether they would prefer privacy rather than personalized content. bareutils . dnt ( headers : Headers , * , default : Optional[int] ) -> Optional[int]","title":"Description"},{"location":"api/bareutils.header/#parameters_36","text":"headers : Headers The headers. default : Optional[int] (optional) An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_36","text":"Optional[int] : 0 for allow tracking, 1 for deny tracking or the default.","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilsdpr","text":"","title":"function bareutils.dpr"},{"location":"api/bareutils.header/#summary_38","text":"The DPR header is a Client Hints headers which represents the client","title":"Summary"},{"location":"api/bareutils.header/#description_30","text":"device pixel ratio (DPR), which is the the number of physical device pixels corresponding to every CSS pixel. bareutils . dpr ( headers : Headers , * , default : Optional[float] ) -> Optional[float]","title":"Description"},{"location":"api/bareutils.header/#parameters_37","text":"headers : Headers The headers. default : Optional[float] (optional) An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_37","text":"Optional[float] : The device pixel ratio if present, or the default value.","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilsexpect","text":"","title":"function bareutils.expect"},{"location":"api/bareutils.header/#summary_39","text":"Returns the expect header bareutils . expect ( headers : Headers , * , default : Optional[bytes] ) -> Optional[bytes]","title":"Summary"},{"location":"api/bareutils.header/#parameters_38","text":"headers : Headers The headers. default : Optional[bytes] (optional) An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_38","text":"Optional[bytes] : The expect directive if present, or the default value.","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilsexpires","text":"","title":"function bareutils.expires"},{"location":"api/bareutils.header/#summary_40","text":"The Expires header contains the date/time after which the response is","title":"Summary"},{"location":"api/bareutils.header/#description_31","text":"considered stale. bareutils . expires ( headers : Headers , * , default : Optional[datetime] ) -> Optional[datetime]","title":"Description"},{"location":"api/bareutils.header/#parameters_39","text":"headers : Headers The headers. default : Optional[datetime] (optional) An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_39","text":"Optional[datetime] : The date/time after which the response is considered stale, or the default value.","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilsfind","text":"","title":"function bareutils.find"},{"location":"api/bareutils.header/#summary_41","text":"Find the value of a header, or return a default value. bareutils . find ( name : bytes , headers : Headers , default : Optional[bytes] ) -> Optional[bytes]","title":"Summary"},{"location":"api/bareutils.header/#parameters_40","text":"name : bytes The header name. headers : Headers The headers to search. default : Optional[bytes] (optional) An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_40","text":"Optional[bytes] : The value of the header if found, otherwise the default value.","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilsfind_all","text":"","title":"function bareutils.find_all"},{"location":"api/bareutils.header/#summary_42","text":"Find all the values for a given header. bareutils . find_all ( name : bytes , headers : Headers ) -> List[bytes]","title":"Summary"},{"location":"api/bareutils.header/#parameters_41","text":"name : bytes The header name. headers : Headers The headers to search.","title":"Parameters"},{"location":"api/bareutils.header/#returns_41","text":"List[bytes] : A list of the header values which may be empty if there were none found.","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilsfind_date","text":"","title":"function bareutils.find_date"},{"location":"api/bareutils.header/#summary_43","text":"Find a header containing a date. bareutils . find_date ( name : bytes , headers : Headers , * , default : Optional[datetime] ) -> Optional[datetime]","title":"Summary"},{"location":"api/bareutils.header/#parameters_42","text":"name : bytes The name of the header. headers : Headers The headers. default : Optional[datetime] (optional) The headers, Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_42","text":"Optional[datetime] : The date if found, otherwise the default value.","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilshost","text":"","title":"function bareutils.host"},{"location":"api/bareutils.header/#summary_44","text":"Returns the host header as a name, port tuple bareutils . host ( headers : Headers , * , default : Optional[Tuple[bytes, Optional[int]]] ) -> Optional[Tuple[bytes, Optional[int]]]","title":"Summary"},{"location":"api/bareutils.header/#parameters_43","text":"headers : Headers The headers. default : Optional[Tuple[bytes, Optional[int]]] (optional) An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_43","text":"Optional[Tuple[bytes, Optional[int]]] : The host as a name, port tuple.","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilsif_modified_since","text":"","title":"function bareutils.if_modified_since"},{"location":"api/bareutils.header/#summary_45","text":"The If-Modified-Since request HTTP header makes the request conditional:","title":"Summary"},{"location":"api/bareutils.header/#description_32","text":"the server will send back the requested resource, with a 200 status, only if it has been last modified after the given date. If the request has not been modified since, the response will be a 304 without any body; the Last-Modified response header of a previous request will contain the date of last modification. Unlike If-Unmodified-Since, If-Modified-Since can only be used with a GET or HEAD. bareutils . if_modified_since ( headers : Headers , * , default : Optional[datetime] ) -> Optional[datetime]","title":"Description"},{"location":"api/bareutils.header/#parameters_44","text":"headers : Headers The headers default : Optional[datetime] (optional) [description]. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_44","text":"Optional[datetime] : The timestamp if present, otherwise the default value.","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilsindex","text":"","title":"function bareutils.index"},{"location":"api/bareutils.header/#summary_46","text":"Find the index of the header in the list. bareutils . index ( name : bytes , headers : Headers ) -> int","title":"Summary"},{"location":"api/bareutils.header/#parameters_45","text":"name : bytes The header name. headers : Headers The headers to search.","title":"Parameters"},{"location":"api/bareutils.header/#returns_45","text":"int : The index of the header or -1 if not found.","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilslast_modified","text":"","title":"function bareutils.last_modified"},{"location":"api/bareutils.header/#summary_47","text":"The Last-Modified response HTTP header contains the date and time at","title":"Summary"},{"location":"api/bareutils.header/#description_33","text":"which the origin server believes the resource was last modified. It is used as a validator to determine if a resource received or stored is the same. Less accurate than an ETag header, it is a fallback mechanism. Conditional requests containing If-Modified-Since or If-Unmodified-Since headers make use of this field. bareutils . last_modified ( headers : Headers , * , default : Optional[datetime] ) -> Optional[datetime]","title":"Description"},{"location":"api/bareutils.header/#parameters_46","text":"headers : Headers The headers. default : Optional[datetime] (optional) An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_46","text":"Optional[datetime] : The timestamp if present, otherwise the default value.","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilslocation","text":"","title":"function bareutils.location"},{"location":"api/bareutils.header/#summary_48","text":"The Location response header indicates the URL to redirect a page to. It","title":"Summary"},{"location":"api/bareutils.header/#description_34","text":"only provides a meaning when served with a 3xx (redirection) or 201 (created) status response. bareutils . location ( headers : Headers , * , default : Optional[bytes] ) -> Optional[bytes]","title":"Description"},{"location":"api/bareutils.header/#parameters_47","text":"headers : Headers The headers. default : Optional[bytes] (optional) An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_47","text":"Optional[bytes] : The redirect location","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilsorigin","text":"","title":"function bareutils.origin"},{"location":"api/bareutils.header/#summary_49","text":"The Origin request header indicates where a fetch originates from. It","title":"Summary"},{"location":"api/bareutils.header/#description_35","text":"doesn't include any path information, but only the server name. It is sent with CORS requests, as well as with POST requests. It is similar to the Referer header, but, unlike this header, it doesn't disclose the whole path. bareutils . origin ( headers : Headers , * , default : Optional[bytes] ) -> Optional[bytes]","title":"Description"},{"location":"api/bareutils.header/#parameters_48","text":"headers : Headers The headers. default : Optional[bytes] (optional) An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_48","text":"Optional[bytes] : The origin if present, otherwise the default value.","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilsreferer","text":"","title":"function bareutils.referer"},{"location":"api/bareutils.header/#summary_50","text":"The Referer request header contains the address of the previous web page","title":"Summary"},{"location":"api/bareutils.header/#description_36","text":"from which a link to the currently requested page was followed. The Referer header allows servers to identify where people are visiting them from and may use that data for analytics, logging, or optimized caching, for example. bareutils . referer ( headers : Headers , * , default : Optional[bytes] ) -> Optional[bytes]","title":"Description"},{"location":"api/bareutils.header/#parameters_49","text":"headers : Headers The headers. default : Optional[bytes] (optional) An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_49","text":"Optional[bytes] : The referer if present; otherwise the default value.","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilsserver","text":"","title":"function bareutils.server"},{"location":"api/bareutils.header/#summary_51","text":"The Server header contains information about the software used by the","title":"Summary"},{"location":"api/bareutils.header/#description_37","text":"origin server to handle the request. bareutils . server ( headers : Headers , * , default : Optional[bytes] ) -> Optional[bytes]","title":"Description"},{"location":"api/bareutils.header/#parameters_50","text":"headers : Headers The headers. default : Optional[bytes] (optional) An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_50","text":"Optional[bytes] : The product directive","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilsset_cookie","text":"","title":"function bareutils.set_cookie"},{"location":"api/bareutils.header/#summary_52","text":"Returns the cookies as a name-value mapping. bareutils . set_cookie ( headers : Headers ) -> Mapping[bytes, List[Mapping[str, Any]]]","title":"Summary"},{"location":"api/bareutils.header/#parameters_51","text":"headers : Headers The headers.","title":"Parameters"},{"location":"api/bareutils.header/#returns_51","text":"Mapping[bytes, List[Mapping[str, Any]]] : The cookies as a name-value mapping.","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilsto_dict","text":"","title":"function bareutils.to_dict"},{"location":"api/bareutils.header/#summary_53","text":"Convert a list of headers into a dictionary where the key is the header","title":"Summary"},{"location":"api/bareutils.header/#description_38","text":"name and the value is a list of the values of the headers for that name bareutils . to_dict ( headers : Headers ) -> MutableMapping[bytes, List[bytes]]","title":"Description"},{"location":"api/bareutils.header/#parameters_52","text":"headers : Headers A list of headers.","title":"Parameters"},{"location":"api/bareutils.header/#returns_52","text":"MutableMapping[bytes, List[bytes]] : A dictionary where the key is the header name and the value is a list of the values of the headers for that name","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilsupsert","text":"","title":"function bareutils.upsert"},{"location":"api/bareutils.header/#summary_54","text":"If the header exists overwrite the value, otherwise append a new value. bareutils . upsert ( name : bytes , value : bytes , headers : Headers ) -> Any","title":"Summary"},{"location":"api/bareutils.header/#parameters_53","text":"name : bytes The header name. value : bytes The header value. headers : Headers The headers.","title":"Parameters"},{"location":"api/bareutils.header/#returns_53","text":"Any :","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilsvary","text":"","title":"function bareutils.vary"},{"location":"api/bareutils.header/#summary_55","text":"Returns the vary header value as a list of headers. bareutils . vary ( headers : ListTuple[bytes, bytes]] , * , default : Optional[List[bytes]] ) -> Optional[List[bytes]]","title":"Summary"},{"location":"api/bareutils.header/#parameters_54","text":"headers : ListTuple[bytes, bytes]] default : Optional[List[bytes]] (optional) An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_54","text":"Optional[List[bytes]] : A list of the vary headers if present; otherwise the default value.","title":"Returns"},{"location":"api/bareutils.response_code/","text":"module bareutils.response_code \u00b6 Summary \u00b6 Functions and constants for dealing with HTTP response status codes. Attributes \u00b6 CONTINUE : int 100 - This interim response indicates that everything so far is OK and that the client should continue with the request or ignore it if it is already finished. SWITCHING_PROTOCOL : int 101 - This code is sent in response to an Upgrade request header by the client, and indicates the protocol the server is switching to. PROCESSING : int 102 - This code indicates that the server has received and is processing the request, but no response is available yet. EARLY_HINTS : int 103 - This status code is primarily intended to be used with the Link header to allow the user agent to start preloading resources while the server is still preparing a response. OK : int 200 - The request has succeeded. The meaning of a success varies depending on the HTTP method: For GET the resource has been fetched and is transmitted in the message body. For HEAD the entity headers are in the message body. For PUT or POST the resource describing the result of the action is transmitted in the message body. For TRACE the message body contains the request message as received by the server CREATED : int 201 - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests. ACCEPTED : int 202 - The request has been received but not yet acted upon. It is non-committal, meaning that there is no way in HTTP to later send an asynchronous response indicating the outcome of processing the request. It is intended for cases where another process or server handles the request, or for batch processing. NON_AUTHORITATIVE_INFORMATION : int 203 - This response code means returned meta-information set is not exact set as available from the origin server, but collected from a local or a third party copy. Except this condition, 200 OK response should be preferred instead of this response. NO_CONTENT : int 204 - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones. RESET_CONTENT : int 205 - This response code is sent after accomplishing request to tell user agent reset document view which sent this request. PARTIAL_CONTENT : int 206 - This response code is used because of range header sent by the client to separate download into multiple streams. MULTI_STATUS : int 207 - A Multi-Status response conveys information about multiple resources in situations where multiple status codes might be appropriate. MULTI_STATUS_DAV : int 208 - Used inside a DAV: propstat response element to avoid enumerating the internal members of multiple bindings to the same collection repeatedly. IM_USED : int 226 - The server has fulfilled a GET request for the resource, and the response is a representation of the result of one or more instance-manipulations applied to the current instance. MULTIPLE_CHOICE : int 300 - The request has more than one possible response. The user-agent or user should choose one of them. There is no standardized way of choosing one of the responses. MOVED_PERMANENTLY : int 301 - This response code means that the URI of the requested resource has been changed permanently. Probably, the new URI would be given in the response. FOUND : int 302 - This response code means that the URI of requested resource has been changed temporarily. New changes in the URI might be made in the future. Therefore, this same URI should be used by the client in future requests. SEE_OTHER : int 303 - The server sent this response to direct the client to get the requested resource at another URI with a GET request. NOT_MODIFIED : int 304 - This is used for caching purposes. It tells the client that the response has not been modified, so the client can continue to use the same cached version of the response. USE_PROXY : int 305 - Was defined in a previous version of the HTTP specification to indicate that a requested response must be accessed by a proxy. It has been deprecated due to security concerns regarding in-band configuration of a proxy. UNUSED : int 306 - This response code is no longer used, it is just reserved currently. It was used in a previous version of the HTTP 1.1 specification. TEMPORARY_REDIRECT : int 307 - The server sends this response to direct the client to get the requested resource at another URI with same method that was used in the prior request. This has the same semantics as the 302 Found HTTP response code, with the exception that the user agent must not change the HTTP method used: If a POST was used in the first request, a POST must be used in the second request. PERMANENT_REDIRECT : int 308 - This means that the resource is now permanently located at another URI, specified by the Location: HTTP Response header. This has the same semantics as the 301 Moved Permanently HTTP response code, with the exception that the user agent must not change the HTTP method used: If a POST was used in the first request, a POST must be used in the second request. BAD_REQUEST : int 400 - This response means that server could not understand the request due to invalid syntax. UNAUTHORIZED : int 401 - Although the HTTP standard specifies \"unauthorized\", semantically this response means \"unauthenticated\". That is, the client must authenticate itself to get the requested response. PAYMENT_REQUIRED : int 402 - This response code is reserved for future use. Initial aim for creating this code was using it for digital payment systems however this is not used currently. FORBIDDEN : int 403 - The client does not have access rights to the content, i.e. they are unauthorized, so server is rejecting to give proper response. Unlike 401, the client's identity is known to the server. NOT_FOUND : int 404 - The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurrence on the web. METHOD_NOT_ALLOWED : int 405 - The request method is known by the server but has been disabled and cannot be used. For example, an API may forbid DELETE-ing a resource. The two mandatory methods, GET and HEAD, must never be disabled and should not return this error code. NOT_ACCEPTABLE : int 406 - This response is sent when the web server, after performing server-driven content negotiation, doesn't find any content following the criteria given by the user agent. PROXY_AUTHENTICATION_REQUIRED : int 407 - This is similar to 401 but authentication is needed to be done by a proxy. REQUEST_TIMEOUT : int 408 - This response is sent on an idle connection by some servers, even without any previous request by the client. It means that the server would like to shut down this unused connection. This response is used much more since some browsers, like Chrome, Firefox 27+, or IE9, use HTTP pre-connection mechanisms to speed up surfing. Also note that some servers merely shut down the connection without sending this message. CONFLICT : int 409 - This response is sent when a request conflicts with the current state of the server. GONE : int 410 - This response would be sent when the requested content has been permanently deleted from server, with no forwarding address. Clients are expected to remove their caches and links to the resource. The HTTP specification intends this status code to be used for \"limited-time, promotional services\". APIs should not feel compelled to indicate resources that have been deleted with this status code. LENGTH_REQUIRED : int 411 - Server rejected the request because the content-length header field is not defined and the server requires it. PRECONDITION_FAILED : int 412 - The client has indicated preconditions in its headers which the server does not meet. PAYLOAD_TOO_LARGE : int 413 - Request entity is larger than limits defined by server; the server might close the connection or return an retry-after header field. URI_TOO_LONG : int 414 - The URI requested by the client is longer than the server is willing to interpret. UNSUPPORTED_MEDIA_TYPE : int 415 - The media format of the requested data is not supported by the server, so the server is rejecting the request. REQUESTED_RANGE_NOT_SATISFIABLE : int 416 - The range specified by the Range header field in the request can't be fulfilled; it's possible that the range is outside the size of the target URI's data. EXPECTATION_FAILED : int 417 - This response code means the expectation indicated by the Expect request header field can't be met by the server. IM_A_TEAPOT : int 418 - The server refuses the attempt to brew coffee with a teapot. MISDIRECTED_REQUEST : int 421 - The request was directed at a server that is not able to produce a response. This can be sent by a server that is not configured to produce responses for the combination of scheme and authority that are included in the request URI. UNPROCESSABLE_ENTITY : int 422 - The request was well-formed but was unable to be followed due to semantic errors. LOCKED : int 423 - The resource that is being accessed is locked. FAILED_DEPENDENCY : int 424 - The request failed due to failure of a previous request. TOO_EARLY : int 425 - Indicates that the server is unwilling to risk processing a request that might be replayed. UPGRADE_REQUIRED : int 426 - The server refuses to perform the request using the current protocol but might be willing to do so after the client upgrades to a different protocol. The server sends an Upgrade header in a 426 response to indicate the required protocol(s). PRECONDITION_REQUIRED : int 428 - The origin server requires the request to be conditional. Intended to prevent the 'lost update' problem, where a client GETs a resource's state, modifies it, and PUTs it back to the server, when meanwhile a third party has modified the state on the server, leading to a conflict. TOO_MANY_REQUESTS : int 429 - The user has sent too many requests in a given amount of time (\"rate limiting\"). REQUEST_HEADER_FIELDS_TOO_LARGE : int 431 - The server is unwilling to process the request because its header fields are too large. The request MAY be resubmitted after reducing the size of the request header fields. UNAVAILABLE_FOR_LEGAL_REASONS : int 451 - The user requests an illegal resource, such as a web page censored by a government. INTERNAL_SERVER_ERROR : int 500 - The server has encountered a situation it doesn't know how to handle. NOT_IMPLEMENTED : int 501 - The request method is not supported by the server and cannot be handled. The only methods that servers are required to support (and therefore that must not return this code) are GET and HEAD. BAD_GATEWAY : int 502 - This error response means that the server, while working as a gateway to get a response needed to handle the request, got an invalid response. SERVICE_UNAVAILABLE : int 503 - The server is not ready to handle the request. Common causes are a server that is down for maintenance or that is overloaded. Note that together with this response, a user-friendly page explaining the problem should be sent. This responses should be used for temporary conditions and the Retry-After: HTTP header should, if possible, contain the estimated time before the recovery of the service. The webmaster must also take care about the caching-related headers that are sent along with this response, as these temporary condition responses should usually not be cached. GATEWAY_TIMEOUT : int 504 - This error response is given when the server is acting as a gateway and cannot get a response in time. HTTP_VERSION_NOT_SUPPORTED : int 505 - The HTTP version used in the request is not supported by the server. VARIANT_ALSO_NEGOTIATES : int 506 - The server has an internal configuration error: transparent content negotiation for the request results in a circular reference. INSUFFICIENT_STORAGE : int 507 - The server has an internal configuration error: the chosen variant resource is configured to engage in transparent content negotiation itself, and is therefore not a proper end point in the negotiation process. LOOP_DETECTED : int 508 - The server detected an infinite loop while processing the request. NOT_EXTENDED : int 510 - Further extensions to the request are required for the server to fulfill it. NETWORK_AUTHENTICATION_IS_REQUIRED : 9int 511 - The 511 status code indicates that the client needs to authenticate to gain network access. function bareutils . is_client_error \u00b6 Summary \u00b6 Return true if the code is a client error HTTP response code. bareutils . is_client_error ( code : int ) -> bool Parameters \u00b6 code : int The HTTP response code. Returns \u00b6 bool : True if the code was a client error else false. function bareutils . is_information \u00b6 Summary \u00b6 Return true if the code is an information HTTP response code. bareutils . is_information ( code : int ) -> bool Parameters \u00b6 code : int The HTTP response code. Returns \u00b6 bool : True if the code was informational else false. function bareutils . is_redirection \u00b6 Summary \u00b6 Return true if the code is aa redirection HTTP response code. bareutils . is_redirection ( code : int ) -> bool Parameters \u00b6 code : int The HTTP response code. Returns \u00b6 bool : True if the code was a redirection else false. function bareutils . is_server_error \u00b6 Summary \u00b6 Return true if the code is a server error HTTP response code. bareutils . is_server_error ( code : int ) -> bool Parameters \u00b6 code : int The HTTP response code. Returns \u00b6 bool : True if the code was a server error else false. function bareutils . is_successful \u00b6 Summary \u00b6 Return true if the code is a successful HTTP response code. bareutils . is_successful ( code : int ) -> bool Parameters \u00b6 code : int The HTTP response code. Returns \u00b6 bool : True if the code was successful else false.","title":"bareutils.response_code"},{"location":"api/bareutils.response_code/#module-bareutilsresponse_code","text":"","title":"module bareutils.response_code"},{"location":"api/bareutils.response_code/#summary","text":"Functions and constants for dealing with HTTP response status codes.","title":"Summary"},{"location":"api/bareutils.response_code/#attributes","text":"CONTINUE : int 100 - This interim response indicates that everything so far is OK and that the client should continue with the request or ignore it if it is already finished. SWITCHING_PROTOCOL : int 101 - This code is sent in response to an Upgrade request header by the client, and indicates the protocol the server is switching to. PROCESSING : int 102 - This code indicates that the server has received and is processing the request, but no response is available yet. EARLY_HINTS : int 103 - This status code is primarily intended to be used with the Link header to allow the user agent to start preloading resources while the server is still preparing a response. OK : int 200 - The request has succeeded. The meaning of a success varies depending on the HTTP method: For GET the resource has been fetched and is transmitted in the message body. For HEAD the entity headers are in the message body. For PUT or POST the resource describing the result of the action is transmitted in the message body. For TRACE the message body contains the request message as received by the server CREATED : int 201 - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests. ACCEPTED : int 202 - The request has been received but not yet acted upon. It is non-committal, meaning that there is no way in HTTP to later send an asynchronous response indicating the outcome of processing the request. It is intended for cases where another process or server handles the request, or for batch processing. NON_AUTHORITATIVE_INFORMATION : int 203 - This response code means returned meta-information set is not exact set as available from the origin server, but collected from a local or a third party copy. Except this condition, 200 OK response should be preferred instead of this response. NO_CONTENT : int 204 - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones. RESET_CONTENT : int 205 - This response code is sent after accomplishing request to tell user agent reset document view which sent this request. PARTIAL_CONTENT : int 206 - This response code is used because of range header sent by the client to separate download into multiple streams. MULTI_STATUS : int 207 - A Multi-Status response conveys information about multiple resources in situations where multiple status codes might be appropriate. MULTI_STATUS_DAV : int 208 - Used inside a DAV: propstat response element to avoid enumerating the internal members of multiple bindings to the same collection repeatedly. IM_USED : int 226 - The server has fulfilled a GET request for the resource, and the response is a representation of the result of one or more instance-manipulations applied to the current instance. MULTIPLE_CHOICE : int 300 - The request has more than one possible response. The user-agent or user should choose one of them. There is no standardized way of choosing one of the responses. MOVED_PERMANENTLY : int 301 - This response code means that the URI of the requested resource has been changed permanently. Probably, the new URI would be given in the response. FOUND : int 302 - This response code means that the URI of requested resource has been changed temporarily. New changes in the URI might be made in the future. Therefore, this same URI should be used by the client in future requests. SEE_OTHER : int 303 - The server sent this response to direct the client to get the requested resource at another URI with a GET request. NOT_MODIFIED : int 304 - This is used for caching purposes. It tells the client that the response has not been modified, so the client can continue to use the same cached version of the response. USE_PROXY : int 305 - Was defined in a previous version of the HTTP specification to indicate that a requested response must be accessed by a proxy. It has been deprecated due to security concerns regarding in-band configuration of a proxy. UNUSED : int 306 - This response code is no longer used, it is just reserved currently. It was used in a previous version of the HTTP 1.1 specification. TEMPORARY_REDIRECT : int 307 - The server sends this response to direct the client to get the requested resource at another URI with same method that was used in the prior request. This has the same semantics as the 302 Found HTTP response code, with the exception that the user agent must not change the HTTP method used: If a POST was used in the first request, a POST must be used in the second request. PERMANENT_REDIRECT : int 308 - This means that the resource is now permanently located at another URI, specified by the Location: HTTP Response header. This has the same semantics as the 301 Moved Permanently HTTP response code, with the exception that the user agent must not change the HTTP method used: If a POST was used in the first request, a POST must be used in the second request. BAD_REQUEST : int 400 - This response means that server could not understand the request due to invalid syntax. UNAUTHORIZED : int 401 - Although the HTTP standard specifies \"unauthorized\", semantically this response means \"unauthenticated\". That is, the client must authenticate itself to get the requested response. PAYMENT_REQUIRED : int 402 - This response code is reserved for future use. Initial aim for creating this code was using it for digital payment systems however this is not used currently. FORBIDDEN : int 403 - The client does not have access rights to the content, i.e. they are unauthorized, so server is rejecting to give proper response. Unlike 401, the client's identity is known to the server. NOT_FOUND : int 404 - The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurrence on the web. METHOD_NOT_ALLOWED : int 405 - The request method is known by the server but has been disabled and cannot be used. For example, an API may forbid DELETE-ing a resource. The two mandatory methods, GET and HEAD, must never be disabled and should not return this error code. NOT_ACCEPTABLE : int 406 - This response is sent when the web server, after performing server-driven content negotiation, doesn't find any content following the criteria given by the user agent. PROXY_AUTHENTICATION_REQUIRED : int 407 - This is similar to 401 but authentication is needed to be done by a proxy. REQUEST_TIMEOUT : int 408 - This response is sent on an idle connection by some servers, even without any previous request by the client. It means that the server would like to shut down this unused connection. This response is used much more since some browsers, like Chrome, Firefox 27+, or IE9, use HTTP pre-connection mechanisms to speed up surfing. Also note that some servers merely shut down the connection without sending this message. CONFLICT : int 409 - This response is sent when a request conflicts with the current state of the server. GONE : int 410 - This response would be sent when the requested content has been permanently deleted from server, with no forwarding address. Clients are expected to remove their caches and links to the resource. The HTTP specification intends this status code to be used for \"limited-time, promotional services\". APIs should not feel compelled to indicate resources that have been deleted with this status code. LENGTH_REQUIRED : int 411 - Server rejected the request because the content-length header field is not defined and the server requires it. PRECONDITION_FAILED : int 412 - The client has indicated preconditions in its headers which the server does not meet. PAYLOAD_TOO_LARGE : int 413 - Request entity is larger than limits defined by server; the server might close the connection or return an retry-after header field. URI_TOO_LONG : int 414 - The URI requested by the client is longer than the server is willing to interpret. UNSUPPORTED_MEDIA_TYPE : int 415 - The media format of the requested data is not supported by the server, so the server is rejecting the request. REQUESTED_RANGE_NOT_SATISFIABLE : int 416 - The range specified by the Range header field in the request can't be fulfilled; it's possible that the range is outside the size of the target URI's data. EXPECTATION_FAILED : int 417 - This response code means the expectation indicated by the Expect request header field can't be met by the server. IM_A_TEAPOT : int 418 - The server refuses the attempt to brew coffee with a teapot. MISDIRECTED_REQUEST : int 421 - The request was directed at a server that is not able to produce a response. This can be sent by a server that is not configured to produce responses for the combination of scheme and authority that are included in the request URI. UNPROCESSABLE_ENTITY : int 422 - The request was well-formed but was unable to be followed due to semantic errors. LOCKED : int 423 - The resource that is being accessed is locked. FAILED_DEPENDENCY : int 424 - The request failed due to failure of a previous request. TOO_EARLY : int 425 - Indicates that the server is unwilling to risk processing a request that might be replayed. UPGRADE_REQUIRED : int 426 - The server refuses to perform the request using the current protocol but might be willing to do so after the client upgrades to a different protocol. The server sends an Upgrade header in a 426 response to indicate the required protocol(s). PRECONDITION_REQUIRED : int 428 - The origin server requires the request to be conditional. Intended to prevent the 'lost update' problem, where a client GETs a resource's state, modifies it, and PUTs it back to the server, when meanwhile a third party has modified the state on the server, leading to a conflict. TOO_MANY_REQUESTS : int 429 - The user has sent too many requests in a given amount of time (\"rate limiting\"). REQUEST_HEADER_FIELDS_TOO_LARGE : int 431 - The server is unwilling to process the request because its header fields are too large. The request MAY be resubmitted after reducing the size of the request header fields. UNAVAILABLE_FOR_LEGAL_REASONS : int 451 - The user requests an illegal resource, such as a web page censored by a government. INTERNAL_SERVER_ERROR : int 500 - The server has encountered a situation it doesn't know how to handle. NOT_IMPLEMENTED : int 501 - The request method is not supported by the server and cannot be handled. The only methods that servers are required to support (and therefore that must not return this code) are GET and HEAD. BAD_GATEWAY : int 502 - This error response means that the server, while working as a gateway to get a response needed to handle the request, got an invalid response. SERVICE_UNAVAILABLE : int 503 - The server is not ready to handle the request. Common causes are a server that is down for maintenance or that is overloaded. Note that together with this response, a user-friendly page explaining the problem should be sent. This responses should be used for temporary conditions and the Retry-After: HTTP header should, if possible, contain the estimated time before the recovery of the service. The webmaster must also take care about the caching-related headers that are sent along with this response, as these temporary condition responses should usually not be cached. GATEWAY_TIMEOUT : int 504 - This error response is given when the server is acting as a gateway and cannot get a response in time. HTTP_VERSION_NOT_SUPPORTED : int 505 - The HTTP version used in the request is not supported by the server. VARIANT_ALSO_NEGOTIATES : int 506 - The server has an internal configuration error: transparent content negotiation for the request results in a circular reference. INSUFFICIENT_STORAGE : int 507 - The server has an internal configuration error: the chosen variant resource is configured to engage in transparent content negotiation itself, and is therefore not a proper end point in the negotiation process. LOOP_DETECTED : int 508 - The server detected an infinite loop while processing the request. NOT_EXTENDED : int 510 - Further extensions to the request are required for the server to fulfill it. NETWORK_AUTHENTICATION_IS_REQUIRED : 9int 511 - The 511 status code indicates that the client needs to authenticate to gain network access.","title":"Attributes"},{"location":"api/bareutils.response_code/#function-bareutilsis_client_error","text":"","title":"function bareutils.is_client_error"},{"location":"api/bareutils.response_code/#summary_1","text":"Return true if the code is a client error HTTP response code. bareutils . is_client_error ( code : int ) -> bool","title":"Summary"},{"location":"api/bareutils.response_code/#parameters","text":"code : int The HTTP response code.","title":"Parameters"},{"location":"api/bareutils.response_code/#returns","text":"bool : True if the code was a client error else false.","title":"Returns"},{"location":"api/bareutils.response_code/#function-bareutilsis_information","text":"","title":"function bareutils.is_information"},{"location":"api/bareutils.response_code/#summary_2","text":"Return true if the code is an information HTTP response code. bareutils . is_information ( code : int ) -> bool","title":"Summary"},{"location":"api/bareutils.response_code/#parameters_1","text":"code : int The HTTP response code.","title":"Parameters"},{"location":"api/bareutils.response_code/#returns_1","text":"bool : True if the code was informational else false.","title":"Returns"},{"location":"api/bareutils.response_code/#function-bareutilsis_redirection","text":"","title":"function bareutils.is_redirection"},{"location":"api/bareutils.response_code/#summary_3","text":"Return true if the code is aa redirection HTTP response code. bareutils . is_redirection ( code : int ) -> bool","title":"Summary"},{"location":"api/bareutils.response_code/#parameters_2","text":"code : int The HTTP response code.","title":"Parameters"},{"location":"api/bareutils.response_code/#returns_2","text":"bool : True if the code was a redirection else false.","title":"Returns"},{"location":"api/bareutils.response_code/#function-bareutilsis_server_error","text":"","title":"function bareutils.is_server_error"},{"location":"api/bareutils.response_code/#summary_4","text":"Return true if the code is a server error HTTP response code. bareutils . is_server_error ( code : int ) -> bool","title":"Summary"},{"location":"api/bareutils.response_code/#parameters_3","text":"code : int The HTTP response code.","title":"Parameters"},{"location":"api/bareutils.response_code/#returns_3","text":"bool : True if the code was a server error else false.","title":"Returns"},{"location":"api/bareutils.response_code/#function-bareutilsis_successful","text":"","title":"function bareutils.is_successful"},{"location":"api/bareutils.response_code/#summary_5","text":"Return true if the code is a successful HTTP response code. bareutils . is_successful ( code : int ) -> bool","title":"Summary"},{"location":"api/bareutils.response_code/#parameters_4","text":"code : int The HTTP response code.","title":"Parameters"},{"location":"api/bareutils.response_code/#returns_4","text":"bool : True if the code was successful else false.","title":"Returns"},{"location":"api/bareutils.responses/","text":"module bareutils.responses \u00b6 Summary \u00b6 Responses function bareutils . bytes_response \u00b6 Summary \u00b6 A helper function to create a bytes response. bareutils . bytes_response ( status : int , headers : Optional[Headers] , buf : bytes , content_type : bytes , chunk_size : int , pushes : Optional[PushResponses] ) -> HttpResponse Parameters \u00b6 status : int The HTTP status code. headers : Optional[Headers] The HTTP headers. buf : bytes The data to send. content_type : bytes (optional) The content type of the data. Defaults to b'application/octet-stream'. chunk_size : int (optional) The size of each chunk to send or -1 to send as a single chunk. Defaults to -1. pushes : Optional[PushResponses] (optional) Optional posh responses for HTTP/2. Defaults to None. Returns \u00b6 HttpResponse : The HTTP response. function bareutils . json_response \u00b6 Summary \u00b6 A helper function to send a json response. bareutils . json_response ( status : int , headers : Optional[Headers] , obj : Any , content_type : bytes , dumps : Callable[[Any], str] , chunk_size : int , pushes : Optional[PushResponses] ) -> HttpResponse Parameters \u00b6 status : int The HTTP status code. headers : Optional[Headers] The HTTP headers. obj : Any The object to send as JSON. content_type : bytes (optional) The content type. Defaults to b'application/json'. dumps : Callable[[Any], str] (optional) The function to use to turn the object into JSON. Defaults to json.dumps. chunk_size : int (optional) The size of each chunk to send or -1 to send as a single chunk. Defaults to -1. pushes : Optional[PushResponses] (optional) Optional posh responses for HTTP/2. Defaults to None. Returns \u00b6 HttpResponse : The HTTP response. function bareutils . text_response \u00b6 Summary \u00b6 A helper function to create a text response. bareutils . text_response ( status : int , headers : Optional[Headers] , text : str , encoding : str , content_type : bytes , chunk_size : int , pushes : Optional[PushResponses] ) -> HttpResponse Parameters \u00b6 status : int The HTTP status code. headers : Optional[Headers] The HTTP headers. text : str The text to send. encoding : str (optional) [description]. Defaults to 'utf-8'. content_type : bytes (optional) The content type. Defaults to b'text/plain'. chunk_size : int (optional) The size of each chunk to send or -1 to send as a single chunk. Defaults to -1. pushes : Optional[PushResponses] (optional) Optional posh responses for HTTP/2. Defaults to None. Returns \u00b6 HttpResponse : The HTTP response.","title":"bareutils.responses"},{"location":"api/bareutils.responses/#module-bareutilsresponses","text":"","title":"module bareutils.responses"},{"location":"api/bareutils.responses/#summary","text":"Responses","title":"Summary"},{"location":"api/bareutils.responses/#function-bareutilsbytes_response","text":"","title":"function bareutils.bytes_response"},{"location":"api/bareutils.responses/#summary_1","text":"A helper function to create a bytes response. bareutils . bytes_response ( status : int , headers : Optional[Headers] , buf : bytes , content_type : bytes , chunk_size : int , pushes : Optional[PushResponses] ) -> HttpResponse","title":"Summary"},{"location":"api/bareutils.responses/#parameters","text":"status : int The HTTP status code. headers : Optional[Headers] The HTTP headers. buf : bytes The data to send. content_type : bytes (optional) The content type of the data. Defaults to b'application/octet-stream'. chunk_size : int (optional) The size of each chunk to send or -1 to send as a single chunk. Defaults to -1. pushes : Optional[PushResponses] (optional) Optional posh responses for HTTP/2. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.responses/#returns","text":"HttpResponse : The HTTP response.","title":"Returns"},{"location":"api/bareutils.responses/#function-bareutilsjson_response","text":"","title":"function bareutils.json_response"},{"location":"api/bareutils.responses/#summary_2","text":"A helper function to send a json response. bareutils . json_response ( status : int , headers : Optional[Headers] , obj : Any , content_type : bytes , dumps : Callable[[Any], str] , chunk_size : int , pushes : Optional[PushResponses] ) -> HttpResponse","title":"Summary"},{"location":"api/bareutils.responses/#parameters_1","text":"status : int The HTTP status code. headers : Optional[Headers] The HTTP headers. obj : Any The object to send as JSON. content_type : bytes (optional) The content type. Defaults to b'application/json'. dumps : Callable[[Any], str] (optional) The function to use to turn the object into JSON. Defaults to json.dumps. chunk_size : int (optional) The size of each chunk to send or -1 to send as a single chunk. Defaults to -1. pushes : Optional[PushResponses] (optional) Optional posh responses for HTTP/2. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.responses/#returns_1","text":"HttpResponse : The HTTP response.","title":"Returns"},{"location":"api/bareutils.responses/#function-bareutilstext_response","text":"","title":"function bareutils.text_response"},{"location":"api/bareutils.responses/#summary_3","text":"A helper function to create a text response. bareutils . text_response ( status : int , headers : Optional[Headers] , text : str , encoding : str , content_type : bytes , chunk_size : int , pushes : Optional[PushResponses] ) -> HttpResponse","title":"Summary"},{"location":"api/bareutils.responses/#parameters_2","text":"status : int The HTTP status code. headers : Optional[Headers] The HTTP headers. text : str The text to send. encoding : str (optional) [description]. Defaults to 'utf-8'. content_type : bytes (optional) The content type. Defaults to b'text/plain'. chunk_size : int (optional) The size of each chunk to send or -1 to send as a single chunk. Defaults to -1. pushes : Optional[PushResponses] (optional) Optional posh responses for HTTP/2. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.responses/#returns_2","text":"HttpResponse : The HTTP response.","title":"Returns"},{"location":"api/bareutils.streaming/","text":"module bareutils.streaming \u00b6 Summary \u00b6 Streaming async function bareutils . bytes_reader \u00b6 Summary \u00b6 Extracts the body content as bytes. async bareutils . bytes_reader ( content : Content ) -> bytes Parameters \u00b6 content : Content The content argument of the request handler. Returns \u00b6 bytes : The body as bytes. async generator function bareutils . bytes_writer \u00b6 Summary \u00b6 Creates an asynchronous iterator from the supplied response body. async bareutils . bytes_writer ( buf : bytes , chunk_size : int ) -> Content Parameters \u00b6 buf : bytes The response body to return. chunk_size : int (optional) The size of each chunk to send or -1 to send as a single chunk.. Defaults to -1. Yields \u00b6 Content : The body bytes async function bareutils . text_reader \u00b6 Summary \u00b6 Extracts the body contents as text. async bareutils . text_reader ( content : Content , encoding : str ) -> str Parameters \u00b6 content : Content The content argument of the request handler. encoding : str (optional) The encoding of the text. Defaults to 'utf-8'. Returns \u00b6 str : The body contents as a string. async generator function bareutils . text_writer \u00b6 Summary \u00b6 Creates an asynchronous iterator from the supplied response body. async bareutils . text_writer ( text : str , encoding : str , chunk_size : int ) -> Content Parameters \u00b6 text : str The response body. encoding : str (optional) The encoding to apply when transforming the text into bytes. Defaults to 'utf-8'. chunk_size : int (optional) The size of each chunk to send or -1 to send as a single chunk.. Defaults to -1. Yields \u00b6 Content : The body bytes","title":"bareutils.streaming"},{"location":"api/bareutils.streaming/#module-bareutilsstreaming","text":"","title":"module bareutils.streaming"},{"location":"api/bareutils.streaming/#summary","text":"Streaming","title":"Summary"},{"location":"api/bareutils.streaming/#async-function-bareutilsbytes_reader","text":"","title":"async function bareutils.bytes_reader"},{"location":"api/bareutils.streaming/#summary_1","text":"Extracts the body content as bytes. async bareutils . bytes_reader ( content : Content ) -> bytes","title":"Summary"},{"location":"api/bareutils.streaming/#parameters","text":"content : Content The content argument of the request handler.","title":"Parameters"},{"location":"api/bareutils.streaming/#returns","text":"bytes : The body as bytes.","title":"Returns"},{"location":"api/bareutils.streaming/#async-generator-function-bareutilsbytes_writer","text":"","title":"async generator function bareutils.bytes_writer"},{"location":"api/bareutils.streaming/#summary_2","text":"Creates an asynchronous iterator from the supplied response body. async bareutils . bytes_writer ( buf : bytes , chunk_size : int ) -> Content","title":"Summary"},{"location":"api/bareutils.streaming/#parameters_1","text":"buf : bytes The response body to return. chunk_size : int (optional) The size of each chunk to send or -1 to send as a single chunk.. Defaults to -1.","title":"Parameters"},{"location":"api/bareutils.streaming/#yields","text":"Content : The body bytes","title":"Yields"},{"location":"api/bareutils.streaming/#async-function-bareutilstext_reader","text":"","title":"async function bareutils.text_reader"},{"location":"api/bareutils.streaming/#summary_3","text":"Extracts the body contents as text. async bareutils . text_reader ( content : Content , encoding : str ) -> str","title":"Summary"},{"location":"api/bareutils.streaming/#parameters_2","text":"content : Content The content argument of the request handler. encoding : str (optional) The encoding of the text. Defaults to 'utf-8'.","title":"Parameters"},{"location":"api/bareutils.streaming/#returns_1","text":"str : The body contents as a string.","title":"Returns"},{"location":"api/bareutils.streaming/#async-generator-function-bareutilstext_writer","text":"","title":"async generator function bareutils.text_writer"},{"location":"api/bareutils.streaming/#summary_4","text":"Creates an asynchronous iterator from the supplied response body. async bareutils . text_writer ( text : str , encoding : str , chunk_size : int ) -> Content","title":"Summary"},{"location":"api/bareutils.streaming/#parameters_3","text":"text : str The response body. encoding : str (optional) The encoding to apply when transforming the text into bytes. Defaults to 'utf-8'. chunk_size : int (optional) The size of each chunk to send or -1 to send as a single chunk.. Defaults to -1.","title":"Parameters"},{"location":"api/bareutils.streaming/#yields_1","text":"Content : The body bytes","title":"Yields"},{"location":"api/bareutils.unpacking/","text":"module bareutils.unpacking \u00b6 Summary \u00b6 Unpackers async function bareutils . unpack_multipart_form_data \u00b6 Summary \u00b6 Unpack multipart form data async bareutils . unpack_multipart_form_data ( content_type : bytes , content : Content ) -> List[Tuple[MessageParams, MessagePayload]] Parameters \u00b6 content_type : bytes The 'content-type' header content : Content The content to parse. Returns \u00b6 List[Tuple[MessageParams, MessagePayload]] : The form and files","title":"bareutils.unpacking"},{"location":"api/bareutils.unpacking/#module-bareutilsunpacking","text":"","title":"module bareutils.unpacking"},{"location":"api/bareutils.unpacking/#summary","text":"Unpackers","title":"Summary"},{"location":"api/bareutils.unpacking/#async-function-bareutilsunpack_multipart_form_data","text":"","title":"async function bareutils.unpack_multipart_form_data"},{"location":"api/bareutils.unpacking/#summary_1","text":"Unpack multipart form data async bareutils . unpack_multipart_form_data ( content_type : bytes , content : Content ) -> List[Tuple[MessageParams, MessagePayload]]","title":"Summary"},{"location":"api/bareutils.unpacking/#parameters","text":"content_type : bytes The 'content-type' header content : Content The content to parse.","title":"Parameters"},{"location":"api/bareutils.unpacking/#returns","text":"List[Tuple[MessageParams, MessagePayload]] : The form and files","title":"Returns"},{"location":"user-guide/compression/","text":"Compression \u00b6 The bareUtils module bareutils.compression provides constants and helper functions for dealing with compression. More information can be found in streaming and middleware .","title":"Compression"},{"location":"user-guide/compression/#compression","text":"The bareUtils module bareutils.compression provides constants and helper functions for dealing with compression. More information can be found in streaming and middleware .","title":"Compression"},{"location":"user-guide/cookies/","text":"Managing cookies \u00b6 The bareUtils module bareutils.cookies provides constants and helper functions for dealing with cookies. More information can be found in the api . Setting cookies \u00b6 A set-cookie header value can be created with encode_set_cookie . from datetime import timedelta from bareutils.cookies import encode_set_cookie set_cookie = bareutils . cookies . encode_set_cookie ( b 'mycookie' , b '98745hjk988588' , max_age = timedelta ( hours = 2 ) ) headers = [( b 'set-cookie' , set_cookie )] The decode_set_cookie function decodes the set-cookie header value and returns a dictionary containing the set-cookie parameters. Retrieving cookies \u00b6 The decode_cookies function takes the cookie header value and returns a mapping of cookie names to a list of values. This must be a list as cookie names are not guaranteed to be unique. The encode_cookies function does the reverse.","title":"Managing cookies"},{"location":"user-guide/cookies/#managing-cookies","text":"The bareUtils module bareutils.cookies provides constants and helper functions for dealing with cookies. More information can be found in the api .","title":"Managing cookies"},{"location":"user-guide/cookies/#setting-cookies","text":"A set-cookie header value can be created with encode_set_cookie . from datetime import timedelta from bareutils.cookies import encode_set_cookie set_cookie = bareutils . cookies . encode_set_cookie ( b 'mycookie' , b '98745hjk988588' , max_age = timedelta ( hours = 2 ) ) headers = [( b 'set-cookie' , set_cookie )] The decode_set_cookie function decodes the set-cookie header value and returns a dictionary containing the set-cookie parameters.","title":"Setting cookies"},{"location":"user-guide/cookies/#retrieving-cookies","text":"The decode_cookies function takes the cookie header value and returns a mapping of cookie names to a list of values. This must be a list as cookie names are not guaranteed to be unique. The encode_cookies function does the reverse.","title":"Retrieving cookies"},{"location":"user-guide/getting-started/","text":"Getting started. \u00b6 These utilities provide utilities for client and server web frameworks. Click on the following to find out more about: Response codes Reading and writing headers Streaming content Managing cookies Compression Unpacking body content","title":"Getting started."},{"location":"user-guide/getting-started/#getting-started","text":"These utilities provide utilities for client and server web frameworks. Click on the following to find out more about: Response codes Reading and writing headers Streaming content Managing cookies Compression Unpacking body content","title":"Getting started."},{"location":"user-guide/headers/","text":"Reading and writing headers \u00b6 The bareUtils module bareutils.header provides constants and helper functions for dealing with ASGI headers. More information can be found in the api . The most common function is find_header . import asyncio from bareclient import HttpClient import bareutils.response_code as response_code import bareutils.header as header async def main ( url ): async with HttpClient ( url , method = 'GET' ) as response : if response [ 'status_code' ] == response_code . OK and response [ 'more_body' ]: content_type = header . find_header ( b 'content-type' , response [ 'headers' ]) if content_type == b 'text/html' : async for part in response [ 'body' ]: print ( part ) asyncio . run ( main ( 'https://docs.python.org/3/library/cgi.html' )) Note how the header names an values are byte strings. Some helper functions have been provide for the commen headers: e.g. content_type .","title":"Reading and writing headers"},{"location":"user-guide/headers/#reading-and-writing-headers","text":"The bareUtils module bareutils.header provides constants and helper functions for dealing with ASGI headers. More information can be found in the api . The most common function is find_header . import asyncio from bareclient import HttpClient import bareutils.response_code as response_code import bareutils.header as header async def main ( url ): async with HttpClient ( url , method = 'GET' ) as response : if response [ 'status_code' ] == response_code . OK and response [ 'more_body' ]: content_type = header . find_header ( b 'content-type' , response [ 'headers' ]) if content_type == b 'text/html' : async for part in response [ 'body' ]: print ( part ) asyncio . run ( main ( 'https://docs.python.org/3/library/cgi.html' )) Note how the header names an values are byte strings. Some helper functions have been provide for the commen headers: e.g. content_type .","title":"Reading and writing headers"},{"location":"user-guide/installation/","text":"Installation \u00b6 Typically this package will be a dependency of bareASGI or bareClient (read the docs ). You can install it separately with pip. pip install bareutils This is a Python3.7 and later package.","title":"Installation"},{"location":"user-guide/installation/#installation","text":"Typically this package will be a dependency of bareASGI or bareClient (read the docs ). You can install it separately with pip. pip install bareutils This is a Python3.7 and later package.","title":"Installation"},{"location":"user-guide/response-codes/","text":"Response Codes \u00b6 The bareUtils module bareutils.response_codes provides constants and helper functions for dealing with response codes More information can be found in the api . For example bareClient might check for a response code of 200 (OK): 1 2 3 4 5 6 7 8 9 10 11 import asyncio from bareclient import HttpClient import bareutils.response_code as response_code async def main ( url ): async with HttpClient ( url , method = 'GET' ) as response : if response [ 'status_code' ] == response_code . OK and response [ 'more_body' ]: async for part in response [ 'body' ]: print ( part ) asyncio . run ( main ( 'https://docs.python.org/3/library/cgi.html' )) We import the module using the as syntax on line 3 in order to make everything in the module available. The we can use response_code.OK on line 7. If we just wanted to test for a valid response code we could have used response_code.is_successful(response['status_code']) .","title":"Response Codes"},{"location":"user-guide/response-codes/#response-codes","text":"The bareUtils module bareutils.response_codes provides constants and helper functions for dealing with response codes More information can be found in the api . For example bareClient might check for a response code of 200 (OK): 1 2 3 4 5 6 7 8 9 10 11 import asyncio from bareclient import HttpClient import bareutils.response_code as response_code async def main ( url ): async with HttpClient ( url , method = 'GET' ) as response : if response [ 'status_code' ] == response_code . OK and response [ 'more_body' ]: async for part in response [ 'body' ]: print ( part ) asyncio . run ( main ( 'https://docs.python.org/3/library/cgi.html' )) We import the module using the as syntax on line 3 in order to make everything in the module available. The we can use response_code.OK on line 7. If we just wanted to test for a valid response code we could have used response_code.is_successful(response['status_code']) .","title":"Response Codes"},{"location":"user-guide/streaming-content/","text":"Streaming \u00b6 The bareUtils module bareutils.streaming provides constants and helper functions for streaming body content. More information can be found in the api . Body content is sent and received as asynchronous iterators. The most common functions are: bytes_reader to read streams of bytes, bytes_writer to write streams of bytes, text_reader to read streams of text, text_writer to write streams of text. For example to read a text stream from a request handler: from bareutils.streaming import text_reader async def handle_request ( scope , info , matches , content ): text = await text_reader ( content ) return 200 , [( b 'content-type' , b 'text/plain' )], text_write ( text . lower ())","title":"Streaming"},{"location":"user-guide/streaming-content/#streaming","text":"The bareUtils module bareutils.streaming provides constants and helper functions for streaming body content. More information can be found in the api . Body content is sent and received as asynchronous iterators. The most common functions are: bytes_reader to read streams of bytes, bytes_writer to write streams of bytes, text_reader to read streams of text, text_writer to write streams of text. For example to read a text stream from a request handler: from bareutils.streaming import text_reader async def handle_request ( scope , info , matches , content ): text = await text_reader ( content ) return 200 , [( b 'content-type' , b 'text/plain' )], text_write ( text . lower ())","title":"Streaming"},{"location":"user-guide/unpacking/","text":"Unpacking body content \u00b6 The bareUtils module bareutils.unpacking provides constants and helper functions for dealing with unpacking body content. More information can be found in the api .","title":"Unpacking body content"},{"location":"user-guide/unpacking/#unpacking-body-content","text":"The bareUtils module bareutils.unpacking provides constants and helper functions for dealing with unpacking body content. More information can be found in the api .","title":"Unpacking body content"}]}