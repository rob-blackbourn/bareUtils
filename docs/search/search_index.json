{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome \u00b6 This project contains utilities for the bareASGI projects and the bareClient project.","title":"Welcome"},{"location":"#welcome","text":"This project contains utilities for the bareASGI projects and the bareClient project.","title":"Welcome"},{"location":"api/bareutils.compression.middleware/","text":"module bareutils.compression.middleware \u00b6 Summary \u00b6 Middleware for compression function bareutils.compression . make_default_compression_middleware \u00b6 Summary \u00b6 Makes the compression middleware with the default compressors: gzip, and bareutils.compression . make_default_compression_middleware ( * , minimum_size : int ) -> CompressionMiddleware Parameters \u00b6 minimum_size : int An optional size below which no compression is performed. Defaults to 512. Returns \u00b6 CompressionMiddleware : The compression middleware. Description \u00b6 deflate. The following adds the middleware, setting the minimum size to 1024 compression_middleware = make_default_compression_middleware ( minimum_size = 1024 ) app = Application ( middlewares = [ compression_middleware ]) class CompressionMiddleware \u00b6 Summary \u00b6 Constructs the compression middleware. bareutils.compression . CompressionMiddleware ( minimum_size : int ) -> None Parameters \u00b6 minimum_size : int The size below which no compression will be attempted. Defaults to 512. Description \u00b6 Note how the compression functions are passed rather than the compressors, as a fresh compressor is required for each message. compressors = { b 'gzip' : make_gzip_compressobj , b 'deflate' : make_deflate_compressobj } return CompressionMiddleware ( compressors , minimum_size ) method CompressionMiddleware . is_acceptable \u00b6 Summary \u00b6 Returns True if the requested encoding is acceptable. CompressionMiddleware . is_acceptable ( accept_encoding : Mapping[bytes, float] , content_encoding : List[bytes] ) -> bool Parameters \u00b6 accept_encoding : Mapping[bytes, float] (optional) The acceptable encodings. content_encoding : List[bytes] (optional) The current content encoding. Returns \u00b6 bool : True if acceptable, otherwise False. Description \u00b6 If the quality value of 'identity' is specified as 0 we must support one of the other encodings. We must check the current encoding as it is possible that the this is already sufficient. method CompressionMiddleware . is_desirable \u00b6 Summary \u00b6 Returns True if the compression is desirable. CompressionMiddleware . is_desirable ( accept_encoding : Mapping[bytes, float] , content_encoding : List[bytes] , content_length : Optional[int] ) -> bool Parameters \u00b6 accept_encoding : Mapping[bytes, float] (optional) The requested encodings. content_encoding : List[bytes] (optional) The current encoding. content_length : Optional[int] (optional) The content length if available. Returns \u00b6 bool : True if compression is desirable, otherwise False. Description \u00b6 While compression might be possible it may not be desirable. For example the content may already be compressed (e.g. for an image), or the content length may be too small to be worth the effort. method CompressionMiddleware . select_encoding \u00b6 Summary \u00b6 Select the encoding based on the accepted encodings CompressionMiddleware . select_encoding ( accept_encoding : Mapping[bytes, float] ) -> bytes Parameters \u00b6 accept_encoding : Mapping[bytes, float] (optional) The accepted encodings. Returns \u00b6 bytes : The selected encoding.","title":"bareutils.compression.middleware"},{"location":"api/bareutils.compression.middleware/#module-bareutilscompressionmiddleware","text":"","title":"module bareutils.compression.middleware"},{"location":"api/bareutils.compression.middleware/#summary","text":"Middleware for compression","title":"Summary"},{"location":"api/bareutils.compression.middleware/#function-bareutilscompressionmake_default_compression_middleware","text":"","title":"function bareutils.compression.make_default_compression_middleware"},{"location":"api/bareutils.compression.middleware/#summary_1","text":"Makes the compression middleware with the default compressors: gzip, and bareutils.compression . make_default_compression_middleware ( * , minimum_size : int ) -> CompressionMiddleware","title":"Summary"},{"location":"api/bareutils.compression.middleware/#parameters","text":"minimum_size : int An optional size below which no compression is performed. Defaults to 512.","title":"Parameters"},{"location":"api/bareutils.compression.middleware/#returns","text":"CompressionMiddleware : The compression middleware.","title":"Returns"},{"location":"api/bareutils.compression.middleware/#description","text":"deflate. The following adds the middleware, setting the minimum size to 1024 compression_middleware = make_default_compression_middleware ( minimum_size = 1024 ) app = Application ( middlewares = [ compression_middleware ])","title":"Description"},{"location":"api/bareutils.compression.middleware/#class-compressionmiddleware","text":"","title":"class CompressionMiddleware"},{"location":"api/bareutils.compression.middleware/#summary_2","text":"Constructs the compression middleware. bareutils.compression . CompressionMiddleware ( minimum_size : int ) -> None","title":"Summary"},{"location":"api/bareutils.compression.middleware/#parameters_1","text":"minimum_size : int The size below which no compression will be attempted. Defaults to 512.","title":"Parameters"},{"location":"api/bareutils.compression.middleware/#description_1","text":"Note how the compression functions are passed rather than the compressors, as a fresh compressor is required for each message. compressors = { b 'gzip' : make_gzip_compressobj , b 'deflate' : make_deflate_compressobj } return CompressionMiddleware ( compressors , minimum_size )","title":"Description"},{"location":"api/bareutils.compression.middleware/#method-compressionmiddlewareis_acceptable","text":"","title":"method CompressionMiddleware.is_acceptable"},{"location":"api/bareutils.compression.middleware/#summary_3","text":"Returns True if the requested encoding is acceptable. CompressionMiddleware . is_acceptable ( accept_encoding : Mapping[bytes, float] , content_encoding : List[bytes] ) -> bool","title":"Summary"},{"location":"api/bareutils.compression.middleware/#parameters_2","text":"accept_encoding : Mapping[bytes, float] (optional) The acceptable encodings. content_encoding : List[bytes] (optional) The current content encoding.","title":"Parameters"},{"location":"api/bareutils.compression.middleware/#returns_1","text":"bool : True if acceptable, otherwise False.","title":"Returns"},{"location":"api/bareutils.compression.middleware/#description_2","text":"If the quality value of 'identity' is specified as 0 we must support one of the other encodings. We must check the current encoding as it is possible that the this is already sufficient.","title":"Description"},{"location":"api/bareutils.compression.middleware/#method-compressionmiddlewareis_desirable","text":"","title":"method CompressionMiddleware.is_desirable"},{"location":"api/bareutils.compression.middleware/#summary_4","text":"Returns True if the compression is desirable. CompressionMiddleware . is_desirable ( accept_encoding : Mapping[bytes, float] , content_encoding : List[bytes] , content_length : Optional[int] ) -> bool","title":"Summary"},{"location":"api/bareutils.compression.middleware/#parameters_3","text":"accept_encoding : Mapping[bytes, float] (optional) The requested encodings. content_encoding : List[bytes] (optional) The current encoding. content_length : Optional[int] (optional) The content length if available.","title":"Parameters"},{"location":"api/bareutils.compression.middleware/#returns_2","text":"bool : True if compression is desirable, otherwise False.","title":"Returns"},{"location":"api/bareutils.compression.middleware/#description_3","text":"While compression might be possible it may not be desirable. For example the content may already be compressed (e.g. for an image), or the content length may be too small to be worth the effort.","title":"Description"},{"location":"api/bareutils.compression.middleware/#method-compressionmiddlewareselect_encoding","text":"","title":"method CompressionMiddleware.select_encoding"},{"location":"api/bareutils.compression.middleware/#summary_5","text":"Select the encoding based on the accepted encodings CompressionMiddleware . select_encoding ( accept_encoding : Mapping[bytes, float] ) -> bytes","title":"Summary"},{"location":"api/bareutils.compression.middleware/#parameters_4","text":"accept_encoding : Mapping[bytes, float] (optional) The accepted encodings.","title":"Parameters"},{"location":"api/bareutils.compression.middleware/#returns_3","text":"bytes : The selected encoding.","title":"Returns"},{"location":"api/bareutils.compression.streaming/","text":"module bareutils.compression.streaming \u00b6 Summary \u00b6 Compression streaming. async function bareutils.compression . compression_reader \u00b6 async bareutils.compression . compression_reader ( source : Content , decompressobj : Decompressor ) -> bytes Parameters \u00b6 source : Content (optional) decompressobj : Decompressor (optional) Returns \u00b6 bytes : async generator function bareutils.compression . compression_reader_adapter \u00b6 async bareutils.compression . compression_reader_adapter ( reader : Content , decompressobj : Decompressor ) -> Content Parameters \u00b6 reader : Content (optional) decompressobj : Decompressor (optional) Yields \u00b6 Content : function bareutils.compression . compression_writer \u00b6 Summary \u00b6 Create an async iterator for compressed content. bareutils.compression . compression_writer ( buf : bytes , compressobj : Compressor , chunk_size : int ) -> Content Parameters \u00b6 buf : bytes (optional) The bytes to compress. compressobj : Compressor (optional) The compressor. chunk_size : int An optional chunk size where -1 indicates no chunking. Defaults to -1. Returns \u00b6 Content : An async iterator of compressed bytes. async generator function bareutils.compression . compression_writer_adapter \u00b6 Summary \u00b6 Adapts a bytes generator to generated compressed output. async bareutils.compression . compression_writer_adapter ( writer : Content , compressobj : Compressor ) -> Content Parameters \u00b6 writer : Content (optional) The writer to be adapted. compressobj : Compressor (optional) A compressor Yields \u00b6 Content : The compressed content as bytes function bareutils.compression . make_compress_compressobj \u00b6 Summary \u00b6 Make a compressor for 'compress' bareutils.compression . make_compress_compressobj ( ) -> Compressor Returns \u00b6 Compressor : A compress compressor. Description \u00b6 Note: This is not used by browsers anymore and should be avoided. function bareutils.compression . make_compress_decompressobj \u00b6 Summary \u00b6 Make a compressor for 'compress' bareutils.compression . make_compress_decompressobj ( ) -> Decompressor Returns \u00b6 Decompressor : A compress compressor. Description \u00b6 Note: This is not used by browsers anymore and should be avoided. function bareutils.compression . make_deflate_compressobj \u00b6 Summary \u00b6 Make a compressor for 'deflate' bareutils.compression . make_deflate_compressobj ( ) -> Compressor Returns \u00b6 Compressor : A deflate compressor. function bareutils.compression . make_deflate_decompressobj \u00b6 Summary \u00b6 Make a compressor for 'deflate' bareutils.compression . make_deflate_decompressobj ( ) -> Decompressor Returns \u00b6 Decompressor : A deflate compressor. function bareutils.compression . make_gzip_compressobj \u00b6 Summary \u00b6 Make a compressor for 'gzip' bareutils.compression . make_gzip_compressobj ( ) -> Compressor Returns \u00b6 Compressor : A gzip compressor. function bareutils.compression . make_gzip_decompressobj \u00b6 Summary \u00b6 Make a compressor for 'gzip' bareutils.compression . make_gzip_decompressobj ( ) -> Decompressor Returns \u00b6 Decompressor : A gzip compressor. class Compressor \u00b6 Summary \u00b6 A class to represent the methods available on a compressor bareutils.compression . Compressor ( ) -> None method Compressor . compress \u00b6 Summary \u00b6 Compress a buffer Compressor . compress ( buf : bytes ) -> bytes Parameters \u00b6 buf : bytes (optional) The buffer to compress. Returns \u00b6 bytes : The compressed buffer. method Compressor . flush \u00b6 Summary \u00b6 Flush the compressor Compressor . flush ( ) -> bytes Returns \u00b6 bytes : The remaining bytes. class Decompressor \u00b6 Summary \u00b6 A class to represent the methods available on a compressor bareutils.compression . Decompressor ( ) -> None property Decompressor . eof \u00b6 eof -> bool property Decompressor . unconsumed_tail \u00b6 unconsumed_tail -> bytes property Decompressor . unused_data \u00b6 unused_data -> bytes method Decompressor . copy \u00b6 Decompressor . copy ( ) -> Decompressor Returns \u00b6 Decompressor : method Decompressor . decompress \u00b6 Decompressor . decompress ( buf : bytes , max_length : int ) -> bytes Parameters \u00b6 buf : bytes (optional) max_length : int Returns \u00b6 bytes : method Decompressor . flush \u00b6 Decompressor . flush ( length : Optional[int] ) -> bytes Parameters \u00b6 length : Optional[int] Returns \u00b6 bytes :","title":"bareutils.compression.streaming"},{"location":"api/bareutils.compression.streaming/#module-bareutilscompressionstreaming","text":"","title":"module bareutils.compression.streaming"},{"location":"api/bareutils.compression.streaming/#summary","text":"Compression streaming.","title":"Summary"},{"location":"api/bareutils.compression.streaming/#async-function-bareutilscompressioncompression_reader","text":"async bareutils.compression . compression_reader ( source : Content , decompressobj : Decompressor ) -> bytes","title":"async function bareutils.compression.compression_reader"},{"location":"api/bareutils.compression.streaming/#parameters","text":"source : Content (optional) decompressobj : Decompressor (optional)","title":"Parameters"},{"location":"api/bareutils.compression.streaming/#returns","text":"bytes :","title":"Returns"},{"location":"api/bareutils.compression.streaming/#async-generator-function-bareutilscompressioncompression_reader_adapter","text":"async bareutils.compression . compression_reader_adapter ( reader : Content , decompressobj : Decompressor ) -> Content","title":"async generator function bareutils.compression.compression_reader_adapter"},{"location":"api/bareutils.compression.streaming/#parameters_1","text":"reader : Content (optional) decompressobj : Decompressor (optional)","title":"Parameters"},{"location":"api/bareutils.compression.streaming/#yields","text":"Content :","title":"Yields"},{"location":"api/bareutils.compression.streaming/#function-bareutilscompressioncompression_writer","text":"","title":"function bareutils.compression.compression_writer"},{"location":"api/bareutils.compression.streaming/#summary_1","text":"Create an async iterator for compressed content. bareutils.compression . compression_writer ( buf : bytes , compressobj : Compressor , chunk_size : int ) -> Content","title":"Summary"},{"location":"api/bareutils.compression.streaming/#parameters_2","text":"buf : bytes (optional) The bytes to compress. compressobj : Compressor (optional) The compressor. chunk_size : int An optional chunk size where -1 indicates no chunking. Defaults to -1.","title":"Parameters"},{"location":"api/bareutils.compression.streaming/#returns_1","text":"Content : An async iterator of compressed bytes.","title":"Returns"},{"location":"api/bareutils.compression.streaming/#async-generator-function-bareutilscompressioncompression_writer_adapter","text":"","title":"async generator function bareutils.compression.compression_writer_adapter"},{"location":"api/bareutils.compression.streaming/#summary_2","text":"Adapts a bytes generator to generated compressed output. async bareutils.compression . compression_writer_adapter ( writer : Content , compressobj : Compressor ) -> Content","title":"Summary"},{"location":"api/bareutils.compression.streaming/#parameters_3","text":"writer : Content (optional) The writer to be adapted. compressobj : Compressor (optional) A compressor","title":"Parameters"},{"location":"api/bareutils.compression.streaming/#yields_1","text":"Content : The compressed content as bytes","title":"Yields"},{"location":"api/bareutils.compression.streaming/#function-bareutilscompressionmake_compress_compressobj","text":"","title":"function bareutils.compression.make_compress_compressobj"},{"location":"api/bareutils.compression.streaming/#summary_3","text":"Make a compressor for 'compress' bareutils.compression . make_compress_compressobj ( ) -> Compressor","title":"Summary"},{"location":"api/bareutils.compression.streaming/#returns_2","text":"Compressor : A compress compressor.","title":"Returns"},{"location":"api/bareutils.compression.streaming/#description","text":"Note: This is not used by browsers anymore and should be avoided.","title":"Description"},{"location":"api/bareutils.compression.streaming/#function-bareutilscompressionmake_compress_decompressobj","text":"","title":"function bareutils.compression.make_compress_decompressobj"},{"location":"api/bareutils.compression.streaming/#summary_4","text":"Make a compressor for 'compress' bareutils.compression . make_compress_decompressobj ( ) -> Decompressor","title":"Summary"},{"location":"api/bareutils.compression.streaming/#returns_3","text":"Decompressor : A compress compressor.","title":"Returns"},{"location":"api/bareutils.compression.streaming/#description_1","text":"Note: This is not used by browsers anymore and should be avoided.","title":"Description"},{"location":"api/bareutils.compression.streaming/#function-bareutilscompressionmake_deflate_compressobj","text":"","title":"function bareutils.compression.make_deflate_compressobj"},{"location":"api/bareutils.compression.streaming/#summary_5","text":"Make a compressor for 'deflate' bareutils.compression . make_deflate_compressobj ( ) -> Compressor","title":"Summary"},{"location":"api/bareutils.compression.streaming/#returns_4","text":"Compressor : A deflate compressor.","title":"Returns"},{"location":"api/bareutils.compression.streaming/#function-bareutilscompressionmake_deflate_decompressobj","text":"","title":"function bareutils.compression.make_deflate_decompressobj"},{"location":"api/bareutils.compression.streaming/#summary_6","text":"Make a compressor for 'deflate' bareutils.compression . make_deflate_decompressobj ( ) -> Decompressor","title":"Summary"},{"location":"api/bareutils.compression.streaming/#returns_5","text":"Decompressor : A deflate compressor.","title":"Returns"},{"location":"api/bareutils.compression.streaming/#function-bareutilscompressionmake_gzip_compressobj","text":"","title":"function bareutils.compression.make_gzip_compressobj"},{"location":"api/bareutils.compression.streaming/#summary_7","text":"Make a compressor for 'gzip' bareutils.compression . make_gzip_compressobj ( ) -> Compressor","title":"Summary"},{"location":"api/bareutils.compression.streaming/#returns_6","text":"Compressor : A gzip compressor.","title":"Returns"},{"location":"api/bareutils.compression.streaming/#function-bareutilscompressionmake_gzip_decompressobj","text":"","title":"function bareutils.compression.make_gzip_decompressobj"},{"location":"api/bareutils.compression.streaming/#summary_8","text":"Make a compressor for 'gzip' bareutils.compression . make_gzip_decompressobj ( ) -> Decompressor","title":"Summary"},{"location":"api/bareutils.compression.streaming/#returns_7","text":"Decompressor : A gzip compressor.","title":"Returns"},{"location":"api/bareutils.compression.streaming/#class-compressor","text":"","title":"class Compressor"},{"location":"api/bareutils.compression.streaming/#summary_9","text":"A class to represent the methods available on a compressor bareutils.compression . Compressor ( ) -> None","title":"Summary"},{"location":"api/bareutils.compression.streaming/#method-compressorcompress","text":"","title":"method Compressor.compress"},{"location":"api/bareutils.compression.streaming/#summary_10","text":"Compress a buffer Compressor . compress ( buf : bytes ) -> bytes","title":"Summary"},{"location":"api/bareutils.compression.streaming/#parameters_4","text":"buf : bytes (optional) The buffer to compress.","title":"Parameters"},{"location":"api/bareutils.compression.streaming/#returns_8","text":"bytes : The compressed buffer.","title":"Returns"},{"location":"api/bareutils.compression.streaming/#method-compressorflush","text":"","title":"method Compressor.flush"},{"location":"api/bareutils.compression.streaming/#summary_11","text":"Flush the compressor Compressor . flush ( ) -> bytes","title":"Summary"},{"location":"api/bareutils.compression.streaming/#returns_9","text":"bytes : The remaining bytes.","title":"Returns"},{"location":"api/bareutils.compression.streaming/#class-decompressor","text":"","title":"class Decompressor"},{"location":"api/bareutils.compression.streaming/#summary_12","text":"A class to represent the methods available on a compressor bareutils.compression . Decompressor ( ) -> None","title":"Summary"},{"location":"api/bareutils.compression.streaming/#property-decompressoreof","text":"eof -> bool","title":"property Decompressor.eof"},{"location":"api/bareutils.compression.streaming/#property-decompressorunconsumed_tail","text":"unconsumed_tail -> bytes","title":"property Decompressor.unconsumed_tail"},{"location":"api/bareutils.compression.streaming/#property-decompressorunused_data","text":"unused_data -> bytes","title":"property Decompressor.unused_data"},{"location":"api/bareutils.compression.streaming/#method-decompressorcopy","text":"Decompressor . copy ( ) -> Decompressor","title":"method Decompressor.copy"},{"location":"api/bareutils.compression.streaming/#returns_10","text":"Decompressor :","title":"Returns"},{"location":"api/bareutils.compression.streaming/#method-decompressordecompress","text":"Decompressor . decompress ( buf : bytes , max_length : int ) -> bytes","title":"method Decompressor.decompress"},{"location":"api/bareutils.compression.streaming/#parameters_5","text":"buf : bytes (optional) max_length : int","title":"Parameters"},{"location":"api/bareutils.compression.streaming/#returns_11","text":"bytes :","title":"Returns"},{"location":"api/bareutils.compression.streaming/#method-decompressorflush","text":"Decompressor . flush ( length : Optional[int] ) -> bytes","title":"method Decompressor.flush"},{"location":"api/bareutils.compression.streaming/#parameters_6","text":"length : Optional[int]","title":"Parameters"},{"location":"api/bareutils.compression.streaming/#returns_12","text":"bytes :","title":"Returns"},{"location":"api/bareutils.cookies/","text":"module bareutils.cookies \u00b6 Summary \u00b6 Cookies function bareutils . decode_cookies \u00b6 Summary \u00b6 Decode a cookie header bareutils . decode_cookies ( cookies : bytes ) -> Mapping[bytes, List[bytes]] Parameters \u00b6 cookies : bytes (optional) The header Returns \u00b6 Mapping[bytes, List[bytes]] : The cookies function bareutils . decode_set_cookie \u00b6 Summary \u00b6 Decode a set-cookie header into a dictionary. bareutils . decode_set_cookie ( set_cookie : bytes ) -> Mapping[str, Any] Parameters \u00b6 set_cookie : bytes (optional) The set-cookie header Returns \u00b6 Mapping[str, Any] : A dictionary of the values Description \u00b6 The max-age value is represented as a datatime.timedelta . The expires value is represented as a datetine.datetime . The secure value is represented as a bool . function bareutils . encode_cookies \u00b6 Summary \u00b6 Encode the cookie header bareutils . encode_cookies ( cookies : Mapping[bytes, List[bytes]] ) -> bytes Parameters \u00b6 cookies : Mapping[bytes, List[bytes]] (optional) The cookies Returns \u00b6 bytes : The cookie header function bareutils . encode_set_cookie \u00b6 Summary \u00b6 Encode set-cookie bareutils . encode_set_cookie ( name : bytes , value : bytes , * , expires : Optional[datetime] , max_age : Optional[Union[int , path : Optional[bytes] , domain : Optional[bytes] , secure : bool , http_only : bool , same_site : Optional[bytes] ) -> bytes Parameters \u00b6 name : bytes (optional) The cookie name value : bytes (optional) The cookie value expires : Optional[datetime] The time the cookie expires. Defaults to None. max_age : Optional[Union[int The maximum age of the cookie in seconds. Defaults to None. path : Optional[bytes] The cookie path. Defaults to None. domain : Optional[bytes] The cookie domain. Defaults to None. secure : bool Indicates if the cookie is restricted to https. Defaults to False. http_only : bool Indicates if the cookie is available to the API. Defaults to False. same_site : Optional[bytes] CORS directive. Defaults to None. Returns \u00b6 bytes : The set-cookie header function bareutils . make_cookie \u00b6 Summary \u00b6 Make a set-cookie header bareutils . make_cookie ( key : bytes , value : bytes , * , expires : Optional[Union[datetime , path : Optional[bytes] , domain : Optional[bytes] , secure : bool , http_only : bool , same_site : Optional[bytes] ) -> bytes Parameters \u00b6 key : bytes (optional) The cookie name value : bytes (optional) The cookie value expires : Optional[Union[datetime The expiry time of the cookie. Defaults to None. path : Optional[bytes] The cookie path. Defaults to None. domain : Optional[bytes] The cookie domain. Defaults to None. secure : bool Indicates if the cookie is restricted to https. Defaults to False. http_only : bool Indicates if the cookie is available to the API. Defaults to False. same_site : Optional[bytes] CORS directive. Defaults to None. Returns \u00b6 bytes : The set-cookie header function bareutils . make_expired_cookie \u00b6 Summary \u00b6 Make an expired cookie bareutils . make_expired_cookie ( key : bytes , path : bytes ) -> bytes Parameters \u00b6 key : bytes (optional) The cookie name path : bytes The cookie path. Defaults to b'/'. Returns \u00b6 bytes : [description]","title":"bareutils.cookies"},{"location":"api/bareutils.cookies/#module-bareutilscookies","text":"","title":"module bareutils.cookies"},{"location":"api/bareutils.cookies/#summary","text":"Cookies","title":"Summary"},{"location":"api/bareutils.cookies/#function-bareutilsdecode_cookies","text":"","title":"function bareutils.decode_cookies"},{"location":"api/bareutils.cookies/#summary_1","text":"Decode a cookie header bareutils . decode_cookies ( cookies : bytes ) -> Mapping[bytes, List[bytes]]","title":"Summary"},{"location":"api/bareutils.cookies/#parameters","text":"cookies : bytes (optional) The header","title":"Parameters"},{"location":"api/bareutils.cookies/#returns","text":"Mapping[bytes, List[bytes]] : The cookies","title":"Returns"},{"location":"api/bareutils.cookies/#function-bareutilsdecode_set_cookie","text":"","title":"function bareutils.decode_set_cookie"},{"location":"api/bareutils.cookies/#summary_2","text":"Decode a set-cookie header into a dictionary. bareutils . decode_set_cookie ( set_cookie : bytes ) -> Mapping[str, Any]","title":"Summary"},{"location":"api/bareutils.cookies/#parameters_1","text":"set_cookie : bytes (optional) The set-cookie header","title":"Parameters"},{"location":"api/bareutils.cookies/#returns_1","text":"Mapping[str, Any] : A dictionary of the values","title":"Returns"},{"location":"api/bareutils.cookies/#description","text":"The max-age value is represented as a datatime.timedelta . The expires value is represented as a datetine.datetime . The secure value is represented as a bool .","title":"Description"},{"location":"api/bareutils.cookies/#function-bareutilsencode_cookies","text":"","title":"function bareutils.encode_cookies"},{"location":"api/bareutils.cookies/#summary_3","text":"Encode the cookie header bareutils . encode_cookies ( cookies : Mapping[bytes, List[bytes]] ) -> bytes","title":"Summary"},{"location":"api/bareutils.cookies/#parameters_2","text":"cookies : Mapping[bytes, List[bytes]] (optional) The cookies","title":"Parameters"},{"location":"api/bareutils.cookies/#returns_2","text":"bytes : The cookie header","title":"Returns"},{"location":"api/bareutils.cookies/#function-bareutilsencode_set_cookie","text":"","title":"function bareutils.encode_set_cookie"},{"location":"api/bareutils.cookies/#summary_4","text":"Encode set-cookie bareutils . encode_set_cookie ( name : bytes , value : bytes , * , expires : Optional[datetime] , max_age : Optional[Union[int , path : Optional[bytes] , domain : Optional[bytes] , secure : bool , http_only : bool , same_site : Optional[bytes] ) -> bytes","title":"Summary"},{"location":"api/bareutils.cookies/#parameters_3","text":"name : bytes (optional) The cookie name value : bytes (optional) The cookie value expires : Optional[datetime] The time the cookie expires. Defaults to None. max_age : Optional[Union[int The maximum age of the cookie in seconds. Defaults to None. path : Optional[bytes] The cookie path. Defaults to None. domain : Optional[bytes] The cookie domain. Defaults to None. secure : bool Indicates if the cookie is restricted to https. Defaults to False. http_only : bool Indicates if the cookie is available to the API. Defaults to False. same_site : Optional[bytes] CORS directive. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.cookies/#returns_3","text":"bytes : The set-cookie header","title":"Returns"},{"location":"api/bareutils.cookies/#function-bareutilsmake_cookie","text":"","title":"function bareutils.make_cookie"},{"location":"api/bareutils.cookies/#summary_5","text":"Make a set-cookie header bareutils . make_cookie ( key : bytes , value : bytes , * , expires : Optional[Union[datetime , path : Optional[bytes] , domain : Optional[bytes] , secure : bool , http_only : bool , same_site : Optional[bytes] ) -> bytes","title":"Summary"},{"location":"api/bareutils.cookies/#parameters_4","text":"key : bytes (optional) The cookie name value : bytes (optional) The cookie value expires : Optional[Union[datetime The expiry time of the cookie. Defaults to None. path : Optional[bytes] The cookie path. Defaults to None. domain : Optional[bytes] The cookie domain. Defaults to None. secure : bool Indicates if the cookie is restricted to https. Defaults to False. http_only : bool Indicates if the cookie is available to the API. Defaults to False. same_site : Optional[bytes] CORS directive. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.cookies/#returns_4","text":"bytes : The set-cookie header","title":"Returns"},{"location":"api/bareutils.cookies/#function-bareutilsmake_expired_cookie","text":"","title":"function bareutils.make_expired_cookie"},{"location":"api/bareutils.cookies/#summary_6","text":"Make an expired cookie bareutils . make_expired_cookie ( key : bytes , path : bytes ) -> bytes","title":"Summary"},{"location":"api/bareutils.cookies/#parameters_5","text":"key : bytes (optional) The cookie name path : bytes The cookie path. Defaults to b'/'.","title":"Parameters"},{"location":"api/bareutils.cookies/#returns_5","text":"bytes : [description]","title":"Returns"},{"location":"api/bareutils.header/","text":"module bareutils.header \u00b6 Summary \u00b6 Header utilities Description \u00b6 A collection of functions to extract headers from the ASGI scope. function bareutils . accept \u00b6 Summary \u00b6 Returns the accept header if it exists. bareutils . accept ( headers : Headers , * , add_wildcard : bool , default : Optional[Mapping[bytes ) -> Optional[Mapping[bytes, Tuple[bytes, Any]]] Parameters \u00b6 headers : Headers (optional) The headers add_wildcard : bool If true add the implicit wildcard '*'. Defaults to False. default : Optional[Mapping[bytes An optional default. Defaults to None. Returns \u00b6 Optional[Mapping[bytes, Tuple[bytes, Any]]] : A dictionary where the key is media type and the value is quality. Description \u00b6 Where quality is not given it defaults to 1.0. >>> accept ([( b 'accept' , b 'text/html, application/xhtml+xml, application/xml;q=0.9, / ;q=0.8' )]) { b 'text/html' : 1.0 , b 'application/xhtml+xml' : 1.0 , b 'application/xml' : 0.9 , b ' / ' : 0.8 } function bareutils . accept_ch \u00b6 Summary \u00b6 The Accept-CH header is set by the server to specify which Client Hints bareutils . accept_ch ( headers : Headers , * , default : Optional[Mapping[bytes ) -> Optional[List[bytes]] Parameters \u00b6 headers : Headers (optional) The headers default : Optional[Mapping[bytes An optional default. Defaults to None. Returns \u00b6 Optional[List[bytes]] : The client hints Description \u00b6 headers client should include in subsequent requests. function bareutils . accept_ch_lifetime \u00b6 Summary \u00b6 The Accept-CH-Lifetime header is set by the server to specify the bareutils . accept_ch_lifetime ( headers : Headers , * , default : Optional[Mapping[bytes ) -> Optional[int] Parameters \u00b6 headers : Headers (optional) The headers default : Optional[Mapping[bytes An optional default. Defaults to None. Returns \u00b6 Optional[int] : The lifetime in seconds Description \u00b6 persistence of Accept-CH header value that specifies for which Client Hints headers client should include in subsequent requests. function bareutils . accept_charset \u00b6 Summary \u00b6 Extracts the accept encoding header if it exists into a mapping of the bareutils . accept_charset ( headers : Headers , * , add_wildcard : bool , default : Optional[Mapping[bytes ) -> Optional[Mapping[bytes, float]] Parameters \u00b6 headers : Headers (optional) The headers add_wildcard : bool If True ensures the '*' charset is included. Defaults to False. default : Optional[Mapping[bytes An optional default. Defaults to None. Returns \u00b6 Optional[Mapping[bytes, float]] : A mapping of the encodings and qualities. Description \u00b6 encoding and the quality value which defaults to 1.0 if missing. function bareutils . accept_encoding \u00b6 Summary \u00b6 Extracts the accept encoding header if it exists into a mapping of the encoding bareutils . accept_encoding ( headers : Headers , * , add_identity : bool , default : Optional[Mapping[bytes ) -> Optional[Mapping[bytes, float]] Parameters \u00b6 headers : Headers (optional) The headers to search. add_identity : bool If True ensures the 'identity' encoding is included.. Defaults to False. default : Optional[Mapping[bytes An optional default. Defaults to None. Returns \u00b6 Optional[Mapping[bytes, float]] : A mapping of the encodings and qualities. Description \u00b6 and the quality value which defaults to 1.0 if missing. function bareutils . accept_language \u00b6 Summary \u00b6 Extracts the accept language header if it exists into a mapping of the bareutils . accept_language ( headers : Headers , * , add_wildcard : bool , default : Optional[Mapping[bytes ) -> Optional[Mapping[bytes, float]] Parameters \u00b6 headers : Headers (optional) The headers to search. add_wildcard : bool If True ensures the '*' charset is included. Defaults to False. default : Optional[Mapping[bytes [description]. Defaults to None. Returns \u00b6 Optional[Mapping[bytes, float]] : A mapping of the encodings and qualities. Description \u00b6 encoding and the quality value which defaults to 1.0 if missing. function bareutils . accept_patch \u00b6 Summary \u00b6 The Accept-Patch response HTTP header advertises which media-type the bareutils . accept_patch ( headers : Headers , * , default : Optional[List[Tuple[bytes ) -> Optional[List[Tuple[bytes, Optional[bytes]]]] Parameters \u00b6 headers : Headers (optional) The headers to search. default : Optional[List[Tuple[bytes An optional default value. Defaults to None. Returns \u00b6 Optional[List[Tuple[bytes, Optional[bytes]]]] : A list of tuples of media type and optional charset. Description \u00b6 server is able to understand. function bareutils . accept_ranges \u00b6 Summary \u00b6 Returns the value of the accept ranges header of None if missing bareutils . accept_ranges ( headers : Headers , * , default : Optional[bytes] ) -> Optional[bytes] Parameters \u00b6 headers : Headers (optional) The headers default : Optional[bytes] An optional default value. Defaults to None. Returns \u00b6 Optional[bytes] : The header value (bytes or none) function bareutils . access_control_allow_credentials \u00b6 Summary \u00b6 Extracts the access control allow credentials header as a bool or None if bareutils . access_control_allow_credentials ( headers : Headers , * , default : Optional[bool] ) -> Optional[bool] Parameters \u00b6 headers : Headers (optional) The headers. default : Optional[bool] An optional default value. Defaults to None. Returns \u00b6 Optional[bool] : A bool or None Description \u00b6 missing. function bareutils . access_control_allow_headers \u00b6 Summary \u00b6 The Access-Control-Allow-Headers response header is used in response to bareutils . access_control_allow_headers ( headers : Headers , * , default : Optional[List[bytes]] ) -> Optional[List[bytes]] Parameters \u00b6 headers : Headers (optional) The headers. default : Optional[List[bytes]] An optional default value. Defaults to None. Returns \u00b6 Optional[List[bytes]] : A list of the allowed headers or '*' for all headers. Description \u00b6 a preflight request which includes the Access-Control-Request-Headers to indicate which HTTP headers can be used during the actual request. function bareutils . access_control_allow_methods \u00b6 Summary \u00b6 The Access-Control-Allow-Methods response header specifies the method or bareutils . access_control_allow_methods ( headers : Headers , * , default : Optional[List[bytes]] ) -> Optional[List[bytes]] Parameters \u00b6 headers : Headers (optional) The headers. default : Optional[List[bytes]] An optional default value. Defaults to None. Returns \u00b6 Optional[List[bytes]] : A list of the allowed methods, or '*' for all methods. Description \u00b6 methods allowed when accessing the resource in response to a preflight request. function bareutils . access_control_allow_origin \u00b6 Summary \u00b6 The Access-Control-Allow-Origin response header indicates whether the bareutils . access_control_allow_origin ( headers : Headers , * , default : Optional[List[bytes]] ) -> Optional[bytes] Parameters \u00b6 headers : Headers (optional) The headers. default : Optional[List[bytes]] An optional default value. Defaults to None. Returns \u00b6 Optional[bytes] : The origin or '*' for all origins, or 'null' Description \u00b6 response can be shared with requesting code from the given origin. function bareutils . access_control_expose_headers \u00b6 Summary \u00b6 [summary] bareutils . access_control_expose_headers ( headers : Headers , * , add_simple_response_headers : bool , default : Optional[List[bytes]] ) -> Optional[List[bytes]] Parameters \u00b6 headers : Headers (optional) The headers. add_simple_response_headers : bool If true add the safelisted headers. Defaults to False. default : Optional[List[bytes]] An optional default value. Defaults to None. Returns \u00b6 Optional[List[bytes]] : The headers to expose. function bareutils . access_control_max_age \u00b6 Summary \u00b6 The Access-Control-Max-Age response header indicates how long the results bareutils . access_control_max_age ( headers : Headers , * , default : Optional[int] ) -> Optional[int] Parameters \u00b6 headers : Headers (optional) The headers default : Optional[int] An optional default value. Defaults to None. Returns \u00b6 Optional[int] : The number of seconds Description \u00b6 of a preflight request (that is the information contained in the Access-Control-Allow-Methods and Access-Control-Allow-Headers headers) can be cached. function bareutils . access_control_request_headers \u00b6 Summary \u00b6 The Access-Control-Request-Headers request header is used by browsers bareutils . access_control_request_headers ( headers : Headers , * , default : Optional[List[bytes]] ) -> Optional[List[bytes]] Parameters \u00b6 headers : Headers (optional) The headers default : Optional[List[bytes]] An optional default value. Defaults to None. Returns \u00b6 Optional[List[bytes]] : The request headers Description \u00b6 when issuing a preflight request, to let the server know which HTTP headers the client might send when the actual request is made. function bareutils . access_control_request_method \u00b6 Summary \u00b6 The Access-Control-Request-Method request header is used by browsers when bareutils . access_control_request_method ( headers : Headers , * , default : Optional[bytes] ) -> Optional[bytes] Parameters \u00b6 headers : Headers (optional) The headers. default : Optional[bytes] An optional default value. Defaults to None. Returns \u00b6 Optional[bytes] : The method Description \u00b6 issuing a preflight request, to let the server know which HTTP method will be used when the actual request is made. This header is necessary as the preflight request is always an OPTIONS and doesn't use the same method as the actual request. function bareutils . age \u00b6 Summary \u00b6 The Age header contains the time in seconds the object has been in a bareutils . age ( headers : Headers , * , default : Optional[int] ) -> Optional[int] Parameters \u00b6 headers : Headers (optional) The headers. default : Optional[int] An optional default value. Defaults to None. Returns \u00b6 Optional[int] : The time in seconds. Description \u00b6 proxy cache. function bareutils . allow \u00b6 Summary \u00b6 The Allow header lists the set of methods supported by a resource. bareutils . allow ( headers : Headers , * , default : Optional[List[bytes]] ) -> Optional[List[bytes]] Parameters \u00b6 headers : Headers (optional) The headers. default : Optional[List[bytes]] An optional default value. Defaults to None. Returns \u00b6 Optional[List[bytes]] : A list of methods function bareutils . authorization \u00b6 Summary \u00b6 The HTTP Authorization request header contains the credentials to bareutils . authorization ( headers : Headers , * , default : Optional[Tuple[bytes ) -> Optional[Tuple[bytes, bytes]] Parameters \u00b6 headers : Headers (optional) The headers. default : Optional[Tuple[bytes An optional default value. Defaults to None. Returns \u00b6 Optional[Tuple[bytes, bytes]] : The type and credentials. Description \u00b6 authenticate a user agent with a server, usually after the server has responded with a 401 Unauthorized status and the WWW-Authenticate header. function bareutils . cache_control \u00b6 Summary \u00b6 The Cache-Control general-header field is used to specify directives for bareutils . cache_control ( headers : Headers , * , default : Optional[Mapping[bytes ) -> Optional[Mapping[bytes, Optional[int]]] Parameters \u00b6 headers : Headers (optional) The headers. default : Optional[Mapping[bytes An optional default value. Defaults to None. Returns \u00b6 Optional[Mapping[bytes, Optional[int]]] : A dictionary of the directives and values. Description \u00b6 caching mechanisms in both requests andresponses. Caching directives are unidirectional, meaning that a given directive in a request is not implying that the same directive is to be given in the response. function bareutils . clear_site_data \u00b6 Summary \u00b6 The Clear-Site-Data header clears browsing data (cookies, storage, cache) bareutils . clear_site_data ( headers : Headers , * , default : Optional[List[bytes]] ) -> Optional[List[bytes]] Parameters \u00b6 headers : Headers (optional) The headers. default : Optional[List[bytes]] An optional default value. Defaults to None. Returns \u00b6 Optional[List[bytes]] : A list of the directives. Description \u00b6 associated with the requesting website. It allows web developers to have more control over the data stored locally by a browser for their origins. function bareutils . collect \u00b6 Summary \u00b6 Collect all headers into a mapping bareutils . collect ( headers : Headers ) -> Mapping[bytes, Any] Parameters \u00b6 headers : Headers (optional) The headers Returns \u00b6 Mapping[bytes, Any] : A mapping of the parsed headers function bareutils . connection \u00b6 Summary \u00b6 The Connection general header controls whether or not the network bareutils . connection ( headers : Headers , * , default : Optional[bytes] ) -> Optional[bytes] Parameters \u00b6 headers : Headers (optional) The headers. default : Optional[bytes] An optional default value. Defaults to None. Returns \u00b6 Optional[bytes] : The value Description \u00b6 connection stays open after the current transaction finishes. If the value sent is keep-alive, the connection is persistent and not closed, allowing for subsequent requests to the same server to be done. function bareutils . content_disposition \u00b6 Summary \u00b6 Returns the content type if any otherwise None bareutils . content_disposition ( headers : Headers , * , default : Optional[Tuple[bytes ) -> Optional[Tuple[bytes, Optional[Mapping[bytes, bytes]]]] Parameters \u00b6 headers : Headers (optional) The headers. default : Optional[Tuple[bytes An optional default. Defaults to None. Returns \u00b6 Optional[Tuple[bytes, Optional[Mapping[bytes, bytes]]]] : A tuple of the media type and a mapping of the parameters. function bareutils . content_encoding \u00b6 Summary \u00b6 Returns the content encodings in a list or None if they were not bareutils . content_encoding ( headers : Headers , * , add_identity : bool , default : Optional[List[bytes]] ) -> Optional[List[bytes]] Parameters \u00b6 headers : Headers (optional) The headers. add_identity : bool If True ensures the 'identity' encoding is included. Defaults to False. default : Optional[List[bytes]] An optional default value. Defaults to None. Returns \u00b6 Optional[List[bytes]] : The list of content encodings. Description \u00b6 specified. function bareutils . content_language \u00b6 Summary \u00b6 The Content-Language entity header is used to describe the language(s) bareutils . content_language ( headers : Headers , * , default : Optional[List[bytes]] ) -> Optional[List[bytes]] Parameters \u00b6 headers : Headers (optional) The headers. default : Optional[List[bytes]] An optional default value. Defaults to None. Returns \u00b6 Optional[List[bytes]] : The language. Description \u00b6 intended for the audience, so that it allows a user to differentiate according to the users' own preferred language. function bareutils . content_length \u00b6 Summary \u00b6 [summary] bareutils . content_length ( headers : Headers , * , default : Optional[int] ) -> Optional[int] Parameters \u00b6 headers : Headers (optional) The headers. default : Optional[int] An optional default value. Defaults to None. Returns \u00b6 Optional[int] : The length as an integer, or the default. function bareutils . content_location \u00b6 Summary \u00b6 The Content-Location header indicates an alternate location for the bareutils . content_location ( headers : Headers , * , default : Optional[bytes] ) -> Optional[bytes] Parameters \u00b6 headers : Headers (optional) The headers. default : Optional[bytes] An optional default value. Defaults to None. Returns \u00b6 Optional[bytes] : The location, or the default. Description \u00b6 returned data. The principal use is to indicate the URL of a resource transmitted as the result of content negotiation. function bareutils . content_range \u00b6 Summary \u00b6 The Content-Range response HTTP header indicates where in a full body bareutils . content_range ( headers : Headers , * , default : Optional[Tuple[bytes ) -> Optional[Tuple[bytes, Optional[Tuple[int, int]], Optional[int]]] Parameters \u00b6 headers : Headers (optional) The headers. default : Optional[Tuple[bytes An optional default value. Defaults to None. Returns \u00b6 Optional[Tuple[bytes, Optional[Tuple[int, int]], Optional[int]]] : The content-range header if found, or the default. Description \u00b6 message a partial message belongs. function bareutils . content_security_policy \u00b6 Summary \u00b6 The HTTP Content-Security-Policy response header allows web site bareutils . content_security_policy ( headers : Headers , * , default : Optional[List[Tuple[bytes ) -> Optional[List[Tuple[bytes, List[bytes]]]] Parameters \u00b6 headers : Headers (optional) The headers default : Optional[List[Tuple[bytes An optional default. Defaults to None. Returns \u00b6 Optional[List[Tuple[bytes, List[bytes]]]] : The policy or the default. Description \u00b6 administrators to control resources the user agent is allowed to load for a given page. With a few exceptions, policies mostly involve specifying server origins and script endpoints. This helps guard against cross-site scripting attacks (XSS). function bareutils . content_security_policy_report_only \u00b6 Summary \u00b6 The HTTP Content-Security-Policy-Report-Only response header allows web bareutils . content_security_policy_report_only ( headers : Headers , * , default : Optional[List[Tuple[bytes ) -> Optional[List[Tuple[bytes, List[bytes]]]] Parameters \u00b6 headers : Headers (optional) The headers. default : Optional[List[Tuple[bytes An optional default value. Defaults to None. Returns \u00b6 Optional[List[Tuple[bytes, List[bytes]]]] : The policy, or the default. Description \u00b6 developers to experiment with policies by monitoring (but not enforcing) their effects. These violation reports consist of JSON documents sent via an HTTP POST request to the specified URI. function bareutils . content_type \u00b6 Summary \u00b6 Returns the content type if any otherwise None bareutils . content_type ( headers : Headers , * , default : Optional[Tuple[bytes ) -> Optional[Tuple[bytes, Optional[Mapping[bytes, bytes]]]] Parameters \u00b6 headers : Headers (optional) The headers default : Optional[Tuple[bytes An optional default value. Defaults to None. Returns \u00b6 Optional[Tuple[bytes, Optional[Mapping[bytes, bytes]]]] : A tuple of the media type and a mapping of the parameters or the default if absent. function bareutils . cookie \u00b6 Summary \u00b6 Returns the cookies as a name-value mapping. bareutils . cookie ( headers : Headers ) -> Mapping[bytes, List[bytes]] Parameters \u00b6 headers : Headers (optional) The headers. Returns \u00b6 Mapping[bytes, List[bytes]] : The cookies as a name-value mapping. function bareutils . cross_origin_resource_policy \u00b6 Summary \u00b6 The HTTP Cross-Origin-Resource-Policy response header conveys a desire bareutils . cross_origin_resource_policy ( headers : Headers , * , default : Optional[bytes] ) -> Optional[bytes] Parameters \u00b6 headers : Headers (optional) The headers. default : Optional[bytes] An optional default value. Defaults to None. Returns \u00b6 Optional[bytes] : The policy if present or the default. Description \u00b6 that the browser blocks no-cors cross-origin/cross-site requests to the given resource. function bareutils . date \u00b6 Summary \u00b6 The Date general HTTP header contains the date and time at which the bareutils . date ( headers : Headers , * , default : Optional[datetime] ) -> Optional[datetime] Parameters \u00b6 headers : Headers (optional) The headers. default : Optional[datetime] An optional default value. Defaults to None. Returns \u00b6 Optional[datetime] : The date and time at which the message was originated Description \u00b6 message was originated. function bareutils . device_memory \u00b6 Summary \u00b6 The Device-Memory header is a Device Memory API header that works like bareutils . device_memory ( headers : Headers , * , default : Optional[float] ) -> Optional[float] Parameters \u00b6 headers : Headers (optional) The headers default : Optional[float] An optional default value. Defaults to None. Returns \u00b6 Optional[float] : The device memory Description \u00b6 Client Hints header which represents the approximate amount of RAM client device has. function bareutils . dnt \u00b6 Summary \u00b6 The DNT (Do Not Track) request header indicates the user's tracking bareutils . dnt ( headers : Headers , * , default : Optional[int] ) -> Optional[int] Parameters \u00b6 headers : Headers (optional) The headers. default : Optional[int] An optional default value. Defaults to None. Returns \u00b6 Optional[int] : 0 for allow tracking, 1 for deny tracking or the default. Description \u00b6 preference. It lets users indicate whether they would prefer privacy rather than personalized content. function bareutils . dpr \u00b6 Summary \u00b6 The DPR header is a Client Hints headers which represents the client bareutils . dpr ( headers : Headers , * , default : Optional[float] ) -> Optional[float] Parameters \u00b6 headers : Headers (optional) The headers. default : Optional[float] An optional default value. Defaults to None. Returns \u00b6 Optional[float] : The device pixel ratio if present, or the default value. Description \u00b6 device pixel ratio (DPR), which is the the number of physical device pixels corresponding to every CSS pixel. function bareutils . expect \u00b6 Summary \u00b6 Returns the expect header bareutils . expect ( headers : Headers , * , default : Optional[bytes] ) -> Optional[bytes] Parameters \u00b6 headers : Headers (optional) The headers. default : Optional[bytes] An optional default value. Defaults to None. Returns \u00b6 Optional[bytes] : The expect directive if present, or the default value. function bareutils . expires \u00b6 Summary \u00b6 The Expires header contains the date/time after which the response is bareutils . expires ( headers : Headers , * , default : Optional[datetime] ) -> Optional[datetime] Parameters \u00b6 headers : Headers (optional) The headers. default : Optional[datetime] An optional default value. Defaults to None. Returns \u00b6 Optional[datetime] : The date/time after which the response is considered stale, or the default value. Description \u00b6 considered stale. function bareutils . find \u00b6 Summary \u00b6 Find the value of a header, or return a default value. bareutils . find ( name : bytes , headers : Headers , default : Optional[bytes] ) -> Optional[bytes] Parameters \u00b6 name : bytes (optional) The header name. headers : Headers (optional) The headers to search. default : Optional[bytes] An optional default value. Defaults to None. Returns \u00b6 Optional[bytes] : The value of the header if found, otherwise the default value. function bareutils . find_all \u00b6 Summary \u00b6 Find all the values for a given header. bareutils . find_all ( name : bytes , headers : Headers ) -> List[bytes] Parameters \u00b6 name : bytes (optional) The header name. headers : Headers (optional) The headers to search. Returns \u00b6 List[bytes] : A list of the header values which may be empty if there were none found. function bareutils . find_date \u00b6 Summary \u00b6 Find a header containing a date. bareutils . find_date ( name : bytes , headers : Headers , * , default : Optional[datetime] ) -> Optional[datetime] Parameters \u00b6 name : bytes (optional) The name of the header. headers : Headers (optional) The headers. default : Optional[datetime] The headers, Defaults to None. Returns \u00b6 Optional[datetime] : The date if found, otherwise the default value. function bareutils . host \u00b6 Summary \u00b6 Returns the host header as a name, port tuple bareutils . host ( headers : Headers , * , default : Optional[Tuple[bytes ) -> Optional[Tuple[bytes, Optional[int]]] Parameters \u00b6 headers : Headers (optional) The headers. default : Optional[Tuple[bytes An optional default value. Defaults to None. Returns \u00b6 Optional[Tuple[bytes, Optional[int]]] : The host as a name, port tuple. function bareutils . if_modified_since \u00b6 Summary \u00b6 The If-Modified-Since request HTTP header makes the request conditional: bareutils . if_modified_since ( headers : Headers , * , default : Optional[datetime] ) -> Optional[datetime] Parameters \u00b6 headers : Headers (optional) The headers default : Optional[datetime] [description]. Defaults to None. Returns \u00b6 Optional[datetime] : The timestamp if present, otherwise the default value. Description \u00b6 the server will send back the requested resource, with a 200 status, only if it has been last modified after the given date. If the request has not been modified since, the response will be a 304 without any body; the Last-Modified response header of a previous request will contain the date of last modification. Unlike If-Unmodified-Since, If-Modified-Since can only be used with a GET or HEAD. function bareutils . index \u00b6 Summary \u00b6 Find the index of the header in the list. bareutils . index ( name : bytes , headers : Headers ) -> int Parameters \u00b6 name : bytes (optional) The header name. headers : Headers (optional) The headers to search. Returns \u00b6 int : The index of the header or -1 if not found. function bareutils . last_modified \u00b6 Summary \u00b6 The Last-Modified response HTTP header contains the date and time at bareutils . last_modified ( headers : Headers , * , default : Optional[datetime] ) -> Optional[datetime] Parameters \u00b6 headers : Headers (optional) The headers. default : Optional[datetime] An optional default value. Defaults to None. Returns \u00b6 Optional[datetime] : The timestamp if present, otherwise the default value. Description \u00b6 which the origin server believes the resource was last modified. It is used as a validator to determine if a resource received or stored is the same. Less accurate than an ETag header, it is a fallback mechanism. Conditional requests containing If-Modified-Since or If-Unmodified-Since headers make use of this field. function bareutils . location \u00b6 Summary \u00b6 The Location response header indicates the URL to redirect a page to. It bareutils . location ( headers : Headers , * , default : Optional[bytes] ) -> Optional[bytes] Parameters \u00b6 headers : Headers (optional) The headers. default : Optional[bytes] An optional default value. Defaults to None. Returns \u00b6 Optional[bytes] : The redirect location Description \u00b6 only provides a meaning when served with a 3xx (redirection) or 201 (created) status response. function bareutils . origin \u00b6 Summary \u00b6 The Origin request header indicates where a fetch originates from. It bareutils . origin ( headers : Headers , * , default : Optional[bytes] ) -> Optional[bytes] Parameters \u00b6 headers : Headers (optional) The headers. default : Optional[bytes] An optional default value. Defaults to None. Returns \u00b6 Optional[bytes] : The origin if present, otherwise the default value. Description \u00b6 doesn't include any path information, but only the server name. It is sent with CORS requests, as well as with POST requests. It is similar to the Referer header, but, unlike this header, it doesn't disclose the whole path. function bareutils . referer \u00b6 Summary \u00b6 The Referer request header contains the address of the previous web page bareutils . referer ( headers : Headers , * , default : Optional[bytes] ) -> Optional[bytes] Parameters \u00b6 headers : Headers (optional) The headers. default : Optional[bytes] An optional default value. Defaults to None. Returns \u00b6 Optional[bytes] : The referer if present; otherwise the default value. Description \u00b6 from which a link to the currently requested page was followed. The Referer header allows servers to identify where people are visiting them from and may use that data for analytics, logging, or optimized caching, for example. function bareutils . server \u00b6 Summary \u00b6 The Server header contains information about the software used by the bareutils . server ( headers : Headers , * , default : Optional[bytes] ) -> Optional[bytes] Parameters \u00b6 headers : Headers (optional) The headers. default : Optional[bytes] An optional default value. Defaults to None. Returns \u00b6 Optional[bytes] : The product directive Description \u00b6 origin server to handle the request. function bareutils . set_cookie \u00b6 Summary \u00b6 Returns the cookies as a name-value mapping. bareutils . set_cookie ( headers : Headers ) -> Mapping[bytes, List[Mapping[str, Any]]] Parameters \u00b6 headers : Headers (optional) The headers. Returns \u00b6 Mapping[bytes, List[Mapping[str, Any]]] : The cookies as a name-value mapping. function bareutils . to_dict \u00b6 Summary \u00b6 Convert a list of headers into a dictionary where the key is the header bareutils . to_dict ( headers : Headers ) -> MutableMapping[bytes, List[bytes]] Parameters \u00b6 headers : Headers (optional) A list of headers. Returns \u00b6 MutableMapping[bytes, List[bytes]] : A dictionary where the key is the header name and the value is a list of the values of the headers for that name Description \u00b6 name and the value is a list of the values of the headers for that name function bareutils . upsert \u00b6 Summary \u00b6 If the header exists overwrite the value, otherwise append a new value. bareutils . upsert ( name : bytes , value : bytes , headers : Headers ) -> Any Parameters \u00b6 name : bytes (optional) The header name. value : bytes (optional) The header value. headers : Headers (optional) The headers. Returns \u00b6 Any : function bareutils . vary \u00b6 Summary \u00b6 Returns the vary header value as a list of headers. bareutils . vary ( headers : ListTuple[bytes, bytes]] , * , default : Optional[List[bytes]] ) -> Optional[List[bytes]] Parameters \u00b6 headers : ListTuple[bytes, bytes]] (optional) default : Optional[List[bytes]] An optional default value. Defaults to None. Returns \u00b6 Optional[List[bytes]] : A list of the vary headers if present; otherwise the default value.","title":"bareutils.header"},{"location":"api/bareutils.header/#module-bareutilsheader","text":"","title":"module bareutils.header"},{"location":"api/bareutils.header/#summary","text":"Header utilities","title":"Summary"},{"location":"api/bareutils.header/#description","text":"A collection of functions to extract headers from the ASGI scope.","title":"Description"},{"location":"api/bareutils.header/#function-bareutilsaccept","text":"","title":"function bareutils.accept"},{"location":"api/bareutils.header/#summary_1","text":"Returns the accept header if it exists. bareutils . accept ( headers : Headers , * , add_wildcard : bool , default : Optional[Mapping[bytes ) -> Optional[Mapping[bytes, Tuple[bytes, Any]]]","title":"Summary"},{"location":"api/bareutils.header/#parameters","text":"headers : Headers (optional) The headers add_wildcard : bool If true add the implicit wildcard '*'. Defaults to False. default : Optional[Mapping[bytes An optional default. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns","text":"Optional[Mapping[bytes, Tuple[bytes, Any]]] : A dictionary where the key is media type and the value is quality.","title":"Returns"},{"location":"api/bareutils.header/#description_1","text":"Where quality is not given it defaults to 1.0. >>> accept ([( b 'accept' , b 'text/html, application/xhtml+xml, application/xml;q=0.9, / ;q=0.8' )]) { b 'text/html' : 1.0 , b 'application/xhtml+xml' : 1.0 , b 'application/xml' : 0.9 , b ' / ' : 0.8 }","title":"Description"},{"location":"api/bareutils.header/#function-bareutilsaccept_ch","text":"","title":"function bareutils.accept_ch"},{"location":"api/bareutils.header/#summary_2","text":"The Accept-CH header is set by the server to specify which Client Hints bareutils . accept_ch ( headers : Headers , * , default : Optional[Mapping[bytes ) -> Optional[List[bytes]]","title":"Summary"},{"location":"api/bareutils.header/#parameters_1","text":"headers : Headers (optional) The headers default : Optional[Mapping[bytes An optional default. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_1","text":"Optional[List[bytes]] : The client hints","title":"Returns"},{"location":"api/bareutils.header/#description_2","text":"headers client should include in subsequent requests.","title":"Description"},{"location":"api/bareutils.header/#function-bareutilsaccept_ch_lifetime","text":"","title":"function bareutils.accept_ch_lifetime"},{"location":"api/bareutils.header/#summary_3","text":"The Accept-CH-Lifetime header is set by the server to specify the bareutils . accept_ch_lifetime ( headers : Headers , * , default : Optional[Mapping[bytes ) -> Optional[int]","title":"Summary"},{"location":"api/bareutils.header/#parameters_2","text":"headers : Headers (optional) The headers default : Optional[Mapping[bytes An optional default. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_2","text":"Optional[int] : The lifetime in seconds","title":"Returns"},{"location":"api/bareutils.header/#description_3","text":"persistence of Accept-CH header value that specifies for which Client Hints headers client should include in subsequent requests.","title":"Description"},{"location":"api/bareutils.header/#function-bareutilsaccept_charset","text":"","title":"function bareutils.accept_charset"},{"location":"api/bareutils.header/#summary_4","text":"Extracts the accept encoding header if it exists into a mapping of the bareutils . accept_charset ( headers : Headers , * , add_wildcard : bool , default : Optional[Mapping[bytes ) -> Optional[Mapping[bytes, float]]","title":"Summary"},{"location":"api/bareutils.header/#parameters_3","text":"headers : Headers (optional) The headers add_wildcard : bool If True ensures the '*' charset is included. Defaults to False. default : Optional[Mapping[bytes An optional default. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_3","text":"Optional[Mapping[bytes, float]] : A mapping of the encodings and qualities.","title":"Returns"},{"location":"api/bareutils.header/#description_4","text":"encoding and the quality value which defaults to 1.0 if missing.","title":"Description"},{"location":"api/bareutils.header/#function-bareutilsaccept_encoding","text":"","title":"function bareutils.accept_encoding"},{"location":"api/bareutils.header/#summary_5","text":"Extracts the accept encoding header if it exists into a mapping of the encoding bareutils . accept_encoding ( headers : Headers , * , add_identity : bool , default : Optional[Mapping[bytes ) -> Optional[Mapping[bytes, float]]","title":"Summary"},{"location":"api/bareutils.header/#parameters_4","text":"headers : Headers (optional) The headers to search. add_identity : bool If True ensures the 'identity' encoding is included.. Defaults to False. default : Optional[Mapping[bytes An optional default. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_4","text":"Optional[Mapping[bytes, float]] : A mapping of the encodings and qualities.","title":"Returns"},{"location":"api/bareutils.header/#description_5","text":"and the quality value which defaults to 1.0 if missing.","title":"Description"},{"location":"api/bareutils.header/#function-bareutilsaccept_language","text":"","title":"function bareutils.accept_language"},{"location":"api/bareutils.header/#summary_6","text":"Extracts the accept language header if it exists into a mapping of the bareutils . accept_language ( headers : Headers , * , add_wildcard : bool , default : Optional[Mapping[bytes ) -> Optional[Mapping[bytes, float]]","title":"Summary"},{"location":"api/bareutils.header/#parameters_5","text":"headers : Headers (optional) The headers to search. add_wildcard : bool If True ensures the '*' charset is included. Defaults to False. default : Optional[Mapping[bytes [description]. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_5","text":"Optional[Mapping[bytes, float]] : A mapping of the encodings and qualities.","title":"Returns"},{"location":"api/bareutils.header/#description_6","text":"encoding and the quality value which defaults to 1.0 if missing.","title":"Description"},{"location":"api/bareutils.header/#function-bareutilsaccept_patch","text":"","title":"function bareutils.accept_patch"},{"location":"api/bareutils.header/#summary_7","text":"The Accept-Patch response HTTP header advertises which media-type the bareutils . accept_patch ( headers : Headers , * , default : Optional[List[Tuple[bytes ) -> Optional[List[Tuple[bytes, Optional[bytes]]]]","title":"Summary"},{"location":"api/bareutils.header/#parameters_6","text":"headers : Headers (optional) The headers to search. default : Optional[List[Tuple[bytes An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_6","text":"Optional[List[Tuple[bytes, Optional[bytes]]]] : A list of tuples of media type and optional charset.","title":"Returns"},{"location":"api/bareutils.header/#description_7","text":"server is able to understand.","title":"Description"},{"location":"api/bareutils.header/#function-bareutilsaccept_ranges","text":"","title":"function bareutils.accept_ranges"},{"location":"api/bareutils.header/#summary_8","text":"Returns the value of the accept ranges header of None if missing bareutils . accept_ranges ( headers : Headers , * , default : Optional[bytes] ) -> Optional[bytes]","title":"Summary"},{"location":"api/bareutils.header/#parameters_7","text":"headers : Headers (optional) The headers default : Optional[bytes] An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_7","text":"Optional[bytes] : The header value (bytes or none)","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilsaccess_control_allow_credentials","text":"","title":"function bareutils.access_control_allow_credentials"},{"location":"api/bareutils.header/#summary_9","text":"Extracts the access control allow credentials header as a bool or None if bareutils . access_control_allow_credentials ( headers : Headers , * , default : Optional[bool] ) -> Optional[bool]","title":"Summary"},{"location":"api/bareutils.header/#parameters_8","text":"headers : Headers (optional) The headers. default : Optional[bool] An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_8","text":"Optional[bool] : A bool or None","title":"Returns"},{"location":"api/bareutils.header/#description_8","text":"missing.","title":"Description"},{"location":"api/bareutils.header/#function-bareutilsaccess_control_allow_headers","text":"","title":"function bareutils.access_control_allow_headers"},{"location":"api/bareutils.header/#summary_10","text":"The Access-Control-Allow-Headers response header is used in response to bareutils . access_control_allow_headers ( headers : Headers , * , default : Optional[List[bytes]] ) -> Optional[List[bytes]]","title":"Summary"},{"location":"api/bareutils.header/#parameters_9","text":"headers : Headers (optional) The headers. default : Optional[List[bytes]] An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_9","text":"Optional[List[bytes]] : A list of the allowed headers or '*' for all headers.","title":"Returns"},{"location":"api/bareutils.header/#description_9","text":"a preflight request which includes the Access-Control-Request-Headers to indicate which HTTP headers can be used during the actual request.","title":"Description"},{"location":"api/bareutils.header/#function-bareutilsaccess_control_allow_methods","text":"","title":"function bareutils.access_control_allow_methods"},{"location":"api/bareutils.header/#summary_11","text":"The Access-Control-Allow-Methods response header specifies the method or bareutils . access_control_allow_methods ( headers : Headers , * , default : Optional[List[bytes]] ) -> Optional[List[bytes]]","title":"Summary"},{"location":"api/bareutils.header/#parameters_10","text":"headers : Headers (optional) The headers. default : Optional[List[bytes]] An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_10","text":"Optional[List[bytes]] : A list of the allowed methods, or '*' for all methods.","title":"Returns"},{"location":"api/bareutils.header/#description_10","text":"methods allowed when accessing the resource in response to a preflight request.","title":"Description"},{"location":"api/bareutils.header/#function-bareutilsaccess_control_allow_origin","text":"","title":"function bareutils.access_control_allow_origin"},{"location":"api/bareutils.header/#summary_12","text":"The Access-Control-Allow-Origin response header indicates whether the bareutils . access_control_allow_origin ( headers : Headers , * , default : Optional[List[bytes]] ) -> Optional[bytes]","title":"Summary"},{"location":"api/bareutils.header/#parameters_11","text":"headers : Headers (optional) The headers. default : Optional[List[bytes]] An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_11","text":"Optional[bytes] : The origin or '*' for all origins, or 'null'","title":"Returns"},{"location":"api/bareutils.header/#description_11","text":"response can be shared with requesting code from the given origin.","title":"Description"},{"location":"api/bareutils.header/#function-bareutilsaccess_control_expose_headers","text":"","title":"function bareutils.access_control_expose_headers"},{"location":"api/bareutils.header/#summary_13","text":"[summary] bareutils . access_control_expose_headers ( headers : Headers , * , add_simple_response_headers : bool , default : Optional[List[bytes]] ) -> Optional[List[bytes]]","title":"Summary"},{"location":"api/bareutils.header/#parameters_12","text":"headers : Headers (optional) The headers. add_simple_response_headers : bool If true add the safelisted headers. Defaults to False. default : Optional[List[bytes]] An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_12","text":"Optional[List[bytes]] : The headers to expose.","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilsaccess_control_max_age","text":"","title":"function bareutils.access_control_max_age"},{"location":"api/bareutils.header/#summary_14","text":"The Access-Control-Max-Age response header indicates how long the results bareutils . access_control_max_age ( headers : Headers , * , default : Optional[int] ) -> Optional[int]","title":"Summary"},{"location":"api/bareutils.header/#parameters_13","text":"headers : Headers (optional) The headers default : Optional[int] An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_13","text":"Optional[int] : The number of seconds","title":"Returns"},{"location":"api/bareutils.header/#description_12","text":"of a preflight request (that is the information contained in the Access-Control-Allow-Methods and Access-Control-Allow-Headers headers) can be cached.","title":"Description"},{"location":"api/bareutils.header/#function-bareutilsaccess_control_request_headers","text":"","title":"function bareutils.access_control_request_headers"},{"location":"api/bareutils.header/#summary_15","text":"The Access-Control-Request-Headers request header is used by browsers bareutils . access_control_request_headers ( headers : Headers , * , default : Optional[List[bytes]] ) -> Optional[List[bytes]]","title":"Summary"},{"location":"api/bareutils.header/#parameters_14","text":"headers : Headers (optional) The headers default : Optional[List[bytes]] An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_14","text":"Optional[List[bytes]] : The request headers","title":"Returns"},{"location":"api/bareutils.header/#description_13","text":"when issuing a preflight request, to let the server know which HTTP headers the client might send when the actual request is made.","title":"Description"},{"location":"api/bareutils.header/#function-bareutilsaccess_control_request_method","text":"","title":"function bareutils.access_control_request_method"},{"location":"api/bareutils.header/#summary_16","text":"The Access-Control-Request-Method request header is used by browsers when bareutils . access_control_request_method ( headers : Headers , * , default : Optional[bytes] ) -> Optional[bytes]","title":"Summary"},{"location":"api/bareutils.header/#parameters_15","text":"headers : Headers (optional) The headers. default : Optional[bytes] An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_15","text":"Optional[bytes] : The method","title":"Returns"},{"location":"api/bareutils.header/#description_14","text":"issuing a preflight request, to let the server know which HTTP method will be used when the actual request is made. This header is necessary as the preflight request is always an OPTIONS and doesn't use the same method as the actual request.","title":"Description"},{"location":"api/bareutils.header/#function-bareutilsage","text":"","title":"function bareutils.age"},{"location":"api/bareutils.header/#summary_17","text":"The Age header contains the time in seconds the object has been in a bareutils . age ( headers : Headers , * , default : Optional[int] ) -> Optional[int]","title":"Summary"},{"location":"api/bareutils.header/#parameters_16","text":"headers : Headers (optional) The headers. default : Optional[int] An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_16","text":"Optional[int] : The time in seconds.","title":"Returns"},{"location":"api/bareutils.header/#description_15","text":"proxy cache.","title":"Description"},{"location":"api/bareutils.header/#function-bareutilsallow","text":"","title":"function bareutils.allow"},{"location":"api/bareutils.header/#summary_18","text":"The Allow header lists the set of methods supported by a resource. bareutils . allow ( headers : Headers , * , default : Optional[List[bytes]] ) -> Optional[List[bytes]]","title":"Summary"},{"location":"api/bareutils.header/#parameters_17","text":"headers : Headers (optional) The headers. default : Optional[List[bytes]] An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_17","text":"Optional[List[bytes]] : A list of methods","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilsauthorization","text":"","title":"function bareutils.authorization"},{"location":"api/bareutils.header/#summary_19","text":"The HTTP Authorization request header contains the credentials to bareutils . authorization ( headers : Headers , * , default : Optional[Tuple[bytes ) -> Optional[Tuple[bytes, bytes]]","title":"Summary"},{"location":"api/bareutils.header/#parameters_18","text":"headers : Headers (optional) The headers. default : Optional[Tuple[bytes An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_18","text":"Optional[Tuple[bytes, bytes]] : The type and credentials.","title":"Returns"},{"location":"api/bareutils.header/#description_16","text":"authenticate a user agent with a server, usually after the server has responded with a 401 Unauthorized status and the WWW-Authenticate header.","title":"Description"},{"location":"api/bareutils.header/#function-bareutilscache_control","text":"","title":"function bareutils.cache_control"},{"location":"api/bareutils.header/#summary_20","text":"The Cache-Control general-header field is used to specify directives for bareutils . cache_control ( headers : Headers , * , default : Optional[Mapping[bytes ) -> Optional[Mapping[bytes, Optional[int]]]","title":"Summary"},{"location":"api/bareutils.header/#parameters_19","text":"headers : Headers (optional) The headers. default : Optional[Mapping[bytes An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_19","text":"Optional[Mapping[bytes, Optional[int]]] : A dictionary of the directives and values.","title":"Returns"},{"location":"api/bareutils.header/#description_17","text":"caching mechanisms in both requests andresponses. Caching directives are unidirectional, meaning that a given directive in a request is not implying that the same directive is to be given in the response.","title":"Description"},{"location":"api/bareutils.header/#function-bareutilsclear_site_data","text":"","title":"function bareutils.clear_site_data"},{"location":"api/bareutils.header/#summary_21","text":"The Clear-Site-Data header clears browsing data (cookies, storage, cache) bareutils . clear_site_data ( headers : Headers , * , default : Optional[List[bytes]] ) -> Optional[List[bytes]]","title":"Summary"},{"location":"api/bareutils.header/#parameters_20","text":"headers : Headers (optional) The headers. default : Optional[List[bytes]] An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_20","text":"Optional[List[bytes]] : A list of the directives.","title":"Returns"},{"location":"api/bareutils.header/#description_18","text":"associated with the requesting website. It allows web developers to have more control over the data stored locally by a browser for their origins.","title":"Description"},{"location":"api/bareutils.header/#function-bareutilscollect","text":"","title":"function bareutils.collect"},{"location":"api/bareutils.header/#summary_22","text":"Collect all headers into a mapping bareutils . collect ( headers : Headers ) -> Mapping[bytes, Any]","title":"Summary"},{"location":"api/bareutils.header/#parameters_21","text":"headers : Headers (optional) The headers","title":"Parameters"},{"location":"api/bareutils.header/#returns_21","text":"Mapping[bytes, Any] : A mapping of the parsed headers","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilsconnection","text":"","title":"function bareutils.connection"},{"location":"api/bareutils.header/#summary_23","text":"The Connection general header controls whether or not the network bareutils . connection ( headers : Headers , * , default : Optional[bytes] ) -> Optional[bytes]","title":"Summary"},{"location":"api/bareutils.header/#parameters_22","text":"headers : Headers (optional) The headers. default : Optional[bytes] An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_22","text":"Optional[bytes] : The value","title":"Returns"},{"location":"api/bareutils.header/#description_19","text":"connection stays open after the current transaction finishes. If the value sent is keep-alive, the connection is persistent and not closed, allowing for subsequent requests to the same server to be done.","title":"Description"},{"location":"api/bareutils.header/#function-bareutilscontent_disposition","text":"","title":"function bareutils.content_disposition"},{"location":"api/bareutils.header/#summary_24","text":"Returns the content type if any otherwise None bareutils . content_disposition ( headers : Headers , * , default : Optional[Tuple[bytes ) -> Optional[Tuple[bytes, Optional[Mapping[bytes, bytes]]]]","title":"Summary"},{"location":"api/bareutils.header/#parameters_23","text":"headers : Headers (optional) The headers. default : Optional[Tuple[bytes An optional default. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_23","text":"Optional[Tuple[bytes, Optional[Mapping[bytes, bytes]]]] : A tuple of the media type and a mapping of the parameters.","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilscontent_encoding","text":"","title":"function bareutils.content_encoding"},{"location":"api/bareutils.header/#summary_25","text":"Returns the content encodings in a list or None if they were not bareutils . content_encoding ( headers : Headers , * , add_identity : bool , default : Optional[List[bytes]] ) -> Optional[List[bytes]]","title":"Summary"},{"location":"api/bareutils.header/#parameters_24","text":"headers : Headers (optional) The headers. add_identity : bool If True ensures the 'identity' encoding is included. Defaults to False. default : Optional[List[bytes]] An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_24","text":"Optional[List[bytes]] : The list of content encodings.","title":"Returns"},{"location":"api/bareutils.header/#description_20","text":"specified.","title":"Description"},{"location":"api/bareutils.header/#function-bareutilscontent_language","text":"","title":"function bareutils.content_language"},{"location":"api/bareutils.header/#summary_26","text":"The Content-Language entity header is used to describe the language(s) bareutils . content_language ( headers : Headers , * , default : Optional[List[bytes]] ) -> Optional[List[bytes]]","title":"Summary"},{"location":"api/bareutils.header/#parameters_25","text":"headers : Headers (optional) The headers. default : Optional[List[bytes]] An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_25","text":"Optional[List[bytes]] : The language.","title":"Returns"},{"location":"api/bareutils.header/#description_21","text":"intended for the audience, so that it allows a user to differentiate according to the users' own preferred language.","title":"Description"},{"location":"api/bareutils.header/#function-bareutilscontent_length","text":"","title":"function bareutils.content_length"},{"location":"api/bareutils.header/#summary_27","text":"[summary] bareutils . content_length ( headers : Headers , * , default : Optional[int] ) -> Optional[int]","title":"Summary"},{"location":"api/bareutils.header/#parameters_26","text":"headers : Headers (optional) The headers. default : Optional[int] An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_26","text":"Optional[int] : The length as an integer, or the default.","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilscontent_location","text":"","title":"function bareutils.content_location"},{"location":"api/bareutils.header/#summary_28","text":"The Content-Location header indicates an alternate location for the bareutils . content_location ( headers : Headers , * , default : Optional[bytes] ) -> Optional[bytes]","title":"Summary"},{"location":"api/bareutils.header/#parameters_27","text":"headers : Headers (optional) The headers. default : Optional[bytes] An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_27","text":"Optional[bytes] : The location, or the default.","title":"Returns"},{"location":"api/bareutils.header/#description_22","text":"returned data. The principal use is to indicate the URL of a resource transmitted as the result of content negotiation.","title":"Description"},{"location":"api/bareutils.header/#function-bareutilscontent_range","text":"","title":"function bareutils.content_range"},{"location":"api/bareutils.header/#summary_29","text":"The Content-Range response HTTP header indicates where in a full body bareutils . content_range ( headers : Headers , * , default : Optional[Tuple[bytes ) -> Optional[Tuple[bytes, Optional[Tuple[int, int]], Optional[int]]]","title":"Summary"},{"location":"api/bareutils.header/#parameters_28","text":"headers : Headers (optional) The headers. default : Optional[Tuple[bytes An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_28","text":"Optional[Tuple[bytes, Optional[Tuple[int, int]], Optional[int]]] : The content-range header if found, or the default.","title":"Returns"},{"location":"api/bareutils.header/#description_23","text":"message a partial message belongs.","title":"Description"},{"location":"api/bareutils.header/#function-bareutilscontent_security_policy","text":"","title":"function bareutils.content_security_policy"},{"location":"api/bareutils.header/#summary_30","text":"The HTTP Content-Security-Policy response header allows web site bareutils . content_security_policy ( headers : Headers , * , default : Optional[List[Tuple[bytes ) -> Optional[List[Tuple[bytes, List[bytes]]]]","title":"Summary"},{"location":"api/bareutils.header/#parameters_29","text":"headers : Headers (optional) The headers default : Optional[List[Tuple[bytes An optional default. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_29","text":"Optional[List[Tuple[bytes, List[bytes]]]] : The policy or the default.","title":"Returns"},{"location":"api/bareutils.header/#description_24","text":"administrators to control resources the user agent is allowed to load for a given page. With a few exceptions, policies mostly involve specifying server origins and script endpoints. This helps guard against cross-site scripting attacks (XSS).","title":"Description"},{"location":"api/bareutils.header/#function-bareutilscontent_security_policy_report_only","text":"","title":"function bareutils.content_security_policy_report_only"},{"location":"api/bareutils.header/#summary_31","text":"The HTTP Content-Security-Policy-Report-Only response header allows web bareutils . content_security_policy_report_only ( headers : Headers , * , default : Optional[List[Tuple[bytes ) -> Optional[List[Tuple[bytes, List[bytes]]]]","title":"Summary"},{"location":"api/bareutils.header/#parameters_30","text":"headers : Headers (optional) The headers. default : Optional[List[Tuple[bytes An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_30","text":"Optional[List[Tuple[bytes, List[bytes]]]] : The policy, or the default.","title":"Returns"},{"location":"api/bareutils.header/#description_25","text":"developers to experiment with policies by monitoring (but not enforcing) their effects. These violation reports consist of JSON documents sent via an HTTP POST request to the specified URI.","title":"Description"},{"location":"api/bareutils.header/#function-bareutilscontent_type","text":"","title":"function bareutils.content_type"},{"location":"api/bareutils.header/#summary_32","text":"Returns the content type if any otherwise None bareutils . content_type ( headers : Headers , * , default : Optional[Tuple[bytes ) -> Optional[Tuple[bytes, Optional[Mapping[bytes, bytes]]]]","title":"Summary"},{"location":"api/bareutils.header/#parameters_31","text":"headers : Headers (optional) The headers default : Optional[Tuple[bytes An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_31","text":"Optional[Tuple[bytes, Optional[Mapping[bytes, bytes]]]] : A tuple of the media type and a mapping of the parameters or the default if absent.","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilscookie","text":"","title":"function bareutils.cookie"},{"location":"api/bareutils.header/#summary_33","text":"Returns the cookies as a name-value mapping. bareutils . cookie ( headers : Headers ) -> Mapping[bytes, List[bytes]]","title":"Summary"},{"location":"api/bareutils.header/#parameters_32","text":"headers : Headers (optional) The headers.","title":"Parameters"},{"location":"api/bareutils.header/#returns_32","text":"Mapping[bytes, List[bytes]] : The cookies as a name-value mapping.","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilscross_origin_resource_policy","text":"","title":"function bareutils.cross_origin_resource_policy"},{"location":"api/bareutils.header/#summary_34","text":"The HTTP Cross-Origin-Resource-Policy response header conveys a desire bareutils . cross_origin_resource_policy ( headers : Headers , * , default : Optional[bytes] ) -> Optional[bytes]","title":"Summary"},{"location":"api/bareutils.header/#parameters_33","text":"headers : Headers (optional) The headers. default : Optional[bytes] An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_33","text":"Optional[bytes] : The policy if present or the default.","title":"Returns"},{"location":"api/bareutils.header/#description_26","text":"that the browser blocks no-cors cross-origin/cross-site requests to the given resource.","title":"Description"},{"location":"api/bareutils.header/#function-bareutilsdate","text":"","title":"function bareutils.date"},{"location":"api/bareutils.header/#summary_35","text":"The Date general HTTP header contains the date and time at which the bareutils . date ( headers : Headers , * , default : Optional[datetime] ) -> Optional[datetime]","title":"Summary"},{"location":"api/bareutils.header/#parameters_34","text":"headers : Headers (optional) The headers. default : Optional[datetime] An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_34","text":"Optional[datetime] : The date and time at which the message was originated","title":"Returns"},{"location":"api/bareutils.header/#description_27","text":"message was originated.","title":"Description"},{"location":"api/bareutils.header/#function-bareutilsdevice_memory","text":"","title":"function bareutils.device_memory"},{"location":"api/bareutils.header/#summary_36","text":"The Device-Memory header is a Device Memory API header that works like bareutils . device_memory ( headers : Headers , * , default : Optional[float] ) -> Optional[float]","title":"Summary"},{"location":"api/bareutils.header/#parameters_35","text":"headers : Headers (optional) The headers default : Optional[float] An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_35","text":"Optional[float] : The device memory","title":"Returns"},{"location":"api/bareutils.header/#description_28","text":"Client Hints header which represents the approximate amount of RAM client device has.","title":"Description"},{"location":"api/bareutils.header/#function-bareutilsdnt","text":"","title":"function bareutils.dnt"},{"location":"api/bareutils.header/#summary_37","text":"The DNT (Do Not Track) request header indicates the user's tracking bareutils . dnt ( headers : Headers , * , default : Optional[int] ) -> Optional[int]","title":"Summary"},{"location":"api/bareutils.header/#parameters_36","text":"headers : Headers (optional) The headers. default : Optional[int] An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_36","text":"Optional[int] : 0 for allow tracking, 1 for deny tracking or the default.","title":"Returns"},{"location":"api/bareutils.header/#description_29","text":"preference. It lets users indicate whether they would prefer privacy rather than personalized content.","title":"Description"},{"location":"api/bareutils.header/#function-bareutilsdpr","text":"","title":"function bareutils.dpr"},{"location":"api/bareutils.header/#summary_38","text":"The DPR header is a Client Hints headers which represents the client bareutils . dpr ( headers : Headers , * , default : Optional[float] ) -> Optional[float]","title":"Summary"},{"location":"api/bareutils.header/#parameters_37","text":"headers : Headers (optional) The headers. default : Optional[float] An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_37","text":"Optional[float] : The device pixel ratio if present, or the default value.","title":"Returns"},{"location":"api/bareutils.header/#description_30","text":"device pixel ratio (DPR), which is the the number of physical device pixels corresponding to every CSS pixel.","title":"Description"},{"location":"api/bareutils.header/#function-bareutilsexpect","text":"","title":"function bareutils.expect"},{"location":"api/bareutils.header/#summary_39","text":"Returns the expect header bareutils . expect ( headers : Headers , * , default : Optional[bytes] ) -> Optional[bytes]","title":"Summary"},{"location":"api/bareutils.header/#parameters_38","text":"headers : Headers (optional) The headers. default : Optional[bytes] An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_38","text":"Optional[bytes] : The expect directive if present, or the default value.","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilsexpires","text":"","title":"function bareutils.expires"},{"location":"api/bareutils.header/#summary_40","text":"The Expires header contains the date/time after which the response is bareutils . expires ( headers : Headers , * , default : Optional[datetime] ) -> Optional[datetime]","title":"Summary"},{"location":"api/bareutils.header/#parameters_39","text":"headers : Headers (optional) The headers. default : Optional[datetime] An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_39","text":"Optional[datetime] : The date/time after which the response is considered stale, or the default value.","title":"Returns"},{"location":"api/bareutils.header/#description_31","text":"considered stale.","title":"Description"},{"location":"api/bareutils.header/#function-bareutilsfind","text":"","title":"function bareutils.find"},{"location":"api/bareutils.header/#summary_41","text":"Find the value of a header, or return a default value. bareutils . find ( name : bytes , headers : Headers , default : Optional[bytes] ) -> Optional[bytes]","title":"Summary"},{"location":"api/bareutils.header/#parameters_40","text":"name : bytes (optional) The header name. headers : Headers (optional) The headers to search. default : Optional[bytes] An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_40","text":"Optional[bytes] : The value of the header if found, otherwise the default value.","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilsfind_all","text":"","title":"function bareutils.find_all"},{"location":"api/bareutils.header/#summary_42","text":"Find all the values for a given header. bareutils . find_all ( name : bytes , headers : Headers ) -> List[bytes]","title":"Summary"},{"location":"api/bareutils.header/#parameters_41","text":"name : bytes (optional) The header name. headers : Headers (optional) The headers to search.","title":"Parameters"},{"location":"api/bareutils.header/#returns_41","text":"List[bytes] : A list of the header values which may be empty if there were none found.","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilsfind_date","text":"","title":"function bareutils.find_date"},{"location":"api/bareutils.header/#summary_43","text":"Find a header containing a date. bareutils . find_date ( name : bytes , headers : Headers , * , default : Optional[datetime] ) -> Optional[datetime]","title":"Summary"},{"location":"api/bareutils.header/#parameters_42","text":"name : bytes (optional) The name of the header. headers : Headers (optional) The headers. default : Optional[datetime] The headers, Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_42","text":"Optional[datetime] : The date if found, otherwise the default value.","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilshost","text":"","title":"function bareutils.host"},{"location":"api/bareutils.header/#summary_44","text":"Returns the host header as a name, port tuple bareutils . host ( headers : Headers , * , default : Optional[Tuple[bytes ) -> Optional[Tuple[bytes, Optional[int]]]","title":"Summary"},{"location":"api/bareutils.header/#parameters_43","text":"headers : Headers (optional) The headers. default : Optional[Tuple[bytes An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_43","text":"Optional[Tuple[bytes, Optional[int]]] : The host as a name, port tuple.","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilsif_modified_since","text":"","title":"function bareutils.if_modified_since"},{"location":"api/bareutils.header/#summary_45","text":"The If-Modified-Since request HTTP header makes the request conditional: bareutils . if_modified_since ( headers : Headers , * , default : Optional[datetime] ) -> Optional[datetime]","title":"Summary"},{"location":"api/bareutils.header/#parameters_44","text":"headers : Headers (optional) The headers default : Optional[datetime] [description]. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_44","text":"Optional[datetime] : The timestamp if present, otherwise the default value.","title":"Returns"},{"location":"api/bareutils.header/#description_32","text":"the server will send back the requested resource, with a 200 status, only if it has been last modified after the given date. If the request has not been modified since, the response will be a 304 without any body; the Last-Modified response header of a previous request will contain the date of last modification. Unlike If-Unmodified-Since, If-Modified-Since can only be used with a GET or HEAD.","title":"Description"},{"location":"api/bareutils.header/#function-bareutilsindex","text":"","title":"function bareutils.index"},{"location":"api/bareutils.header/#summary_46","text":"Find the index of the header in the list. bareutils . index ( name : bytes , headers : Headers ) -> int","title":"Summary"},{"location":"api/bareutils.header/#parameters_45","text":"name : bytes (optional) The header name. headers : Headers (optional) The headers to search.","title":"Parameters"},{"location":"api/bareutils.header/#returns_45","text":"int : The index of the header or -1 if not found.","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilslast_modified","text":"","title":"function bareutils.last_modified"},{"location":"api/bareutils.header/#summary_47","text":"The Last-Modified response HTTP header contains the date and time at bareutils . last_modified ( headers : Headers , * , default : Optional[datetime] ) -> Optional[datetime]","title":"Summary"},{"location":"api/bareutils.header/#parameters_46","text":"headers : Headers (optional) The headers. default : Optional[datetime] An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_46","text":"Optional[datetime] : The timestamp if present, otherwise the default value.","title":"Returns"},{"location":"api/bareutils.header/#description_33","text":"which the origin server believes the resource was last modified. It is used as a validator to determine if a resource received or stored is the same. Less accurate than an ETag header, it is a fallback mechanism. Conditional requests containing If-Modified-Since or If-Unmodified-Since headers make use of this field.","title":"Description"},{"location":"api/bareutils.header/#function-bareutilslocation","text":"","title":"function bareutils.location"},{"location":"api/bareutils.header/#summary_48","text":"The Location response header indicates the URL to redirect a page to. It bareutils . location ( headers : Headers , * , default : Optional[bytes] ) -> Optional[bytes]","title":"Summary"},{"location":"api/bareutils.header/#parameters_47","text":"headers : Headers (optional) The headers. default : Optional[bytes] An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_47","text":"Optional[bytes] : The redirect location","title":"Returns"},{"location":"api/bareutils.header/#description_34","text":"only provides a meaning when served with a 3xx (redirection) or 201 (created) status response.","title":"Description"},{"location":"api/bareutils.header/#function-bareutilsorigin","text":"","title":"function bareutils.origin"},{"location":"api/bareutils.header/#summary_49","text":"The Origin request header indicates where a fetch originates from. It bareutils . origin ( headers : Headers , * , default : Optional[bytes] ) -> Optional[bytes]","title":"Summary"},{"location":"api/bareutils.header/#parameters_48","text":"headers : Headers (optional) The headers. default : Optional[bytes] An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_48","text":"Optional[bytes] : The origin if present, otherwise the default value.","title":"Returns"},{"location":"api/bareutils.header/#description_35","text":"doesn't include any path information, but only the server name. It is sent with CORS requests, as well as with POST requests. It is similar to the Referer header, but, unlike this header, it doesn't disclose the whole path.","title":"Description"},{"location":"api/bareutils.header/#function-bareutilsreferer","text":"","title":"function bareutils.referer"},{"location":"api/bareutils.header/#summary_50","text":"The Referer request header contains the address of the previous web page bareutils . referer ( headers : Headers , * , default : Optional[bytes] ) -> Optional[bytes]","title":"Summary"},{"location":"api/bareutils.header/#parameters_49","text":"headers : Headers (optional) The headers. default : Optional[bytes] An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_49","text":"Optional[bytes] : The referer if present; otherwise the default value.","title":"Returns"},{"location":"api/bareutils.header/#description_36","text":"from which a link to the currently requested page was followed. The Referer header allows servers to identify where people are visiting them from and may use that data for analytics, logging, or optimized caching, for example.","title":"Description"},{"location":"api/bareutils.header/#function-bareutilsserver","text":"","title":"function bareutils.server"},{"location":"api/bareutils.header/#summary_51","text":"The Server header contains information about the software used by the bareutils . server ( headers : Headers , * , default : Optional[bytes] ) -> Optional[bytes]","title":"Summary"},{"location":"api/bareutils.header/#parameters_50","text":"headers : Headers (optional) The headers. default : Optional[bytes] An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_50","text":"Optional[bytes] : The product directive","title":"Returns"},{"location":"api/bareutils.header/#description_37","text":"origin server to handle the request.","title":"Description"},{"location":"api/bareutils.header/#function-bareutilsset_cookie","text":"","title":"function bareutils.set_cookie"},{"location":"api/bareutils.header/#summary_52","text":"Returns the cookies as a name-value mapping. bareutils . set_cookie ( headers : Headers ) -> Mapping[bytes, List[Mapping[str, Any]]]","title":"Summary"},{"location":"api/bareutils.header/#parameters_51","text":"headers : Headers (optional) The headers.","title":"Parameters"},{"location":"api/bareutils.header/#returns_51","text":"Mapping[bytes, List[Mapping[str, Any]]] : The cookies as a name-value mapping.","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilsto_dict","text":"","title":"function bareutils.to_dict"},{"location":"api/bareutils.header/#summary_53","text":"Convert a list of headers into a dictionary where the key is the header bareutils . to_dict ( headers : Headers ) -> MutableMapping[bytes, List[bytes]]","title":"Summary"},{"location":"api/bareutils.header/#parameters_52","text":"headers : Headers (optional) A list of headers.","title":"Parameters"},{"location":"api/bareutils.header/#returns_52","text":"MutableMapping[bytes, List[bytes]] : A dictionary where the key is the header name and the value is a list of the values of the headers for that name","title":"Returns"},{"location":"api/bareutils.header/#description_38","text":"name and the value is a list of the values of the headers for that name","title":"Description"},{"location":"api/bareutils.header/#function-bareutilsupsert","text":"","title":"function bareutils.upsert"},{"location":"api/bareutils.header/#summary_54","text":"If the header exists overwrite the value, otherwise append a new value. bareutils . upsert ( name : bytes , value : bytes , headers : Headers ) -> Any","title":"Summary"},{"location":"api/bareutils.header/#parameters_53","text":"name : bytes (optional) The header name. value : bytes (optional) The header value. headers : Headers (optional) The headers.","title":"Parameters"},{"location":"api/bareutils.header/#returns_53","text":"Any :","title":"Returns"},{"location":"api/bareutils.header/#function-bareutilsvary","text":"","title":"function bareutils.vary"},{"location":"api/bareutils.header/#summary_55","text":"Returns the vary header value as a list of headers. bareutils . vary ( headers : ListTuple[bytes, bytes]] , * , default : Optional[List[bytes]] ) -> Optional[List[bytes]]","title":"Summary"},{"location":"api/bareutils.header/#parameters_54","text":"headers : ListTuple[bytes, bytes]] (optional) default : Optional[List[bytes]] An optional default value. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.header/#returns_54","text":"Optional[List[bytes]] : A list of the vary headers if present; otherwise the default value.","title":"Returns"},{"location":"api/bareutils.response_code/","text":"module bareutils.response_code \u00b6 Summary \u00b6 HTTP Status codes function bareutils . is_client_error \u00b6 Summary \u00b6 Return true if the code is a client error HTTP response code. bareutils . is_client_error ( code : int ) -> bool Parameters \u00b6 code : int (optional) The HTTP response code. Returns \u00b6 bool : True if the code was a client error else false. function bareutils . is_information \u00b6 Summary \u00b6 Return true if the code is an information HTTP response code. bareutils . is_information ( code : int ) -> bool Parameters \u00b6 code : int (optional) The HTTP response code. Returns \u00b6 bool : True if the code was informational else false. function bareutils . is_redirection \u00b6 Summary \u00b6 Return true if the code is aa redirection HTTP response code. bareutils . is_redirection ( code : int ) -> bool Parameters \u00b6 code : int (optional) The HTTP response code. Returns \u00b6 bool : True if the code was a redirection else false. function bareutils . is_server_error \u00b6 Summary \u00b6 Return true if the code is a server error HTTP response code. bareutils . is_server_error ( code : int ) -> bool Parameters \u00b6 code : int (optional) The HTTP response code. Returns \u00b6 bool : True if the code was a server error else false. function bareutils . is_successful \u00b6 Summary \u00b6 Return true if the code is a successful HTTP response code. bareutils . is_successful ( code : int ) -> bool Parameters \u00b6 code : int (optional) The HTTP response code. Returns \u00b6 bool : True if the code was successful else false.","title":"bareutils.response_code"},{"location":"api/bareutils.response_code/#module-bareutilsresponse_code","text":"","title":"module bareutils.response_code"},{"location":"api/bareutils.response_code/#summary","text":"HTTP Status codes","title":"Summary"},{"location":"api/bareutils.response_code/#function-bareutilsis_client_error","text":"","title":"function bareutils.is_client_error"},{"location":"api/bareutils.response_code/#summary_1","text":"Return true if the code is a client error HTTP response code. bareutils . is_client_error ( code : int ) -> bool","title":"Summary"},{"location":"api/bareutils.response_code/#parameters","text":"code : int (optional) The HTTP response code.","title":"Parameters"},{"location":"api/bareutils.response_code/#returns","text":"bool : True if the code was a client error else false.","title":"Returns"},{"location":"api/bareutils.response_code/#function-bareutilsis_information","text":"","title":"function bareutils.is_information"},{"location":"api/bareutils.response_code/#summary_2","text":"Return true if the code is an information HTTP response code. bareutils . is_information ( code : int ) -> bool","title":"Summary"},{"location":"api/bareutils.response_code/#parameters_1","text":"code : int (optional) The HTTP response code.","title":"Parameters"},{"location":"api/bareutils.response_code/#returns_1","text":"bool : True if the code was informational else false.","title":"Returns"},{"location":"api/bareutils.response_code/#function-bareutilsis_redirection","text":"","title":"function bareutils.is_redirection"},{"location":"api/bareutils.response_code/#summary_3","text":"Return true if the code is aa redirection HTTP response code. bareutils . is_redirection ( code : int ) -> bool","title":"Summary"},{"location":"api/bareutils.response_code/#parameters_2","text":"code : int (optional) The HTTP response code.","title":"Parameters"},{"location":"api/bareutils.response_code/#returns_2","text":"bool : True if the code was a redirection else false.","title":"Returns"},{"location":"api/bareutils.response_code/#function-bareutilsis_server_error","text":"","title":"function bareutils.is_server_error"},{"location":"api/bareutils.response_code/#summary_4","text":"Return true if the code is a server error HTTP response code. bareutils . is_server_error ( code : int ) -> bool","title":"Summary"},{"location":"api/bareutils.response_code/#parameters_3","text":"code : int (optional) The HTTP response code.","title":"Parameters"},{"location":"api/bareutils.response_code/#returns_3","text":"bool : True if the code was a server error else false.","title":"Returns"},{"location":"api/bareutils.response_code/#function-bareutilsis_successful","text":"","title":"function bareutils.is_successful"},{"location":"api/bareutils.response_code/#summary_5","text":"Return true if the code is a successful HTTP response code. bareutils . is_successful ( code : int ) -> bool","title":"Summary"},{"location":"api/bareutils.response_code/#parameters_4","text":"code : int (optional) The HTTP response code.","title":"Parameters"},{"location":"api/bareutils.response_code/#returns_4","text":"bool : True if the code was successful else false.","title":"Returns"},{"location":"api/bareutils.responses/","text":"module bareutils.responses \u00b6 Summary \u00b6 Responses function bareutils . bytes_response \u00b6 Summary \u00b6 A helper function to create a bytes response. bareutils . bytes_response ( status : int , headers : Optional[Headers] , buf : bytes , content_type : bytes , chunk_size : int , pushes : Optional[PushResponses] ) -> HttpResponse Parameters \u00b6 status : int (optional) The HTTP status code. headers : Optional[Headers] (optional) The HTTP headers. buf : bytes (optional) The data to send. content_type : bytes The content type of the data. Defaults to b'application/octet-stream'. chunk_size : int The size of each chunk to send or -1 to send as a single chunk. Defaults to -1. pushes : Optional[PushResponses] Optional posh responses for HTTP/2. Defaults to None. Returns \u00b6 HttpResponse : The HTTP response. function bareutils . json_response \u00b6 Summary \u00b6 A helper function to send a json response. bareutils . json_response ( status : int , headers : Optional[Headers] , obj : Any , content_type : bytes , dumps : Callable[[Any] , chunk_size : int , pushes : Optional[PushResponses] ) -> HttpResponse Parameters \u00b6 status : int (optional) The HTTP status code. headers : Optional[Headers] (optional) The HTTP headers. obj : Any (optional) The object to send as JSON. content_type : bytes The content type. Defaults to b'application/json'. dumps : Callable[[Any] The function to use to turn the object into JSON. Defaults to json.dumps. chunk_size : int The size of each chunk to send or -1 to send as a single chunk. Defaults to -1. pushes : Optional[PushResponses] Optional posh responses for HTTP/2. Defaults to None. Returns \u00b6 HttpResponse : The HTTP response. function bareutils . text_response \u00b6 Summary \u00b6 A helper function to create a text response. bareutils . text_response ( status : int , headers : Optional[Headers] , text : str , encoding : str , content_type : bytes , chunk_size : int , pushes : Optional[PushResponses] ) -> HttpResponse Parameters \u00b6 status : int (optional) The HTTP status code. headers : Optional[Headers] (optional) The HTTP headers. text : str (optional) The text to send. encoding : str [description]. Defaults to 'utf-8'. content_type : bytes The content type. Defaults to b'text/plain'. chunk_size : int The size of each chunk to send or -1 to send as a single chunk. Defaults to -1. pushes : Optional[PushResponses] Optional posh responses for HTTP/2. Defaults to None. Returns \u00b6 HttpResponse : The HTTP response.","title":"bareutils.responses"},{"location":"api/bareutils.responses/#module-bareutilsresponses","text":"","title":"module bareutils.responses"},{"location":"api/bareutils.responses/#summary","text":"Responses","title":"Summary"},{"location":"api/bareutils.responses/#function-bareutilsbytes_response","text":"","title":"function bareutils.bytes_response"},{"location":"api/bareutils.responses/#summary_1","text":"A helper function to create a bytes response. bareutils . bytes_response ( status : int , headers : Optional[Headers] , buf : bytes , content_type : bytes , chunk_size : int , pushes : Optional[PushResponses] ) -> HttpResponse","title":"Summary"},{"location":"api/bareutils.responses/#parameters","text":"status : int (optional) The HTTP status code. headers : Optional[Headers] (optional) The HTTP headers. buf : bytes (optional) The data to send. content_type : bytes The content type of the data. Defaults to b'application/octet-stream'. chunk_size : int The size of each chunk to send or -1 to send as a single chunk. Defaults to -1. pushes : Optional[PushResponses] Optional posh responses for HTTP/2. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.responses/#returns","text":"HttpResponse : The HTTP response.","title":"Returns"},{"location":"api/bareutils.responses/#function-bareutilsjson_response","text":"","title":"function bareutils.json_response"},{"location":"api/bareutils.responses/#summary_2","text":"A helper function to send a json response. bareutils . json_response ( status : int , headers : Optional[Headers] , obj : Any , content_type : bytes , dumps : Callable[[Any] , chunk_size : int , pushes : Optional[PushResponses] ) -> HttpResponse","title":"Summary"},{"location":"api/bareutils.responses/#parameters_1","text":"status : int (optional) The HTTP status code. headers : Optional[Headers] (optional) The HTTP headers. obj : Any (optional) The object to send as JSON. content_type : bytes The content type. Defaults to b'application/json'. dumps : Callable[[Any] The function to use to turn the object into JSON. Defaults to json.dumps. chunk_size : int The size of each chunk to send or -1 to send as a single chunk. Defaults to -1. pushes : Optional[PushResponses] Optional posh responses for HTTP/2. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.responses/#returns_1","text":"HttpResponse : The HTTP response.","title":"Returns"},{"location":"api/bareutils.responses/#function-bareutilstext_response","text":"","title":"function bareutils.text_response"},{"location":"api/bareutils.responses/#summary_3","text":"A helper function to create a text response. bareutils . text_response ( status : int , headers : Optional[Headers] , text : str , encoding : str , content_type : bytes , chunk_size : int , pushes : Optional[PushResponses] ) -> HttpResponse","title":"Summary"},{"location":"api/bareutils.responses/#parameters_2","text":"status : int (optional) The HTTP status code. headers : Optional[Headers] (optional) The HTTP headers. text : str (optional) The text to send. encoding : str [description]. Defaults to 'utf-8'. content_type : bytes The content type. Defaults to b'text/plain'. chunk_size : int The size of each chunk to send or -1 to send as a single chunk. Defaults to -1. pushes : Optional[PushResponses] Optional posh responses for HTTP/2. Defaults to None.","title":"Parameters"},{"location":"api/bareutils.responses/#returns_2","text":"HttpResponse : The HTTP response.","title":"Returns"},{"location":"api/bareutils.streaming/","text":"module bareutils.streaming \u00b6 Summary \u00b6 Streaming async function bareutils . bytes_reader \u00b6 Summary \u00b6 Extracts the body content as bytes. async bareutils . bytes_reader ( content : Content ) -> bytes Parameters \u00b6 content : Content (optional) The content argument of the request handler. Returns \u00b6 bytes : The body as bytes. async generator function bareutils . bytes_writer \u00b6 Summary \u00b6 Creates an asynchronous iterator from the supplied response body. async bareutils . bytes_writer ( buf : bytes , chunk_size : int ) -> Content Parameters \u00b6 buf : bytes (optional) The response body to return. chunk_size : int The size of each chunk to send or -1 to send as a single chunk.. Defaults to -1. Yields \u00b6 Content : The body bytes async function bareutils . text_reader \u00b6 Summary \u00b6 Extracts the body contents as text. async bareutils . text_reader ( content : Content , encoding : str ) -> str Parameters \u00b6 content : Content (optional) The content argument of the request handler. encoding : str The encoding of the text. Defaults to 'utf-8'. Returns \u00b6 str : The body contents as a string. async generator function bareutils . text_writer \u00b6 Summary \u00b6 Creates an asynchronous iterator from the supplied response body. async bareutils . text_writer ( text : str , encoding : str , chunk_size : int ) -> Content Parameters \u00b6 text : str (optional) The response body. encoding : str The encoding to apply when transforming the text into bytes. Defaults to 'utf-8'. chunk_size : int The size of each chunk to send or -1 to send as a single chunk.. Defaults to -1. Yields \u00b6 Content : The body bytes","title":"bareutils.streaming"},{"location":"api/bareutils.streaming/#module-bareutilsstreaming","text":"","title":"module bareutils.streaming"},{"location":"api/bareutils.streaming/#summary","text":"Streaming","title":"Summary"},{"location":"api/bareutils.streaming/#async-function-bareutilsbytes_reader","text":"","title":"async function bareutils.bytes_reader"},{"location":"api/bareutils.streaming/#summary_1","text":"Extracts the body content as bytes. async bareutils . bytes_reader ( content : Content ) -> bytes","title":"Summary"},{"location":"api/bareutils.streaming/#parameters","text":"content : Content (optional) The content argument of the request handler.","title":"Parameters"},{"location":"api/bareutils.streaming/#returns","text":"bytes : The body as bytes.","title":"Returns"},{"location":"api/bareutils.streaming/#async-generator-function-bareutilsbytes_writer","text":"","title":"async generator function bareutils.bytes_writer"},{"location":"api/bareutils.streaming/#summary_2","text":"Creates an asynchronous iterator from the supplied response body. async bareutils . bytes_writer ( buf : bytes , chunk_size : int ) -> Content","title":"Summary"},{"location":"api/bareutils.streaming/#parameters_1","text":"buf : bytes (optional) The response body to return. chunk_size : int The size of each chunk to send or -1 to send as a single chunk.. Defaults to -1.","title":"Parameters"},{"location":"api/bareutils.streaming/#yields","text":"Content : The body bytes","title":"Yields"},{"location":"api/bareutils.streaming/#async-function-bareutilstext_reader","text":"","title":"async function bareutils.text_reader"},{"location":"api/bareutils.streaming/#summary_3","text":"Extracts the body contents as text. async bareutils . text_reader ( content : Content , encoding : str ) -> str","title":"Summary"},{"location":"api/bareutils.streaming/#parameters_2","text":"content : Content (optional) The content argument of the request handler. encoding : str The encoding of the text. Defaults to 'utf-8'.","title":"Parameters"},{"location":"api/bareutils.streaming/#returns_1","text":"str : The body contents as a string.","title":"Returns"},{"location":"api/bareutils.streaming/#async-generator-function-bareutilstext_writer","text":"","title":"async generator function bareutils.text_writer"},{"location":"api/bareutils.streaming/#summary_4","text":"Creates an asynchronous iterator from the supplied response body. async bareutils . text_writer ( text : str , encoding : str , chunk_size : int ) -> Content","title":"Summary"},{"location":"api/bareutils.streaming/#parameters_3","text":"text : str (optional) The response body. encoding : str The encoding to apply when transforming the text into bytes. Defaults to 'utf-8'. chunk_size : int The size of each chunk to send or -1 to send as a single chunk.. Defaults to -1.","title":"Parameters"},{"location":"api/bareutils.streaming/#yields_1","text":"Content : The body bytes","title":"Yields"},{"location":"api/bareutils.unpacking/","text":"module bareutils.unpacking \u00b6 Summary \u00b6 Unpackers async function bareutils . unpack_multipart_form_data \u00b6 Summary \u00b6 Unpack multipart form data async bareutils . unpack_multipart_form_data ( content_type : bytes , content : Content ) -> List[Tuple[MessageParams, MessagePayload]] Parameters \u00b6 content_type : bytes (optional) The 'content-type' header content : Content (optional) The content to parse. Returns \u00b6 List[Tuple[MessageParams, MessagePayload]] : The form and files","title":"bareutils.unpacking"},{"location":"api/bareutils.unpacking/#module-bareutilsunpacking","text":"","title":"module bareutils.unpacking"},{"location":"api/bareutils.unpacking/#summary","text":"Unpackers","title":"Summary"},{"location":"api/bareutils.unpacking/#async-function-bareutilsunpack_multipart_form_data","text":"","title":"async function bareutils.unpack_multipart_form_data"},{"location":"api/bareutils.unpacking/#summary_1","text":"Unpack multipart form data async bareutils . unpack_multipart_form_data ( content_type : bytes , content : Content ) -> List[Tuple[MessageParams, MessagePayload]]","title":"Summary"},{"location":"api/bareutils.unpacking/#parameters","text":"content_type : bytes (optional) The 'content-type' header content : Content (optional) The content to parse.","title":"Parameters"},{"location":"api/bareutils.unpacking/#returns","text":"List[Tuple[MessageParams, MessagePayload]] : The form and files","title":"Returns"},{"location":"user-guide/compression/","text":"Compression \u00b6 The bareUtils module bareutils.compression provides constants and helper functions for dealing with compression. More information can be found in streaming and middleware .","title":"Compression"},{"location":"user-guide/compression/#compression","text":"The bareUtils module bareutils.compression provides constants and helper functions for dealing with compression. More information can be found in streaming and middleware .","title":"Compression"},{"location":"user-guide/cookies/","text":"Managing cookies \u00b6 The bareUtils module bareutils.cookies provides constants and helper functions for dealing with cookies. More information can be found in the api .","title":"Managing cookies"},{"location":"user-guide/cookies/#managing-cookies","text":"The bareUtils module bareutils.cookies provides constants and helper functions for dealing with cookies. More information can be found in the api .","title":"Managing cookies"},{"location":"user-guide/getting-started/","text":"Getting started. \u00b6 These utilities provide utilities for client and server web frameworks. Click on the following to find out more about: Response codes Reading and writing headers Streaming content Managing cookies Compression Unpacking body content","title":"Getting started."},{"location":"user-guide/getting-started/#getting-started","text":"These utilities provide utilities for client and server web frameworks. Click on the following to find out more about: Response codes Reading and writing headers Streaming content Managing cookies Compression Unpacking body content","title":"Getting started."},{"location":"user-guide/headers/","text":"Reading and writing headers \u00b6 The bareUtils module bareutils.header provides constants and helper functions for dealing with ASGI headers. More information can be found in the api . The most common function is find_header . import asyncio from bareclient import HttpClient import bareutils.response_code as response_code import bareutils.header as header async def main ( url ): async with HttpClient ( url , method = 'GET' ) as response : if response [ 'status_code' ] == response_code . OK and response [ 'more_body' ]: content_type = header . find_header ( b 'content-type' , response [ 'headers' ]) if content_type == b 'text/html' : async for part in response [ 'body' ]: print ( part ) asyncio . run ( main ( 'https://docs.python.org/3/library/cgi.html' )) Note how the header names an values are byte strings. Some helper functions have been provide for the commen headers: e.g. content_type .","title":"Reading and writing headers"},{"location":"user-guide/headers/#reading-and-writing-headers","text":"The bareUtils module bareutils.header provides constants and helper functions for dealing with ASGI headers. More information can be found in the api . The most common function is find_header . import asyncio from bareclient import HttpClient import bareutils.response_code as response_code import bareutils.header as header async def main ( url ): async with HttpClient ( url , method = 'GET' ) as response : if response [ 'status_code' ] == response_code . OK and response [ 'more_body' ]: content_type = header . find_header ( b 'content-type' , response [ 'headers' ]) if content_type == b 'text/html' : async for part in response [ 'body' ]: print ( part ) asyncio . run ( main ( 'https://docs.python.org/3/library/cgi.html' )) Note how the header names an values are byte strings. Some helper functions have been provide for the commen headers: e.g. content_type .","title":"Reading and writing headers"},{"location":"user-guide/installation/","text":"Installation \u00b6 Typically this package will be a dependency of bareASGI or bareClient (read the docs ). You can install it separately with pip. pip install bareutils This is a Python3.7 and later package.","title":"Installation"},{"location":"user-guide/installation/#installation","text":"Typically this package will be a dependency of bareASGI or bareClient (read the docs ). You can install it separately with pip. pip install bareutils This is a Python3.7 and later package.","title":"Installation"},{"location":"user-guide/response-codes/","text":"Response Codes \u00b6 The bareUtils module bareutils.response_codes provides constants and helper functions for dealing with response codes More information can be found in the api . For example bareClient might check for a response code of 200 (OK): 1 2 3 4 5 6 7 8 9 10 11 import asyncio from bareclient import HttpClient import bareutils.response_code as response_code async def main ( url ): async with HttpClient ( url , method = 'GET' ) as response : if response [ 'status_code' ] == response_code . OK and response [ 'more_body' ]: async for part in response [ 'body' ]: print ( part ) asyncio . run ( main ( 'https://docs.python.org/3/library/cgi.html' )) We import the module using the as syntax on line 3 in order to make everything in the module available. The we can use response_code.OK on line 7. If we just wanted to test for a valid response code we could have used response_code.is_successful(response['status_code']) .","title":"Response Codes"},{"location":"user-guide/response-codes/#response-codes","text":"The bareUtils module bareutils.response_codes provides constants and helper functions for dealing with response codes More information can be found in the api . For example bareClient might check for a response code of 200 (OK): 1 2 3 4 5 6 7 8 9 10 11 import asyncio from bareclient import HttpClient import bareutils.response_code as response_code async def main ( url ): async with HttpClient ( url , method = 'GET' ) as response : if response [ 'status_code' ] == response_code . OK and response [ 'more_body' ]: async for part in response [ 'body' ]: print ( part ) asyncio . run ( main ( 'https://docs.python.org/3/library/cgi.html' )) We import the module using the as syntax on line 3 in order to make everything in the module available. The we can use response_code.OK on line 7. If we just wanted to test for a valid response code we could have used response_code.is_successful(response['status_code']) .","title":"Response Codes"},{"location":"user-guide/streaming-content/","text":"Streaming \u00b6 The bareUtils module bareutils.streaming provides constants and helper functions for streaming body content. More information can be found in the api . Body content is sent and received as asynchronous iterators. The most common functions are: bytes_reader to read streams of bytes, bytes_writer to write streams of bytes, text_reader to read streams of text, text_writer to write streams of text. For example to read a text stream from a request handler: from bareutils.streaming import text_reader async def handle_request ( scope , info , matches , content ): text = await text_reader ( content ) return 200 , [( b 'content-type' , b 'text/plain' )], text_write ( text . lower ())","title":"Streaming"},{"location":"user-guide/streaming-content/#streaming","text":"The bareUtils module bareutils.streaming provides constants and helper functions for streaming body content. More information can be found in the api . Body content is sent and received as asynchronous iterators. The most common functions are: bytes_reader to read streams of bytes, bytes_writer to write streams of bytes, text_reader to read streams of text, text_writer to write streams of text. For example to read a text stream from a request handler: from bareutils.streaming import text_reader async def handle_request ( scope , info , matches , content ): text = await text_reader ( content ) return 200 , [( b 'content-type' , b 'text/plain' )], text_write ( text . lower ())","title":"Streaming"},{"location":"user-guide/unpacking/","text":"Unpacking body content \u00b6 The bareUtils module bareutils.unpacking provides constants and helper functions for dealing with unpacking body content. More information can be found in the api .","title":"Unpacking body content"},{"location":"user-guide/unpacking/#unpacking-body-content","text":"The bareUtils module bareutils.unpacking provides constants and helper functions for dealing with unpacking body content. More information can be found in the api .","title":"Unpacking body content"}]}